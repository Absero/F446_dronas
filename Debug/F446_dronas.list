
F446_dronas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c2c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e10  08006e10  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e18  08006e18  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e18  08006e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000010  08006e30  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006e30  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff34  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f96  00000000  00000000  0002ff74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  00031f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  00032eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002224f  00000000  00000000  00033d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b6b4  00000000  00000000  00055fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1b01  00000000  00000000  0006168b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013318c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004300  00000000  00000000  00133208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006dd8 	.word	0x08006dd8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08006dd8 	.word	0x08006dd8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MPU6050_Init>:

static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 800050c:	2254      	movs	r2, #84	; 0x54
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <MPU6050_Init+0x1c>)
 8000512:	f006 fc4d 	bl	8006db0 <memcpy>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000002c 	.word	0x2000002c

08000524 <I2C_Write8>:
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
}

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000538:	79bb      	ldrb	r3, [r7, #6]
 800053a:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR << 1);
 800053c:	23d0      	movs	r3, #208	; 0xd0
 800053e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2, 100);
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	b299      	uxth	r1, r3
 8000544:	f107 020c 	add.w	r2, r7, #12
 8000548:	2364      	movs	r3, #100	; 0x64
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2302      	movs	r3, #2
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <I2C_Write8+0x38>)
 8000550:	f002 f844 	bl	80025dc <HAL_I2C_Master_Transmit>
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000002c 	.word	0x2000002c

08000560 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	206b      	movs	r0, #107	; 0x6b
 8000570:	f7ff ffd8 	bl	8000524 <I2C_Write8>
	HAL_Delay(100);
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f000 ffe7 	bl	8001548 <HAL_Delay>
	Buffer = config->ClockSource & 0x07; //change the 7th bits of register
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	f003 0307 	and.w	r3, r3, #7
 8000582:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config->Sleep_Mode_Bit << 6) & 0x40; // change only the 7th bit in the register
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	019b      	lsls	r3, r3, #6
 800058a:	b25b      	sxtb	r3, r3
 800058c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000590:	b25a      	sxtb	r2, r3
 8000592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000596:	4313      	orrs	r3, r2
 8000598:	b25b      	sxtb	r3, r3
 800059a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	4619      	mov	r1, r3
 80005a0:	206b      	movs	r0, #107	; 0x6b
 80005a2:	f7ff ffbf 	bl	8000524 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80005a6:	2064      	movs	r0, #100	; 0x64
 80005a8:	f000 ffce 	bl	8001548 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	78db      	ldrb	r3, [r3, #3]
 80005b4:	f003 0307 	and.w	r3, r3, #7
 80005b8:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	4619      	mov	r1, r3
 80005be:	201a      	movs	r0, #26
 80005c0:	f7ff ffb0 	bl	8000524 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 0318 	and.w	r3, r3, #24
 80005d4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	4619      	mov	r1, r3
 80005da:	201b      	movs	r0, #27
 80005dc:	f7ff ffa2 	bl	8000524 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	00db      	lsls	r3, r3, #3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0318 	and.w	r3, r3, #24
 80005f0:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	4619      	mov	r1, r3
 80005f6:	201c      	movs	r0, #28
 80005f8:	f7ff ff94 	bl	8000524 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 80005fc:	2004      	movs	r0, #4
 80005fe:	f000 f857 	bl	80006b0 <MPU6050_Set_SMPRT_DIV>

	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d81a      	bhi.n	8000640 <MPU6050_Config+0xe0>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <MPU6050_Config+0xb0>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	08000629 	.word	0x08000629
 8000618:	08000631 	.word	0x08000631
 800061c:	08000639 	.word	0x08000639
	case AFS_SEL_2g:
		accelScalingFactor = (2000.0f / 32768.0f);
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MPU6050_Config+0x12c>)
 8000622:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <MPU6050_Config+0x130>)
 8000624:	601a      	str	r2, [r3, #0]
		break;
 8000626:	e00c      	b.n	8000642 <MPU6050_Config+0xe2>

	case AFS_SEL_4g:
		accelScalingFactor = (4000.0f / 32768.0f);
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <MPU6050_Config+0x12c>)
 800062a:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <MPU6050_Config+0x134>)
 800062c:	601a      	str	r2, [r3, #0]
		break;
 800062e:	e008      	b.n	8000642 <MPU6050_Config+0xe2>

	case AFS_SEL_8g:
		accelScalingFactor = (8000.0f / 32768.0f);
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <MPU6050_Config+0x12c>)
 8000632:	4a19      	ldr	r2, [pc, #100]	; (8000698 <MPU6050_Config+0x138>)
 8000634:	601a      	str	r2, [r3, #0]
		break;
 8000636:	e004      	b.n	8000642 <MPU6050_Config+0xe2>

	case AFS_SEL_16g:
		accelScalingFactor = (16000.0f / 32768.0f);
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MPU6050_Config+0x12c>)
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MPU6050_Config+0x13c>)
 800063c:	601a      	str	r2, [r3, #0]
		break;
 800063e:	e000      	b.n	8000642 <MPU6050_Config+0xe2>

	default:
		break;
 8000640:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d81a      	bhi.n	8000680 <MPU6050_Config+0x120>
 800064a:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <MPU6050_Config+0xf0>)
 800064c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000650:	08000661 	.word	0x08000661
 8000654:	08000669 	.word	0x08000669
 8000658:	08000671 	.word	0x08000671
 800065c:	08000679 	.word	0x08000679
	case FS_SEL_250:
		gyroScalingFactor = 250.0f / 32768.0f;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MPU6050_Config+0x140>)
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <MPU6050_Config+0x144>)
 8000664:	601a      	str	r2, [r3, #0]
		break;
 8000666:	e00c      	b.n	8000682 <MPU6050_Config+0x122>

	case FS_SEL_500:
		gyroScalingFactor = 500.0f / 32768.0f;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MPU6050_Config+0x140>)
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MPU6050_Config+0x148>)
 800066c:	601a      	str	r2, [r3, #0]
		break;
 800066e:	e008      	b.n	8000682 <MPU6050_Config+0x122>

	case FS_SEL_1000:
		gyroScalingFactor = 1000.0f / 32768.0f;
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MPU6050_Config+0x140>)
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <MPU6050_Config+0x14c>)
 8000674:	601a      	str	r2, [r3, #0]
		break;
 8000676:	e004      	b.n	8000682 <MPU6050_Config+0x122>

	case FS_SEL_2000:
		gyroScalingFactor = 2000.0f / 32768.0f;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MPU6050_Config+0x140>)
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <MPU6050_Config+0x130>)
 800067c:	601a      	str	r2, [r3, #0]
		break;
 800067e:	e000      	b.n	8000682 <MPU6050_Config+0x122>

	default:
		break;
 8000680:	bf00      	nop
	}

}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000080 	.word	0x20000080
 8000690:	3d7a0000 	.word	0x3d7a0000
 8000694:	3dfa0000 	.word	0x3dfa0000
 8000698:	3e7a0000 	.word	0x3e7a0000
 800069c:	3efa0000 	.word	0x3efa0000
 80006a0:	20000084 	.word	0x20000084
 80006a4:	3bfa0000 	.word	0x3bfa0000
 80006a8:	3c7a0000 	.word	0x3c7a0000
 80006ac:	3cfa0000 	.word	0x3cfa0000

080006b0 <MPU6050_Set_SMPRT_DIV>:
	I2C_Read(SMPLRT_DIV_REG, &Buffer, 1);
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4619      	mov	r1, r3
 80006be:	2019      	movs	r0, #25
 80006c0:	f7ff ff30 	bl	8000524 <I2C_Write8>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <HAL_I2C_MemRxCpltCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C3) {
	}
	myAccelRaw.x = (int16_t) ((mDataRead[0] << 8) | mDataRead[1])
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <HAL_I2C_MemRxCpltCallback+0xa4>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	b21a      	sxth	r2, r3
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <HAL_I2C_MemRxCpltCallback+0xa4>)
 80006de:	785b      	ldrb	r3, [r3, #1]
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b21b      	sxth	r3, r3
			* (1000.0f / 16384.0f); // x-Axis
 80006e6:	ee07 3a90 	vmov	s15, r3
 80006ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ee:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000774 <HAL_I2C_MemRxCpltCallback+0xa8>
 80006f2:	ee67 7a87 	vmul.f32	s15, s15, s14
	myAccelRaw.x = (int16_t) ((mDataRead[0] << 8) | mDataRead[1])
 80006f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006fa:	ee17 3a90 	vmov	r3, s15
 80006fe:	b21a      	sxth	r2, r3
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <HAL_I2C_MemRxCpltCallback+0xac>)
 8000702:	801a      	strh	r2, [r3, #0]
	myAccelRaw.y = (int16_t) ((mDataRead[2] << 8) | mDataRead[3])
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <HAL_I2C_MemRxCpltCallback+0xa4>)
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	b21a      	sxth	r2, r3
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_I2C_MemRxCpltCallback+0xa4>)
 800070e:	78db      	ldrb	r3, [r3, #3]
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
			* (1000.0f / 16384.0f); // y-Axis
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000774 <HAL_I2C_MemRxCpltCallback+0xa8>
 8000722:	ee67 7a87 	vmul.f32	s15, s15, s14
	myAccelRaw.y = (int16_t) ((mDataRead[2] << 8) | mDataRead[3])
 8000726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800072a:	ee17 3a90 	vmov	r3, s15
 800072e:	b21a      	sxth	r2, r3
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_I2C_MemRxCpltCallback+0xac>)
 8000732:	805a      	strh	r2, [r3, #2]
	myAccelRaw.z = (int16_t) ((mDataRead[4] << 8) | mDataRead[5])
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_I2C_MemRxCpltCallback+0xa4>)
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	b21a      	sxth	r2, r3
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_I2C_MemRxCpltCallback+0xa4>)
 800073e:	795b      	ldrb	r3, [r3, #5]
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	b21b      	sxth	r3, r3
			* (1000.0f / 16384.0f); // z-Axis
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000774 <HAL_I2C_MemRxCpltCallback+0xa8>
 8000752:	ee67 7a87 	vmul.f32	s15, s15, s14
	myAccelRaw.z = (int16_t) ((mDataRead[4] << 8) | mDataRead[5])
 8000756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075a:	ee17 3a90 	vmov	r3, s15
 800075e:	b21a      	sxth	r2, r3
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_I2C_MemRxCpltCallback+0xac>)
 8000762:	809a      	strh	r2, [r3, #4]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	20000248 	.word	0x20000248
 8000774:	3d7a0000 	.word	0x3d7a0000
 8000778:	200002e4 	.word	0x200002e4

0800077c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b085      	sub	sp, #20
 8000780:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000782:	f000 fe6f 	bl	8001464 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000786:	f000 f913 	bl	80009b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800078a:	f000 fac3 	bl	8000d14 <MX_GPIO_Init>
	MX_DMA_Init();
 800078e:	f000 fa91 	bl	8000cb4 <MX_DMA_Init>
	MX_TIM4_Init();
 8000792:	f000 f9a9 	bl	8000ae8 <MX_TIM4_Init>
	MX_UART4_Init();
 8000796:	f000 fa63 	bl	8000c60 <MX_UART4_Init>
	MX_TIM14_Init();
 800079a:	f000 fa3d 	bl	8000c18 <MX_TIM14_Init>
	MX_I2C3_Init();
 800079e:	f000 f975 	bl	8000a8c <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */

	//==== MPU init ================================================================
	MPU6050_Init(&hi2c3);
 80007a2:	4879      	ldr	r0, [pc, #484]	; (8000988 <main+0x20c>)
 80007a4:	f7ff feae 	bl	8000504 <MPU6050_Init>
	MPU_ConfigTypeDef myMpuConfig;

	myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 80007a8:	2301      	movs	r3, #1
 80007aa:	70bb      	strb	r3, [r7, #2]
	myMpuConfig.ClockSource = Internal_8MHz;
 80007ac:	2300      	movs	r3, #0
 80007ae:	703b      	strb	r3, [r7, #0]
	myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80007b0:	2301      	movs	r3, #1
 80007b2:	70fb      	strb	r3, [r7, #3]
	myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80007b4:	2301      	movs	r3, #1
 80007b6:	707b      	strb	r3, [r7, #1]
	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 80007b8:	2300      	movs	r3, #0
 80007ba:	713b      	strb	r3, [r7, #4]
	MPU6050_Config(&myMpuConfig);
 80007bc:	463b      	mov	r3, r7
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fece 	bl	8000560 <MPU6050_Config>

	I2C_Write8(INT_PIN_CFG, (1 << 4) | (1 << 5));		//clear flag after read
 80007c4:	2130      	movs	r1, #48	; 0x30
 80007c6:	2037      	movs	r0, #55	; 0x37
 80007c8:	f7ff feac 	bl	8000524 <I2C_Write8>
	I2C_Write8(INT_ENABLE_REG, 1);		//enable interupt
 80007cc:	2101      	movs	r1, #1
 80007ce:	2038      	movs	r0, #56	; 0x38
 80007d0:	f7ff fea8 	bl	8000524 <I2C_Write8>

	//==== PWM init ================================================================
	HAL_TIM_Base_Start(&htim4);
 80007d4:	486d      	ldr	r0, [pc, #436]	; (800098c <main+0x210>)
 80007d6:	f004 fe44 	bl	8005462 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim14);	//apsauga nuo negaunamu duomenu
 80007da:	486d      	ldr	r0, [pc, #436]	; (8000990 <main+0x214>)
 80007dc:	f004 fe65 	bl	80054aa <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	//BL
 80007e0:	2100      	movs	r1, #0
 80007e2:	486a      	ldr	r0, [pc, #424]	; (800098c <main+0x210>)
 80007e4:	f004 feba 	bl	800555c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	//FL
 80007e8:	2104      	movs	r1, #4
 80007ea:	4868      	ldr	r0, [pc, #416]	; (800098c <main+0x210>)
 80007ec:	f004 feb6 	bl	800555c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	//BR
 80007f0:	2108      	movs	r1, #8
 80007f2:	4866      	ldr	r0, [pc, #408]	; (800098c <main+0x210>)
 80007f4:	f004 feb2 	bl	800555c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	//FR
 80007f8:	210c      	movs	r1, #12
 80007fa:	4864      	ldr	r0, [pc, #400]	; (800098c <main+0x210>)
 80007fc:	f004 feae 	bl	800555c <HAL_TIM_PWM_Start>

	//==== uart init ===============================================================
	HAL_UART_Receive_DMA(&huart4, mPaketas, 10);
 8000800:	220a      	movs	r2, #10
 8000802:	4964      	ldr	r1, [pc, #400]	; (8000994 <main+0x218>)
 8000804:	4864      	ldr	r0, [pc, #400]	; (8000998 <main+0x21c>)
 8000806:	f005 fd83 	bl	8006310 <HAL_UART_Receive_DMA>
	HAL_Delay(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fe9c 	bl	8001548 <HAL_Delay>
	HAL_UART_DMAStop(&huart4);
 8000810:	4861      	ldr	r0, [pc, #388]	; (8000998 <main+0x21c>)
 8000812:	f005 fdfd 	bl	8006410 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(&huart4, mPaketas, 10);
 8000816:	220a      	movs	r2, #10
 8000818:	495e      	ldr	r1, [pc, #376]	; (8000994 <main+0x218>)
 800081a:	485f      	ldr	r0, [pc, #380]	; (8000998 <main+0x21c>)
 800081c:	f005 fd78 	bl	8006310 <HAL_UART_Receive_DMA>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_Delay(50);
 8000820:	2032      	movs	r0, #50	; 0x32
 8000822:	f000 fe91 	bl	8001548 <HAL_Delay>

	while (1) {

		//==== Akselerometro duomenu nuskaitymas ===================================
		if (mFlags.accDataReady) {
 8000826:	4b5d      	ldr	r3, [pc, #372]	; (800099c <main+0x220>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00e      	beq.n	8000852 <main+0xd6>
			mFlags.accDataReady = 0;
 8000834:	4a59      	ldr	r2, [pc, #356]	; (800099c <main+0x220>)
 8000836:	7813      	ldrb	r3, [r2, #0]
 8000838:	f36f 0341 	bfc	r3, #1, #1
 800083c:	7013      	strb	r3, [r2, #0]
//			MPU6050_Get_Accel_Scale_AllData(&myAccelScaled, &myAccelRaw);

			HAL_I2C_Mem_Read_DMA(&hi2c3, MPU_ADDR << 1, ACCEL_XOUT_H_REG, 1,
 800083e:	2301      	movs	r3, #1
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	4b57      	ldr	r3, [pc, #348]	; (80009a0 <main+0x224>)
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	223b      	movs	r2, #59	; 0x3b
 800084a:	21d0      	movs	r1, #208	; 0xd0
 800084c:	484e      	ldr	r0, [pc, #312]	; (8000988 <main+0x20c>)
 800084e:	f001 ffc3 	bl	80027d8 <HAL_I2C_Mem_Read_DMA>
		}

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mFlags.dataUart) {
 8000852:	4b52      	ldr	r3, [pc, #328]	; (800099c <main+0x220>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0e2      	beq.n	8000826 <main+0xaa>
			mFlags.dataUart = 0;
 8000860:	4a4e      	ldr	r2, [pc, #312]	; (800099c <main+0x220>)
 8000862:	7813      	ldrb	r3, [r2, #0]
 8000864:	f36f 0300 	bfc	r3, #0, #1
 8000868:	7013      	strb	r3, [r2, #0]
			if (mPaketas[0] == '3') {
 800086a:	4b4a      	ldr	r3, [pc, #296]	; (8000994 <main+0x218>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b33      	cmp	r3, #51	; 0x33
 8000870:	d1d9      	bne.n	8000826 <main+0xaa>
				if (mPaketas[9] == getCRC(mPaketas, 9)) {
 8000872:	4b48      	ldr	r3, [pc, #288]	; (8000994 <main+0x218>)
 8000874:	7a5c      	ldrb	r4, [r3, #9]
 8000876:	2109      	movs	r1, #9
 8000878:	4846      	ldr	r0, [pc, #280]	; (8000994 <main+0x218>)
 800087a:	f000 fab3 	bl	8000de4 <getCRC>
 800087e:	4603      	mov	r3, r0
 8000880:	429c      	cmp	r4, r3
 8000882:	d177      	bne.n	8000974 <main+0x1f8>
					TIM14->CNT = 0;
 8000884:	4b47      	ldr	r3, [pc, #284]	; (80009a4 <main+0x228>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24

					//TODO padaryt funkcija kuri patikrintu min max reiksmes tiesiog, koeficientu irasyma

					TIM4->CCR1 = ((float) (mPaketas[1] | (mPaketas[2] << 8))
 800088a:	4b42      	ldr	r3, [pc, #264]	; (8000994 <main+0x218>)
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	461a      	mov	r2, r3
 8000890:	4b40      	ldr	r3, [pc, #256]	; (8000994 <main+0x218>)
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	4313      	orrs	r3, r2
 8000898:	ee07 3a90 	vmov	s15, r3
 800089c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* minStepCycles / maxSiunciamaReiksme
 80008a0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80009a8 <main+0x22c>
 80008a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008a8:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80009a8 <main+0x22c>
 80008ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
							+ minStepCycles);
 80008b0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80009a8 <main+0x22c>
 80008b4:	ee77 7a87 	vadd.f32	s15, s15, s14
					TIM4->CCR1 = ((float) (mPaketas[1] | (mPaketas[2] << 8))
 80008b8:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <main+0x230>)
 80008ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008be:	ee17 2a90 	vmov	r2, s15
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
					TIM4->CCR2 = ((float) (mPaketas[3] | (mPaketas[4] << 8))
 80008c4:	4b33      	ldr	r3, [pc, #204]	; (8000994 <main+0x218>)
 80008c6:	78db      	ldrb	r3, [r3, #3]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b32      	ldr	r3, [pc, #200]	; (8000994 <main+0x218>)
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	4313      	orrs	r3, r2
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* minStepCycles / maxSiunciamaReiksme
 80008da:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80009a8 <main+0x22c>
 80008de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008e2:	eddf 6a31 	vldr	s13, [pc, #196]	; 80009a8 <main+0x22c>
 80008e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
							+ minStepCycles);
 80008ea:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80009a8 <main+0x22c>
 80008ee:	ee77 7a87 	vadd.f32	s15, s15, s14
					TIM4->CCR2 = ((float) (mPaketas[3] | (mPaketas[4] << 8))
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <main+0x230>)
 80008f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f8:	ee17 2a90 	vmov	r2, s15
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
					TIM4->CCR3 = ((float) (mPaketas[5] | (mPaketas[6] << 8))
 80008fe:	4b25      	ldr	r3, [pc, #148]	; (8000994 <main+0x218>)
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	461a      	mov	r2, r3
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <main+0x218>)
 8000906:	799b      	ldrb	r3, [r3, #6]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	4313      	orrs	r3, r2
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* minStepCycles / maxSiunciamaReiksme
 8000914:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80009a8 <main+0x22c>
 8000918:	ee27 7a87 	vmul.f32	s14, s15, s14
 800091c:	eddf 6a22 	vldr	s13, [pc, #136]	; 80009a8 <main+0x22c>
 8000920:	eec7 7a26 	vdiv.f32	s15, s14, s13
							+ minStepCycles);
 8000924:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80009a8 <main+0x22c>
 8000928:	ee77 7a87 	vadd.f32	s15, s15, s14
					TIM4->CCR3 = ((float) (mPaketas[5] | (mPaketas[6] << 8))
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <main+0x230>)
 800092e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000932:	ee17 2a90 	vmov	r2, s15
 8000936:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM4->CCR4 = ((float) (mPaketas[7] | (mPaketas[8] << 8))
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <main+0x218>)
 800093a:	79db      	ldrb	r3, [r3, #7]
 800093c:	461a      	mov	r2, r3
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <main+0x218>)
 8000940:	7a1b      	ldrb	r3, [r3, #8]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	4313      	orrs	r3, r2
 8000946:	ee07 3a90 	vmov	s15, r3
 800094a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* minStepCycles / maxSiunciamaReiksme
 800094e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80009a8 <main+0x22c>
 8000952:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000956:	eddf 6a14 	vldr	s13, [pc, #80]	; 80009a8 <main+0x22c>
 800095a:	eec7 7a26 	vdiv.f32	s15, s14, s13
							+ minStepCycles);
 800095e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80009a8 <main+0x22c>
 8000962:	ee77 7a87 	vadd.f32	s15, s15, s14
					TIM4->CCR4 = ((float) (mPaketas[7] | (mPaketas[8] << 8))
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <main+0x230>)
 8000968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800096c:	ee17 2a90 	vmov	r2, s15
 8000970:	641a      	str	r2, [r3, #64]	; 0x40
 8000972:	e758      	b.n	8000826 <main+0xaa>
				} else {
					HAL_UART_DMAStop(&huart4);
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <main+0x21c>)
 8000976:	f005 fd4b 	bl	8006410 <HAL_UART_DMAStop>
					HAL_UART_Receive_DMA(&huart4, mPaketas, 10);
 800097a:	220a      	movs	r2, #10
 800097c:	4905      	ldr	r1, [pc, #20]	; (8000994 <main+0x218>)
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <main+0x21c>)
 8000980:	f005 fcc6 	bl	8006310 <HAL_UART_Receive_DMA>
		if (mFlags.accDataReady) {
 8000984:	e74f      	b.n	8000826 <main+0xaa>
 8000986:	bf00      	nop
 8000988:	20000154 	.word	0x20000154
 800098c:	20000208 	.word	0x20000208
 8000990:	200002a4 	.word	0x200002a4
 8000994:	20000088 	.word	0x20000088
 8000998:	20000264 	.word	0x20000264
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000248 	.word	0x20000248
 80009a4:	40002000 	.word	0x40002000
 80009a8:	43fa0000 	.word	0x43fa0000
 80009ac:	40000800 	.word	0x40000800

080009b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b094      	sub	sp, #80	; 0x50
 80009b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2234      	movs	r2, #52	; 0x34
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f006 fa01 	bl	8006dc6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <SystemClock_Config+0xd4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <SystemClock_Config+0xd4>)
 80009de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <SystemClock_Config+0xd4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemClock_Config+0xd8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009fc:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <SystemClock_Config+0xd8>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <SystemClock_Config+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a24:	2308      	movs	r3, #8
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 8000a28:	2340      	movs	r3, #64	; 0x40
 8000a2a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fa8b 	bl	8004f58 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x9c>
		Error_Handler();
 8000a48:	f000 fa58 	bl	8000efc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a50:	2302      	movs	r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 f808 	bl	8004a80 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xca>
		Error_Handler();
 8000a76:	f000 fa41 	bl	8000efc <Error_Handler>
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3750      	adds	r7, #80	; 0x50
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C3_Init+0x50>)
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_I2C3_Init+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 400000;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_I2C3_Init+0x50>)
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_I2C3_Init+0x58>)
 8000a9a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C3_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_I2C3_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_I2C3_Init+0x50>)
 8000aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aae:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_I2C3_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_I2C3_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <MX_I2C3_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_I2C3_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_I2C3_Init+0x50>)
 8000aca:	f001 fc4f 	bl	800236c <HAL_I2C_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000ad4:	f000 fa12 	bl	8000efc <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000154 	.word	0x20000154
 8000ae0:	40005c00 	.word	0x40005c00
 8000ae4:	00061a80 	.word	0x00061a80

08000ae8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000afc:	f107 0320 	add.w	r3, r7, #32
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000b18:	4b3d      	ldr	r3, [pc, #244]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b1a:	4a3e      	ldr	r2, [pc, #248]	; (8000c14 <MX_TIM4_Init+0x12c>)
 8000b1c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 128 - 1;
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b20:	227f      	movs	r2, #127	; 0x7f
 8000b22:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000 - 1;
 8000b2a:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b30:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b38:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000b3e:	4834      	ldr	r0, [pc, #208]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b40:	f004 fc64 	bl	800540c <HAL_TIM_Base_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM4_Init+0x66>
		Error_Handler();
 8000b4a:	f000 f9d7 	bl	8000efc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	482d      	ldr	r0, [pc, #180]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b5c:	f004 ff0a 	bl	8005974 <HAL_TIM_ConfigClockSource>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM4_Init+0x82>
		Error_Handler();
 8000b66:	f000 f9c9 	bl	8000efc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000b6a:	4829      	ldr	r0, [pc, #164]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b6c:	f004 fcc1 	bl	80054f2 <HAL_TIM_PWM_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0x92>
		Error_Handler();
 8000b76:	f000 f9c1 	bl	8000efc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000b82:	f107 0320 	add.w	r3, r7, #32
 8000b86:	4619      	mov	r1, r3
 8000b88:	4821      	ldr	r0, [pc, #132]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000b8a:	f005 fae3 	bl	8006154 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000b94:	f000 f9b2 	bl	8000efc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b98:	2360      	movs	r3, #96	; 0x60
 8000b9a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500 - 1;
 8000b9c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000ba0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000bb2:	f004 fe19 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM4_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000bbc:	f000 f99e 	bl	8000efc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000bc8:	f004 fe0e 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM4_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8000bd2:	f000 f993 	bl	8000efc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2208      	movs	r2, #8
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000bde:	f004 fe03 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM4_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8000be8:	f000 f988 	bl	8000efc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	220c      	movs	r2, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4807      	ldr	r0, [pc, #28]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000bf4:	f004 fdf8 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM4_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 8000bfe:	f000 f97d 	bl	8000efc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <MX_TIM4_Init+0x128>)
 8000c04:	f000 fac6 	bl	8001194 <HAL_TIM_MspPostInit>

}
 8000c08:	bf00      	nop
 8000c0a:	3738      	adds	r7, #56	; 0x38
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000208 	.word	0x20000208
 8000c14:	40000800 	.word	0x40000800

08000c18 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <MX_TIM14_Init+0x44>)
 8000c20:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 12800;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c24:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000c28:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 10 * 100;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c36:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c46:	f004 fbe1 	bl	800540c <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM14_Init+0x3c>
		Error_Handler();
 8000c50:	f000 f954 	bl	8000efc <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200002a4 	.word	0x200002a4
 8000c5c:	40002000 	.word	0x40002000

08000c60 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_UART4_Init+0x48>)
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <MX_UART4_Init+0x4c>)
 8000c68:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 2000000;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_UART4_Init+0x48>)
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <MX_UART4_Init+0x50>)
 8000c6e:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <MX_UART4_Init+0x48>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_UART4_Init+0x48>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <MX_UART4_Init+0x48>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_UART4_Init+0x48>)
 8000c84:	220c      	movs	r2, #12
 8000c86:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_UART4_Init+0x48>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_UART4_Init+0x48>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_UART4_Init+0x48>)
 8000c96:	f005 faed 	bl	8006274 <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_UART4_Init+0x44>
		Error_Handler();
 8000ca0:	f000 f92c 	bl	8000efc <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000264 	.word	0x20000264
 8000cac:	40004c00 	.word	0x40004c00
 8000cb0:	001e8480 	.word	0x001e8480

08000cb4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_DMA_Init+0x5c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <MX_DMA_Init+0x5c>)
 8000cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_DMA_Init+0x5c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	200c      	movs	r0, #12
 8000cdc:	f000 fd31 	bl	8001742 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ce0:	200c      	movs	r0, #12
 8000ce2:	f000 fd4a 	bl	800177a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	200d      	movs	r0, #13
 8000cec:	f000 fd29 	bl	8001742 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cf0:	200d      	movs	r0, #13
 8000cf2:	f000 fd42 	bl	800177a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 fd21 	bl	8001742 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d00:	200f      	movs	r0, #15
 8000d02:	f000 fd3a 	bl	800177a <HAL_NVIC_EnableIRQ>

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2120      	movs	r1, #32
 8000d82:	4816      	ldr	r0, [pc, #88]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d84:	f001 fac0 	bl	8002308 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : led_Pin */
	GPIO_InitStruct.Pin = led_Pin;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480f      	ldr	r0, [pc, #60]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000da0:	f001 f920 	bl	8001fe4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <MX_GPIO_Init+0xcc>)
 8000dac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dae:	2302      	movs	r3, #2
 8000db0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000dba:	f001 f913 	bl	8001fe4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2028      	movs	r0, #40	; 0x28
 8000dc4:	f000 fcbd 	bl	8001742 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc8:	2028      	movs	r0, #40	; 0x28
 8000dca:	f000 fcd6 	bl	800177a <HAL_NVIC_EnableIRQ>

}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	10110000 	.word	0x10110000

08000de4 <getCRC>:

/* USER CODE BEGIN 4 */
uint8_t getCRC(uint8_t *message, uint8_t length) {
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < length; i++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	73bb      	strb	r3, [r7, #14]
 8000df8:	e01f      	b.n	8000e3a <getCRC+0x56>
		crc ^= *(message + i);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	4053      	eors	r3, r2
 8000e06:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	737b      	strb	r3, [r7, #13]
 8000e0c:	e00f      	b.n	8000e2e <getCRC+0x4a>
			if (crc & 1)
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d004      	beq.n	8000e22 <getCRC+0x3e>
				crc ^= 0x91; //CRC7_POLY = 0x91
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	f083 036e 	eor.w	r3, r3, #110	; 0x6e
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	73fb      	strb	r3, [r7, #15]
			crc >>= 1;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	085b      	lsrs	r3, r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8000e28:	7b7b      	ldrb	r3, [r7, #13]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	737b      	strb	r3, [r7, #13]
 8000e2e:	7b7b      	ldrb	r3, [r7, #13]
 8000e30:	2b07      	cmp	r3, #7
 8000e32:	d9ec      	bls.n	8000e0e <getCRC+0x2a>
	for (uint8_t i = 0; i < length; i++) {
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	3301      	adds	r3, #1
 8000e38:	73bb      	strb	r3, [r7, #14]
 8000e3a:	7bba      	ldrb	r2, [r7, #14]
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d3db      	bcc.n	8000dfa <getCRC+0x16>
		}
	}
	return crc;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d117      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x42>
		HAL_UART_DMAStop(&huart4);
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e64:	f005 fad4 	bl	8006410 <HAL_UART_DMAStop>
		HAL_UART_Receive_DMA(&huart4, mPaketas, 10);
 8000e68:	220a      	movs	r2, #10
 8000e6a:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e6e:	f005 fa4f 	bl	8006310 <HAL_UART_Receive_DMA>

		TIM4->CCR1 = minStepCycles;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e78:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = minStepCycles;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = minStepCycles;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = minStepCycles;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40002000 	.word	0x40002000
 8000ea0:	20000264 	.word	0x20000264
 8000ea4:	20000088 	.word	0x20000088
 8000ea8:	40000800 	.word	0x40000800

08000eac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	mFlags.dataUart = 1;
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <HAL_UART_RxCpltCallback+0x20>)
 8000eb6:	7813      	ldrb	r3, [r2, #0]
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	7013      	strb	r3, [r2, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee0:	d104      	bne.n	8000eec <HAL_GPIO_EXTI_Callback+0x1c>
		mFlags.accDataReady = 1;
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ee4:	7813      	ldrb	r3, [r2, #0]
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	7013      	strb	r3, [r2, #0]
	}
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	20000000 	.word	0x20000000

08000efc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a5f      	ldr	r2, [pc, #380]	; (80010f8 <HAL_I2C_MspInit+0x19c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	f040 80b7 	bne.w	80010ee <HAL_I2C_MspInit+0x192>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	4b5d      	ldr	r3, [pc, #372]	; (80010fc <HAL_I2C_MspInit+0x1a0>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a5c      	ldr	r2, [pc, #368]	; (80010fc <HAL_I2C_MspInit+0x1a0>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b5a      	ldr	r3, [pc, #360]	; (80010fc <HAL_I2C_MspInit+0x1a0>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	4b56      	ldr	r3, [pc, #344]	; (80010fc <HAL_I2C_MspInit+0x1a0>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a55      	ldr	r2, [pc, #340]	; (80010fc <HAL_I2C_MspInit+0x1a0>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_I2C_MspInit+0x1a0>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbe:	2312      	movs	r3, #18
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	484a      	ldr	r0, [pc, #296]	; (8001100 <HAL_I2C_MspInit+0x1a4>)
 8000fd6:	f001 f805 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fde:	2312      	movs	r3, #18
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fea:	2304      	movs	r3, #4
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4843      	ldr	r0, [pc, #268]	; (8001104 <HAL_I2C_MspInit+0x1a8>)
 8000ff6:	f000 fff5 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <HAL_I2C_MspInit+0x1a0>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <HAL_I2C_MspInit+0x1a0>)
 8001004:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <HAL_I2C_MspInit+0x1a0>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 8001018:	4a3c      	ldr	r2, [pc, #240]	; (800110c <HAL_I2C_MspInit+0x1b0>)
 800101a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 800101e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001022:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 8001032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001036:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001038:	4b33      	ldr	r3, [pc, #204]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001044:	4b30      	ldr	r3, [pc, #192]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800104a:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001056:	482c      	ldr	r0, [pc, #176]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 8001058:	f000 fbaa 	bl	80017b0 <HAL_DMA_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_I2C_MspInit+0x10a>
    {
      Error_Handler();
 8001062:	f7ff ff4b 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 800106a:	639a      	str	r2, [r3, #56]	; 0x38
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <HAL_I2C_MspInit+0x1ac>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <HAL_I2C_MspInit+0x1b8>)
 8001076:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 800107a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800107e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 8001082:	2240      	movs	r2, #64	; 0x40
 8001084:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 800108e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001092:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 80010b4:	f000 fb7c 	bl	80017b0 <HAL_DMA_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_MspInit+0x166>
    {
      Error_Handler();
 80010be:	f7ff ff1d 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <HAL_I2C_MspInit+0x1b4>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2048      	movs	r0, #72	; 0x48
 80010d4:	f000 fb35 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80010d8:	2048      	movs	r0, #72	; 0x48
 80010da:	f000 fb4e 	bl	800177a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2049      	movs	r0, #73	; 0x49
 80010e4:	f000 fb2d 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80010e8:	2049      	movs	r0, #73	; 0x49
 80010ea:	f000 fb46 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40005c00 	.word	0x40005c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020400 	.word	0x40020400
 8001108:	200001a8 	.word	0x200001a8
 800110c:	40026028 	.word	0x40026028
 8001110:	20000094 	.word	0x20000094
 8001114:	40026070 	.word	0x40026070

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_TIM_Base_MspInit+0x70>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10e      	bne.n	8001148 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001146:	e01a      	b.n	800117e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_TIM_Base_MspInit+0x78>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d115      	bne.n	800117e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	202d      	movs	r0, #45	; 0x2d
 8001174:	f000 fae5 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001178:	202d      	movs	r0, #45	; 0x2d
 800117a:	f000 fafe 	bl	800177a <HAL_NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40000800 	.word	0x40000800
 800118c:	40023800 	.word	0x40023800
 8001190:	40002000 	.word	0x40002000

08001194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <HAL_TIM_MspPostInit+0x68>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d11e      	bne.n	80011f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_TIM_MspPostInit+0x70>)
 80011f0:	f000 fef8 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40000800 	.word	0x40000800
 8001200:	40023800 	.word	0x40023800
 8001204:	40020400 	.word	0x40020400

08001208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a31      	ldr	r2, [pc, #196]	; (80012ec <HAL_UART_MspInit+0xe4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d15c      	bne.n	80012e4 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_UART_MspInit+0xe8>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a2f      	ldr	r2, [pc, #188]	; (80012f0 <HAL_UART_MspInit+0xe8>)
 8001234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_UART_MspInit+0xe8>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_UART_MspInit+0xe8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <HAL_UART_MspInit+0xe8>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_UART_MspInit+0xe8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001262:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126c:	2301      	movs	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001274:	2308      	movs	r3, #8
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	481d      	ldr	r0, [pc, #116]	; (80012f4 <HAL_UART_MspInit+0xec>)
 8001280:	f000 feb0 	bl	8001fe4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_UART_MspInit+0xf4>)
 8001288:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 800128c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001290:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 80012a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 80012b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 80012bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012c0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 80012ca:	f000 fa71 	bl	80017b0 <HAL_DMA_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80012d4:	f7ff fe12 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_UART_MspInit+0xf0>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3728      	adds	r7, #40	; 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40004c00 	.word	0x40004c00
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020800 	.word	0x40020800
 80012f8:	200000f4 	.word	0x200000f4
 80012fc:	40026040 	.word	0x40026040

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 f8d8 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <DMA1_Stream1_IRQHandler+0x10>)
 8001362:	f000 fbbd 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001a8 	.word	0x200001a8

08001370 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <DMA1_Stream2_IRQHandler+0x10>)
 8001376:	f000 fbb3 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000f4 	.word	0x200000f4

08001384 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <DMA1_Stream4_IRQHandler+0x10>)
 800138a:	f000 fba9 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000094 	.word	0x20000094

08001398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800139c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013a0:	f000 ffcc 	bl	800233c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80013ae:	f004 f913 	bl	80055d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200002a4 	.word	0x200002a4

080013bc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <I2C3_EV_IRQHandler+0x10>)
 80013c2:	f001 fb55 	bl	8002a70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000154 	.word	0x20000154

080013d0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <I2C3_ER_IRQHandler+0x10>)
 80013d6:	f001 fcb1 	bl	8002d3c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000154 	.word	0x20000154

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <SystemInit+0x28>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a07      	ldr	r2, [pc, #28]	; (800140c <SystemInit+0x28>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <SystemInit+0x28>)
 80013fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001414:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001416:	e003      	b.n	8001420 <LoopCopyDataInit>

08001418 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800141a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800141c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800141e:	3104      	adds	r1, #4

08001420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001424:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001426:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001428:	d3f6      	bcc.n	8001418 <CopyDataInit>
  ldr  r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800142c:	e002      	b.n	8001434 <LoopFillZerobss>

0800142e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800142e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001430:	f842 3b04 	str.w	r3, [r2], #4

08001434 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001436:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001438:	d3f9      	bcc.n	800142e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800143a:	f7ff ffd3 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f005 fc93 	bl	8006d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff f99b 	bl	800077c <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800144c:	08006e20 	.word	0x08006e20
  ldr  r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001454:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001458:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800145c:	200002f0 	.word	0x200002f0

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f94d 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fd38 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f965 	bl	8001796 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f92d 	bl	8001742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000004 	.word	0x20000004
 8001500:	2000000c 	.word	0x2000000c
 8001504:	20000008 	.word	0x20000008

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000000c 	.word	0x2000000c
 800152c:	200002ec 	.word	0x200002ec

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200002ec 	.word	0x200002ec

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_Delay+0x40>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000000c 	.word	0x2000000c

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <__NVIC_EnableIRQ+0x38>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f7ff ff8e 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff29 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff3e 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff8e 	bl	8001680 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5d 	bl	800162c <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff31 	bl	80015f0 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffa2 	bl	80016e8 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff feb8 	bl	8001530 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e099      	b.n	8001900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ec:	e00f      	b.n	800180e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ee:	f7ff fe9f 	bl	8001530 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d908      	bls.n	800180e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2203      	movs	r2, #3
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e078      	b.n	8001900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e8      	bne.n	80017ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <HAL_DMA_Init+0x158>)
 8001828:	4013      	ands	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800183a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	2b04      	cmp	r3, #4
 8001866:	d107      	bne.n	8001878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	4313      	orrs	r3, r2
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f023 0307 	bic.w	r3, r3, #7
 800188e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4313      	orrs	r3, r2
 8001898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d117      	bne.n	80018d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00e      	beq.n	80018d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fb1b 	bl	8001ef0 <DMA_CheckFifoParam>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018ce:	2301      	movs	r3, #1
 80018d0:	e016      	b.n	8001900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fad2 	bl	8001e84 <DMA_CalcBaseAndBitshift>
 80018e0:	4603      	mov	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	223f      	movs	r2, #63	; 0x3f
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	f010803f 	.word	0xf010803f

0800190c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_DMA_Start_IT+0x26>
 800192e:	2302      	movs	r3, #2
 8001930:	e040      	b.n	80019b4 <HAL_DMA_Start_IT+0xa8>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d12f      	bne.n	80019a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2202      	movs	r2, #2
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fa64 	bl	8001e28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	223f      	movs	r2, #63	; 0x3f
 8001966:	409a      	lsls	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0216 	orr.w	r2, r2, #22
 800197a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0208 	orr.w	r2, r2, #8
 8001992:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e005      	b.n	80019b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ae:	2302      	movs	r3, #2
 80019b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019ca:	f7ff fdb1 	bl	8001530 <HAL_GetTick>
 80019ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d008      	beq.n	80019ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e052      	b.n	8001a94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0216 	bic.w	r2, r2, #22
 80019fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d103      	bne.n	8001a1e <HAL_DMA_Abort+0x62>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0208 	bic.w	r2, r2, #8
 8001a2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3e:	e013      	b.n	8001a68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a40:	f7ff fd76 	bl	8001530 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d90c      	bls.n	8001a68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2220      	movs	r2, #32
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2203      	movs	r2, #3
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e015      	b.n	8001a94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1e4      	bne.n	8001a40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	223f      	movs	r2, #63	; 0x3f
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d004      	beq.n	8001aba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00c      	b.n	8001ad4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2205      	movs	r2, #5
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aec:	4b92      	ldr	r3, [pc, #584]	; (8001d38 <HAL_DMA_IRQHandler+0x258>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a92      	ldr	r2, [pc, #584]	; (8001d3c <HAL_DMA_IRQHandler+0x25c>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0a9b      	lsrs	r3, r3, #10
 8001af8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01a      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0204 	bic.w	r2, r2, #4
 8001b32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	2208      	movs	r2, #8
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2201      	movs	r2, #1
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d012      	beq.n	8001b82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	409a      	lsls	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f043 0202 	orr.w	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b86:	2204      	movs	r2, #4
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d012      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00b      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	f043 0204 	orr.w	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d043      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d03c      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bda:	2210      	movs	r2, #16
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d018      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d024      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	4798      	blx	r3
 8001c0e:	e01f      	b.n	8001c50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01b      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
 8001c20:	e016      	b.n	8001c50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0208 	bic.w	r2, r2, #8
 8001c3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	2220      	movs	r2, #32
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 808e 	beq.w	8001d7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8086 	beq.w	8001d7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	2220      	movs	r2, #32
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d136      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0216 	bic.w	r2, r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_DMA_IRQHandler+0x1da>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0208 	bic.w	r2, r2, #8
 8001cc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	223f      	movs	r2, #63	; 0x3f
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d07d      	beq.n	8001dea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
        }
        return;
 8001cf6:	e078      	b.n	8001dea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01c      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d108      	bne.n	8001d26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d030      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
 8001d24:	e02b      	b.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d027      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
 8001d36:	e022      	b.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0210 	bic.w	r2, r2, #16
 8001d5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d032      	beq.n	8001dec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d022      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2205      	movs	r2, #5
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3301      	adds	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d307      	bcc.n	8001dc6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f2      	bne.n	8001daa <HAL_DMA_IRQHandler+0x2ca>
 8001dc4:	e000      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dc6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e000      	b.n	8001dec <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dea:	bf00      	nop
    }
  }
}
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop

08001df4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e02:	b2db      	uxtb	r3, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b40      	cmp	r3, #64	; 0x40
 8001e54:	d108      	bne.n	8001e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e66:	e007      	b.n	8001e78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3b10      	subs	r3, #16
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <DMA_CalcBaseAndBitshift+0x64>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e9e:	4a13      	ldr	r2, [pc, #76]	; (8001eec <DMA_CalcBaseAndBitshift+0x68>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d909      	bls.n	8001ec6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eba:	f023 0303 	bic.w	r3, r3, #3
 8001ebe:	1d1a      	adds	r2, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ec4:	e007      	b.n	8001ed6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ece:	f023 0303 	bic.w	r3, r3, #3
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	aaaaaaab 	.word	0xaaaaaaab
 8001eec:	08006e08 	.word	0x08006e08

08001ef0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d11f      	bne.n	8001f4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d855      	bhi.n	8001fbc <DMA_CheckFifoParam+0xcc>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <DMA_CheckFifoParam+0x28>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	08001f3b 	.word	0x08001f3b
 8001f20:	08001f29 	.word	0x08001f29
 8001f24:	08001fbd 	.word	0x08001fbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d045      	beq.n	8001fc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f38:	e042      	b.n	8001fc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f42:	d13f      	bne.n	8001fc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f48:	e03c      	b.n	8001fc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f52:	d121      	bne.n	8001f98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d836      	bhi.n	8001fc8 <DMA_CheckFifoParam+0xd8>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <DMA_CheckFifoParam+0x70>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f77 	.word	0x08001f77
 8001f68:	08001f71 	.word	0x08001f71
 8001f6c:	08001f89 	.word	0x08001f89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
      break;
 8001f74:	e02f      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d024      	beq.n	8001fcc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f86:	e021      	b.n	8001fcc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f90:	d11e      	bne.n	8001fd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f96:	e01b      	b.n	8001fd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d902      	bls.n	8001fa4 <DMA_CheckFifoParam+0xb4>
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d003      	beq.n	8001faa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fa2:	e018      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa8:	e015      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00e      	beq.n	8001fd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001fba:	e00b      	b.n	8001fd4 <DMA_CheckFifoParam+0xe4>
      break;
 8001fbc:	bf00      	nop
 8001fbe:	e00a      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fc0:	bf00      	nop
 8001fc2:	e008      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fc4:	bf00      	nop
 8001fc6:	e006      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fc8:	bf00      	nop
 8001fca:	e004      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fcc:	bf00      	nop
 8001fce:	e002      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001fd0:	bf00      	nop
 8001fd2:	e000      	b.n	8001fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fd4:	bf00      	nop
    }
  } 
  
  return status; 
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e165      	b.n	80022cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8154 	bne.w	80022c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d00b      	beq.n	800203e <HAL_GPIO_Init+0x5a>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002032:	2b11      	cmp	r3, #17
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b12      	cmp	r3, #18
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0xfc>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b12      	cmp	r3, #18
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80ae 	beq.w	80022c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_GPIO_Init+0x2fc>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a5b      	ldr	r2, [pc, #364]	; (80022e0 <HAL_GPIO_Init+0x2fc>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b59      	ldr	r3, [pc, #356]	; (80022e0 <HAL_GPIO_Init+0x2fc>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002186:	4a57      	ldr	r2, [pc, #348]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4e      	ldr	r2, [pc, #312]	; (80022e8 <HAL_GPIO_Init+0x304>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x21a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4d      	ldr	r2, [pc, #308]	; (80022ec <HAL_GPIO_Init+0x308>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x216>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4c      	ldr	r2, [pc, #304]	; (80022f0 <HAL_GPIO_Init+0x30c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x212>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4b      	ldr	r2, [pc, #300]	; (80022f4 <HAL_GPIO_Init+0x310>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x20e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4a      	ldr	r2, [pc, #296]	; (80022f8 <HAL_GPIO_Init+0x314>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x20a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_GPIO_Init+0x318>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x206>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a48      	ldr	r2, [pc, #288]	; (8002300 <HAL_GPIO_Init+0x31c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x202>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002210:	4934      	ldr	r1, [pc, #208]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_GPIO_Init+0x320>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002242:	4a30      	ldr	r2, [pc, #192]	; (8002304 <HAL_GPIO_Init+0x320>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_GPIO_Init+0x320>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <HAL_GPIO_Init+0x320>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_GPIO_Init+0x320>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <HAL_GPIO_Init+0x320>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_GPIO_Init+0x320>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_GPIO_Init+0x320>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae96 	bls.w	8002000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	3724      	adds	r7, #36	; 0x24
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40021400 	.word	0x40021400
 8002300:	40021800 	.word	0x40021800
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fdb8 	bl	8000ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40013c00 	.word	0x40013c00

0800236c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e11f      	b.n	80025be <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fde2 	bl	8000f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2224      	movs	r2, #36	; 0x24
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d0:	f002 fc48 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 80023d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a7b      	ldr	r2, [pc, #492]	; (80025c8 <HAL_I2C_Init+0x25c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d807      	bhi.n	80023f0 <HAL_I2C_Init+0x84>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a7a      	ldr	r2, [pc, #488]	; (80025cc <HAL_I2C_Init+0x260>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	bf94      	ite	ls
 80023e8:	2301      	movls	r3, #1
 80023ea:	2300      	movhi	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e006      	b.n	80023fe <HAL_I2C_Init+0x92>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a77      	ldr	r2, [pc, #476]	; (80025d0 <HAL_I2C_Init+0x264>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bf94      	ite	ls
 80023f8:	2301      	movls	r3, #1
 80023fa:	2300      	movhi	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0db      	b.n	80025be <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a72      	ldr	r2, [pc, #456]	; (80025d4 <HAL_I2C_Init+0x268>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9b      	lsrs	r3, r3, #18
 8002410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a64      	ldr	r2, [pc, #400]	; (80025c8 <HAL_I2C_Init+0x25c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d802      	bhi.n	8002440 <HAL_I2C_Init+0xd4>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3301      	adds	r3, #1
 800243e:	e009      	b.n	8002454 <HAL_I2C_Init+0xe8>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	4a63      	ldr	r2, [pc, #396]	; (80025d8 <HAL_I2C_Init+0x26c>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	3301      	adds	r3, #1
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	430b      	orrs	r3, r1
 800245a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4956      	ldr	r1, [pc, #344]	; (80025c8 <HAL_I2C_Init+0x25c>)
 8002470:	428b      	cmp	r3, r1
 8002472:	d80d      	bhi.n	8002490 <HAL_I2C_Init+0x124>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e59      	subs	r1, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002482:	3301      	adds	r3, #1
 8002484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002488:	2b04      	cmp	r3, #4
 800248a:	bf38      	it	cc
 800248c:	2304      	movcc	r3, #4
 800248e:	e04f      	b.n	8002530 <HAL_I2C_Init+0x1c4>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_I2C_Init+0x150>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	440b      	add	r3, r1
 80024a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e012      	b.n	80024e2 <HAL_I2C_Init+0x176>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	0099      	lsls	r1, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Init+0x17e>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e022      	b.n	8002530 <HAL_I2C_Init+0x1c4>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10e      	bne.n	8002510 <HAL_I2C_Init+0x1a4>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1e58      	subs	r0, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	440b      	add	r3, r1
 8002500:	fbb0 f3f3 	udiv	r3, r0, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Init+0x1c4>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e58      	subs	r0, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	0099      	lsls	r1, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	fbb0 f3f3 	udiv	r3, r0, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	4313      	orrs	r3, r2
 8002536:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800255e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6911      	ldr	r1, [r2, #16]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68d2      	ldr	r2, [r2, #12]
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	000186a0 	.word	0x000186a0
 80025cc:	001e847f 	.word	0x001e847f
 80025d0:	003d08ff 	.word	0x003d08ff
 80025d4:	431bde83 	.word	0x431bde83
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	461a      	mov	r2, r3
 80025e8:	460b      	mov	r3, r1
 80025ea:	817b      	strh	r3, [r7, #10]
 80025ec:	4613      	mov	r3, r2
 80025ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7fe ff9e 	bl	8001530 <HAL_GetTick>
 80025f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b20      	cmp	r3, #32
 8002600:	f040 80e0 	bne.w	80027c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2319      	movs	r3, #25
 800260a:	2201      	movs	r2, #1
 800260c:	4970      	ldr	r1, [pc, #448]	; (80027d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f002 f893 	bl	800473a <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	e0d3      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_I2C_Master_Transmit+0x50>
 8002628:	2302      	movs	r3, #2
 800262a:	e0cc      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d007      	beq.n	8002652 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002660:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2221      	movs	r2, #33	; 0x21
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2210      	movs	r2, #16
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	893a      	ldrh	r2, [r7, #8]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4a50      	ldr	r2, [pc, #320]	; (80027d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002694:	8979      	ldrh	r1, [r7, #10]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f001 fd54 	bl	8004148 <I2C_MasterRequestWrite>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e08d      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026c0:	e066      	b.n	8002790 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	6a39      	ldr	r1, [r7, #32]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f002 f90d 	bl	80048e6 <I2C_WaitOnTXEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06b      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_I2C_Master_Transmit+0x188>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d017      	beq.n	8002764 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	6a39      	ldr	r1, [r7, #32]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f002 f8fd 	bl	8004968 <I2C_WaitOnBTFFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00d      	beq.n	8002790 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b04      	cmp	r3, #4
 800277a:	d107      	bne.n	800278c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e01a      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d194      	bne.n	80026c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	00100002 	.word	0x00100002
 80027d4:	ffff0000 	.word	0xffff0000

080027d8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	460b      	mov	r3, r1
 80027ec:	813b      	strh	r3, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f2:	f7fe fe9d 	bl	8001530 <HAL_GetTick>
 80027f6:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	f040 8123 	bne.w	8002a50 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800280a:	4b94      	ldr	r3, [pc, #592]	; (8002a5c <HAL_I2C_Mem_Read_DMA+0x284>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	08db      	lsrs	r3, r3, #3
 8002810:	4a93      	ldr	r2, [pc, #588]	; (8002a60 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0a1a      	lsrs	r2, r3, #8
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009a      	lsls	r2, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3b01      	subs	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d116      	bne.n	800285e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e0f9      	b.n	8002a52 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	d0db      	beq.n	8002824 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_I2C_Mem_Read_DMA+0xa2>
 8002876:	2302      	movs	r3, #2
 8002878:	e0eb      	b.n	8002a52 <HAL_I2C_Mem_Read_DMA+0x27a>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d007      	beq.n	80028a0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2222      	movs	r2, #34	; 0x22
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2240      	movs	r2, #64	; 0x40
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a61      	ldr	r2, [pc, #388]	; (8002a64 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8085 	beq.w	80029f6 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	4a5d      	ldr	r2, [pc, #372]	; (8002a68 <HAL_I2C_Mem_Read_DMA+0x290>)
 80028f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	4a5c      	ldr	r2, [pc, #368]	; (8002a6c <HAL_I2C_Mem_Read_DMA+0x294>)
 80028fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	2200      	movs	r2, #0
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	2200      	movs	r2, #0
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	2200      	movs	r2, #0
 8002912:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	2200      	movs	r2, #0
 800291a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3310      	adds	r3, #16
 8002926:	4619      	mov	r1, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	461a      	mov	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002932:	f7fe ffeb 	bl	800190c <HAL_DMA_Start_IT>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 800293c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002940:	2b00      	cmp	r3, #0
 8002942:	d144      	bne.n	80029ce <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002944:	88f8      	ldrh	r0, [r7, #6]
 8002946:	893a      	ldrh	r2, [r7, #8]
 8002948:	8979      	ldrh	r1, [r7, #10]
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2323      	movs	r3, #35	; 0x23
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4603      	mov	r3, r0
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f001 fc79 	bl	800424c <I2C_RequestMemoryRead>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e076      	b.n	8002a52 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	2b01      	cmp	r3, #1
 800296a:	d108      	bne.n	800297e <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e007      	b.n	800298e <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800298c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ba:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	e03e      	b.n	8002a4c <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e02d      	b.n	8002a52 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80029f6:	88f8      	ldrh	r0, [r7, #6]
 80029f8:	893a      	ldrh	r2, [r7, #8]
 80029fa:	8979      	ldrh	r1, [r7, #10]
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	2323      	movs	r3, #35	; 0x23
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	4603      	mov	r3, r0
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f001 fc20 	bl	800424c <I2C_RequestMemoryRead>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01d      	b.n	8002a52 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3a:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000004 	.word	0x20000004
 8002a60:	14f8b589 	.word	0x14f8b589
 8002a64:	ffff0000 	.word	0xffff0000
 8002a68:	08004419 	.word	0x08004419
 8002a6c:	080045c3 	.word	0x080045c3

08002a70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d003      	beq.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x38>
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b40      	cmp	r3, #64	; 0x40
 8002aa4:	f040 80b6 	bne.w	8002c14 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_I2C_EV_IRQHandler+0x6e>
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ac8:	d003      	beq.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x62>
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x66>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x68>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	f000 8127 	beq.w	8002d2c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00c      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x92>
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	0a5b      	lsrs	r3, r3, #9
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f001 ffa7 	bl	8004a48 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fd12 	bl	8003524 <I2C_Master_SB>
 8002b00:	e087      	b.n	8002c12 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0xb2>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	0a5b      	lsrs	r3, r3, #9
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fd88 	bl	8003630 <I2C_Master_ADD10>
 8002b20:	e077      	b.n	8002c12 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0xd2>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	0a5b      	lsrs	r3, r3, #9
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fda2 	bl	8003684 <I2C_Master_ADDR>
 8002b40:	e067      	b.n	8002c12 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d030      	beq.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5c:	f000 80e8 	beq.w	8002d30 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	09db      	lsrs	r3, r3, #7
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00f      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x11c>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	0a9b      	lsrs	r3, r3, #10
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x11c>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f9de 	bl	8002f46 <I2C_MasterTransmit_TXE>
 8002b8a:	e042      	b.n	8002c12 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80cb 	beq.w	8002d30 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	0a5b      	lsrs	r3, r3, #9
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80c4 	beq.w	8002d30 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fa68 	bl	800307e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bae:	e0bf      	b.n	8002d30 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bbe:	f000 80b7 	beq.w	8002d30 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00f      	beq.n	8002bee <HAL_I2C_EV_IRQHandler+0x17e>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	0a9b      	lsrs	r3, r3, #10
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_I2C_EV_IRQHandler+0x17e>
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fb30 	bl	800324c <I2C_MasterReceive_RXNE>
 8002bec:	e011      	b.n	8002c12 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 809a 	beq.w	8002d30 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	0a5b      	lsrs	r3, r3, #9
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8093 	beq.w	8002d30 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fba0 	bl	8003350 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c10:	e08e      	b.n	8002d30 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002c12:	e08d      	b.n	8002d30 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	e007      	b.n	8002c36 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d012      	beq.n	8002c68 <HAL_I2C_EV_IRQHandler+0x1f8>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	0a5b      	lsrs	r3, r3, #9
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c5e:	69b9      	ldr	r1, [r7, #24]
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 ff5e 	bl	8003b22 <I2C_Slave_ADDR>
 8002c66:	e066      	b.n	8002d36 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <HAL_I2C_EV_IRQHandler+0x218>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	0a5b      	lsrs	r3, r3, #9
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 ff93 	bl	8003bac <I2C_Slave_STOPF>
 8002c86:	e056      	b.n	8002d36 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c88:	7bbb      	ldrb	r3, [r7, #14]
 8002c8a:	2b21      	cmp	r3, #33	; 0x21
 8002c8c:	d002      	beq.n	8002c94 <HAL_I2C_EV_IRQHandler+0x224>
 8002c8e:	7bbb      	ldrb	r3, [r7, #14]
 8002c90:	2b29      	cmp	r3, #41	; 0x29
 8002c92:	d125      	bne.n	8002ce0 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	09db      	lsrs	r3, r3, #7
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00f      	beq.n	8002cc0 <HAL_I2C_EV_IRQHandler+0x250>
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	0a9b      	lsrs	r3, r3, #10
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d009      	beq.n	8002cc0 <HAL_I2C_EV_IRQHandler+0x250>
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fe74 	bl	80039a6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cbe:	e039      	b.n	8002d34 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d033      	beq.n	8002d34 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	0a5b      	lsrs	r3, r3, #9
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d02d      	beq.n	8002d34 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fea1 	bl	8003a20 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cde:	e029      	b.n	8002d34 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00f      	beq.n	8002d0c <HAL_I2C_EV_IRQHandler+0x29c>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_I2C_EV_IRQHandler+0x29c>
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 feac 	bl	8003a62 <I2C_SlaveReceive_RXNE>
 8002d0a:	e014      	b.n	8002d36 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	0a5b      	lsrs	r3, r3, #9
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 feda 	bl	8003ade <I2C_SlaveReceive_BTF>
 8002d2a:	e004      	b.n	8002d36 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002d2c:	bf00      	nop
 8002d2e:	e002      	b.n	8002d36 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d30:	bf00      	nop
 8002d32:	e000      	b.n	8002d36 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d34:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d36:	3720      	adds	r7, #32
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d5e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <HAL_I2C_ER_IRQHandler+0x4e>
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d88:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	0a5b      	lsrs	r3, r3, #9
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00e      	beq.n	8002db4 <HAL_I2C_ER_IRQHandler+0x78>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002db2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d03f      	beq.n	8002e40 <HAL_I2C_ER_IRQHandler+0x104>
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d039      	beq.n	8002e40 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002dcc:	7efb      	ldrb	r3, [r7, #27]
 8002dce:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dde:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002de6:	7ebb      	ldrb	r3, [r7, #26]
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d112      	bne.n	8002e12 <HAL_I2C_ER_IRQHandler+0xd6>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_I2C_ER_IRQHandler+0xd6>
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	2b21      	cmp	r3, #33	; 0x21
 8002df6:	d008      	beq.n	8002e0a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	2b29      	cmp	r3, #41	; 0x29
 8002dfc:	d005      	beq.n	8002e0a <HAL_I2C_ER_IRQHandler+0xce>
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	2b28      	cmp	r3, #40	; 0x28
 8002e02:	d106      	bne.n	8002e12 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b21      	cmp	r3, #33	; 0x21
 8002e08:	d103      	bne.n	8002e12 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fffe 	bl	8003e0c <I2C_Slave_AF>
 8002e10:	e016      	b.n	8002e40 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e1a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e24:	7efb      	ldrb	r3, [r7, #27]
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d002      	beq.n	8002e30 <HAL_I2C_ER_IRQHandler+0xf4>
 8002e2a:	7efb      	ldrb	r3, [r7, #27]
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d107      	bne.n	8002e40 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	0adb      	lsrs	r3, r3, #11
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00e      	beq.n	8002e6a <HAL_I2C_ER_IRQHandler+0x12e>
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f043 0308 	orr.w	r3, r3, #8
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002e68:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f001 f835 	bl	8003eec <I2C_ITError>
  }
}
 8002e82:	bf00      	nop
 8002e84:	3728      	adds	r7, #40	; 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f5c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d150      	bne.n	800300e <I2C_MasterTransmit_TXE+0xc8>
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b21      	cmp	r3, #33	; 0x21
 8002f70:	d14d      	bne.n	800300e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d01d      	beq.n	8002fb4 <I2C_MasterTransmit_TXE+0x6e>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d01a      	beq.n	8002fb4 <I2C_MasterTransmit_TXE+0x6e>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f84:	d016      	beq.n	8002fb4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f94:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2211      	movs	r2, #17
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff6c 	bl	8002e8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fb2:	e060      	b.n	8003076 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fc2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b40      	cmp	r3, #64	; 0x40
 8002fec:	d107      	bne.n	8002ffe <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ff87 	bl	8002f0a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ffc:	e03b      	b.n	8003076 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ff3f 	bl	8002e8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800300c:	e033      	b.n	8003076 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b21      	cmp	r3, #33	; 0x21
 8003012:	d005      	beq.n	8003020 <I2C_MasterTransmit_TXE+0xda>
 8003014:	7bbb      	ldrb	r3, [r7, #14]
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d12d      	bne.n	8003076 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b22      	cmp	r3, #34	; 0x22
 800301e:	d12a      	bne.n	8003076 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003038:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800303a:	e01c      	b.n	8003076 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d103      	bne.n	8003050 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f898 	bl	800317e <I2C_MemoryTransmit_TXE_BTF>
}
 800304e:	e012      	b.n	8003076 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003074:	e7ff      	b.n	8003076 <I2C_MasterTransmit_TXE+0x130>
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b21      	cmp	r3, #33	; 0x21
 8003096:	d165      	bne.n	8003164 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80030c6:	e056      	b.n	8003176 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d01d      	beq.n	800310a <I2C_MasterTransmit_BTF+0x8c>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d01a      	beq.n	800310a <I2C_MasterTransmit_BTF+0x8c>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030da:	d016      	beq.n	800310a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030ea:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2211      	movs	r2, #17
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fec1 	bl	8002e8a <HAL_I2C_MasterTxCpltCallback>
}
 8003108:	e035      	b.n	8003176 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003118:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d107      	bne.n	8003154 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fedc 	bl	8002f0a <HAL_I2C_MemTxCpltCallback>
}
 8003152:	e010      	b.n	8003176 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fe94 	bl	8002e8a <HAL_I2C_MasterTxCpltCallback>
}
 8003162:	e008      	b.n	8003176 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d102      	bne.n	8003176 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f804 	bl	800317e <I2C_MemoryTransmit_TXE_BTF>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11d      	bne.n	80031ca <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10b      	bne.n	80031ae <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319a:	b2da      	uxtb	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a6:	1c9a      	adds	r2, r3, #2
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80031ac:	e048      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	121b      	asrs	r3, r3, #8
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031c8:	e03a      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d10b      	bne.n	80031ea <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031e8:	e02a      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d126      	bne.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b22      	cmp	r3, #34	; 0x22
 80031fc:	d108      	bne.n	8003210 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320c:	601a      	str	r2, [r3, #0]
}
 800320e:	e017      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b21      	cmp	r3, #33	; 0x21
 800321a:	d111      	bne.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b22      	cmp	r3, #34	; 0x22
 800325e:	d173      	bne.n	8003348 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d920      	bls.n	80032b0 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b03      	cmp	r3, #3
 800329c:	d154      	bne.n	8003348 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ac:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80032ae:	e04b      	b.n	8003348 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d047      	beq.n	8003348 <I2C_MasterReceive_RXNE+0xfc>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d002      	beq.n	80032c4 <I2C_MasterReceive_RXNE+0x78>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d141      	bne.n	8003348 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032e2:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d10a      	bne.n	8003334 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fd f9cd 	bl	80006cc <HAL_I2C_MemRxCpltCallback>
}
 8003332:	e009      	b.n	8003348 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2212      	movs	r2, #18
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fdab 	bl	8002e9e <HAL_I2C_MasterRxCpltCallback>
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b04      	cmp	r3, #4
 8003366:	d11b      	bne.n	80033a0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003376:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800339e:	e0bd      	b.n	800351c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d129      	bne.n	80033fe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d00a      	beq.n	80033d6 <I2C_MasterReceive_BTF+0x86>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d007      	beq.n	80033d6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033fc:	e08e      	b.n	800351c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d176      	bne.n	80034f6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d002      	beq.n	8003414 <I2C_MasterReceive_BTF+0xc4>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b10      	cmp	r3, #16
 8003412:	d108      	bne.n	8003426 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e019      	b.n	800345a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b04      	cmp	r3, #4
 800342a:	d002      	beq.n	8003432 <I2C_MasterReceive_BTF+0xe2>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d108      	bne.n	8003444 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e00a      	b.n	800345a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b10      	cmp	r3, #16
 8003448:	d007      	beq.n	800345a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003458:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034b4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	d10a      	bne.n	80034e0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7fd f8f7 	bl	80006cc <HAL_I2C_MemRxCpltCallback>
}
 80034de:	e01d      	b.n	800351c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2212      	movs	r2, #18
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fcd5 	bl	8002e9e <HAL_I2C_MasterRxCpltCallback>
}
 80034f4:	e012      	b.n	800351c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d117      	bne.n	8003568 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003550:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003552:	e067      	b.n	8003624 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	611a      	str	r2, [r3, #16]
}
 8003566:	e05d      	b.n	8003624 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003570:	d133      	bne.n	80035da <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b21      	cmp	r3, #33	; 0x21
 800357c:	d109      	bne.n	8003592 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800358e:	611a      	str	r2, [r3, #16]
 8003590:	e008      	b.n	80035a4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	b2da      	uxtb	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <I2C_Master_SB+0x92>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d032      	beq.n	8003624 <I2C_Master_SB+0x100>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d02d      	beq.n	8003624 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d6:	605a      	str	r2, [r3, #4]
}
 80035d8:	e024      	b.n	8003624 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10e      	bne.n	8003600 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	11db      	asrs	r3, r3, #7
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 0306 	and.w	r3, r3, #6
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f063 030f 	orn	r3, r3, #15
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	611a      	str	r2, [r3, #16]
}
 80035fe:	e011      	b.n	8003624 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003604:	2b01      	cmp	r3, #1
 8003606:	d10d      	bne.n	8003624 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	b29b      	uxth	r3, r3
 800360e:	11db      	asrs	r3, r3, #7
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 0306 	and.w	r3, r3, #6
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f063 030e 	orn	r3, r3, #14
 800361c:	b2da      	uxtb	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	611a      	str	r2, [r3, #16]
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	b2da      	uxtb	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <I2C_Master_ADD10+0x24>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d011      	beq.n	8003678 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <I2C_Master_ADD10+0x38>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003676:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003684:	b480      	push	{r7}
 8003686:	b091      	sub	sp, #68	; 0x44
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003692:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b22      	cmp	r3, #34	; 0x22
 80036ac:	f040 8169 	bne.w	8003982 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10f      	bne.n	80036d8 <I2C_Master_ADDR+0x54>
 80036b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d10b      	bne.n	80036d8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c0:	2300      	movs	r3, #0
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	633b      	str	r3, [r7, #48]	; 0x30
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	e160      	b.n	800399a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11d      	bne.n	800371c <I2C_Master_ADDR+0x98>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036e8:	d118      	bne.n	800371c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ea:	2300      	movs	r3, #0
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	651a      	str	r2, [r3, #80]	; 0x50
 800371a:	e13e      	b.n	800399a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d113      	bne.n	800374e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003726:	2300      	movs	r3, #0
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e115      	b.n	800397a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 808a 	bne.w	800386e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003760:	d137      	bne.n	80037d2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003770:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003780:	d113      	bne.n	80037aa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003790:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	e0e7      	b.n	800397a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e0d3      	b.n	800397a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d02e      	beq.n	8003836 <I2C_Master_ADDR+0x1b2>
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d02b      	beq.n	8003836 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	2b12      	cmp	r3, #18
 80037e2:	d102      	bne.n	80037ea <I2C_Master_ADDR+0x166>
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d125      	bne.n	8003836 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d00e      	beq.n	800380e <I2C_Master_ADDR+0x18a>
 80037f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d00b      	beq.n	800380e <I2C_Master_ADDR+0x18a>
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d008      	beq.n	800380e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e007      	b.n	800381e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800381c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	e0a1      	b.n	800397a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003844:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e085      	b.n	800397a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d14d      	bne.n	8003914 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b04      	cmp	r3, #4
 800387c:	d016      	beq.n	80038ac <I2C_Master_ADDR+0x228>
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	2b02      	cmp	r3, #2
 8003882:	d013      	beq.n	80038ac <I2C_Master_ADDR+0x228>
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	2b10      	cmp	r3, #16
 8003888:	d010      	beq.n	80038ac <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003898:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e007      	b.n	80038bc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038ba:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ca:	d117      	bne.n	80038fc <I2C_Master_ADDR+0x278>
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038d2:	d00b      	beq.n	80038ec <I2C_Master_ADDR+0x268>
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d008      	beq.n	80038ec <I2C_Master_ADDR+0x268>
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d005      	beq.n	80038ec <I2C_Master_ADDR+0x268>
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d002      	beq.n	80038ec <I2C_Master_ADDR+0x268>
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d107      	bne.n	80038fc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038fa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	e032      	b.n	800397a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003922:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003932:	d117      	bne.n	8003964 <I2C_Master_ADDR+0x2e0>
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800393a:	d00b      	beq.n	8003954 <I2C_Master_ADDR+0x2d0>
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	2b01      	cmp	r3, #1
 8003940:	d008      	beq.n	8003954 <I2C_Master_ADDR+0x2d0>
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	2b08      	cmp	r3, #8
 8003946:	d005      	beq.n	8003954 <I2C_Master_ADDR+0x2d0>
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	2b10      	cmp	r3, #16
 800394c:	d002      	beq.n	8003954 <I2C_Master_ADDR+0x2d0>
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2b20      	cmp	r3, #32
 8003952:	d107      	bne.n	8003964 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003962:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003980:	e00b      	b.n	800399a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
}
 8003998:	e7ff      	b.n	800399a <I2C_Master_ADDR+0x316>
 800399a:	bf00      	nop
 800399c:	3744      	adds	r7, #68	; 0x44
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02b      	beq.n	8003a18 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d114      	bne.n	8003a18 <I2C_SlaveTransmit_TXE+0x72>
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b29      	cmp	r3, #41	; 0x29
 80039f2:	d111      	bne.n	8003a18 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2221      	movs	r2, #33	; 0x21
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2228      	movs	r2, #40	; 0x28
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fa4d 	bl	8002eb2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d011      	beq.n	8003a56 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02c      	beq.n	8003ad6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d114      	bne.n	8003ad6 <I2C_SlaveReceive_RXNE+0x74>
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab0:	d111      	bne.n	8003ad6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2222      	movs	r2, #34	; 0x22
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2228      	movs	r2, #40	; 0x28
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff f9f8 	bl	8002ec6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d012      	beq.n	8003b16 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b3c:	2b28      	cmp	r3, #40	; 0x28
 8003b3e:	d127      	bne.n	8003b90 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	09db      	lsrs	r3, r3, #7
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	81bb      	strh	r3, [r7, #12]
 8003b72:	e002      	b.n	8003b7a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b82:	89ba      	ldrh	r2, [r7, #12]
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff f9a6 	bl	8002eda <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b8e:	e008      	b.n	8003ba2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0202 	mvn.w	r2, #2
 8003b98:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c08:	d172      	bne.n	8003cf0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b22      	cmp	r3, #34	; 0x22
 8003c0e:	d002      	beq.n	8003c16 <I2C_Slave_STOPF+0x6a>
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b2a      	cmp	r3, #42	; 0x2a
 8003c14:	d135      	bne.n	8003c82 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe f8d0 	bl	8001df4 <HAL_DMA_GetState>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d049      	beq.n	8003cee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	4a69      	ldr	r2, [pc, #420]	; (8003e04 <I2C_Slave_STOPF+0x258>)
 8003c60:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd ff18 	bl	8001a9c <HAL_DMA_Abort_IT>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03d      	beq.n	8003cee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c80:	e035      	b.n	8003cee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe f89a 	bl	8001df4 <HAL_DMA_GetState>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d014      	beq.n	8003cf0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	4a4e      	ldr	r2, [pc, #312]	; (8003e04 <I2C_Slave_STOPF+0x258>)
 8003ccc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fee2 	bl	8001a9c <HAL_DMA_Abort_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4798      	blx	r3
 8003cec:	e000      	b.n	8003cf0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03e      	beq.n	8003d78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d112      	bne.n	8003d2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d112      	bne.n	8003d62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f043 0204 	orr.w	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8b3 	bl	8003eec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d86:	e039      	b.n	8003dfc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8c:	d109      	bne.n	8003da2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2228      	movs	r2, #40	; 0x28
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff f892 	bl	8002ec6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b28      	cmp	r3, #40	; 0x28
 8003dac:	d111      	bne.n	8003dd2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <I2C_Slave_STOPF+0x25c>)
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff f893 	bl	8002ef6 <HAL_I2C_ListenCpltCallback>
}
 8003dd0:	e014      	b.n	8003dfc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	2b22      	cmp	r3, #34	; 0x22
 8003dd8:	d002      	beq.n	8003de0 <I2C_Slave_STOPF+0x234>
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b22      	cmp	r3, #34	; 0x22
 8003dde:	d10d      	bne.n	8003dfc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff f865 	bl	8002ec6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	0800463d 	.word	0x0800463d
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d002      	beq.n	8003e2e <I2C_Slave_AF+0x22>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d129      	bne.n	8003e82 <I2C_Slave_AF+0x76>
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	2b28      	cmp	r3, #40	; 0x28
 8003e32:	d126      	bne.n	8003e82 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a2c      	ldr	r2, [pc, #176]	; (8003ee8 <I2C_Slave_AF+0xdc>)
 8003e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e48:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e52:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff f83b 	bl	8002ef6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003e80:	e02e      	b.n	8003ee0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b21      	cmp	r3, #33	; 0x21
 8003e86:	d126      	bne.n	8003ed6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <I2C_Slave_AF+0xdc>)
 8003e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2221      	movs	r2, #33	; 0x21
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eb2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ebc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ecc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fe ffef 	bl	8002eb2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ed4:	e004      	b.n	8003ee0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ede:	615a      	str	r2, [r3, #20]
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	ffff0000 	.word	0xffff0000

08003eec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d10a      	bne.n	8003f1e <I2C_ITError+0x32>
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b22      	cmp	r3, #34	; 0x22
 8003f0c:	d107      	bne.n	8003f1e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f24:	2b28      	cmp	r3, #40	; 0x28
 8003f26:	d107      	bne.n	8003f38 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2228      	movs	r2, #40	; 0x28
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f36:	e015      	b.n	8003f64 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f46:	d006      	beq.n	8003f56 <I2C_ITError+0x6a>
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b60      	cmp	r3, #96	; 0x60
 8003f4c:	d003      	beq.n	8003f56 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f72:	d162      	bne.n	800403a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d020      	beq.n	8003fd4 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f96:	4a6a      	ldr	r2, [pc, #424]	; (8004140 <I2C_ITError+0x254>)
 8003f98:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd fd7c 	bl	8001a9c <HAL_DMA_Abort_IT>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8089 	beq.w	80040be <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4798      	blx	r3
 8003fd2:	e074      	b.n	80040be <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	4a59      	ldr	r2, [pc, #356]	; (8004140 <I2C_ITError+0x254>)
 8003fda:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd fd5b 	bl	8001a9c <HAL_DMA_Abort_IT>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d068      	beq.n	80040be <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d10b      	bne.n	8004012 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004034:	4610      	mov	r0, r2
 8004036:	4798      	blx	r3
 8004038:	e041      	b.n	80040be <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b60      	cmp	r3, #96	; 0x60
 8004044:	d125      	bne.n	8004092 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d10b      	bne.n	800407a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fe ff51 	bl	8002f32 <HAL_I2C_AbortCpltCallback>
 8004090:	e015      	b.n	80040be <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d10b      	bne.n	80040b8 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fe ff30 	bl	8002f1e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10e      	bne.n	80040ec <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b04      	cmp	r3, #4
 800410e:	d113      	bne.n	8004138 <I2C_ITError+0x24c>
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b28      	cmp	r3, #40	; 0x28
 8004114:	d110      	bne.n	8004138 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <I2C_ITError+0x258>)
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fe fedf 	bl	8002ef6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	0800463d 	.word	0x0800463d
 8004144:	ffff0000 	.word	0xffff0000

08004148 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	460b      	mov	r3, r1
 8004156:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d006      	beq.n	8004172 <I2C_MasterRequestWrite+0x2a>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d003      	beq.n	8004172 <I2C_MasterRequestWrite+0x2a>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004170:	d108      	bne.n	8004184 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e00b      	b.n	800419c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	2b12      	cmp	r3, #18
 800418a:	d107      	bne.n	800419c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fac6 	bl	800473a <I2C_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e035      	b.n	800423a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d6:	d108      	bne.n	80041ea <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041d8:	897b      	ldrh	r3, [r7, #10]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041e6:	611a      	str	r2, [r3, #16]
 80041e8:	e01b      	b.n	8004222 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041ea:	897b      	ldrh	r3, [r7, #10]
 80041ec:	11db      	asrs	r3, r3, #7
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0306 	and.w	r3, r3, #6
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f063 030f 	orn	r3, r3, #15
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	490f      	ldr	r1, [pc, #60]	; (8004244 <I2C_MasterRequestWrite+0xfc>)
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 faed 	bl	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e010      	b.n	800423a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004218:	897b      	ldrh	r3, [r7, #10]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4908      	ldr	r1, [pc, #32]	; (8004248 <I2C_MasterRequestWrite+0x100>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fadd 	bl	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	00010008 	.word	0x00010008
 8004248:	00010002 	.word	0x00010002

0800424c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	460b      	mov	r3, r1
 8004260:	813b      	strh	r3, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004274:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	2200      	movs	r2, #0
 800428e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fa51 	bl	800473a <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0a9      	b.n	800440c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042b8:	897b      	ldrh	r3, [r7, #10]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	6a3a      	ldr	r2, [r7, #32]
 80042cc:	4951      	ldr	r1, [pc, #324]	; (8004414 <I2C_RequestMemoryRead+0x1c8>)
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fa8a 	bl	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e096      	b.n	800440c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	6a39      	ldr	r1, [r7, #32]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 faf4 	bl	80048e6 <I2C_WaitOnTXEFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00d      	beq.n	8004320 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	2b04      	cmp	r3, #4
 800430a:	d107      	bne.n	800431c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e075      	b.n	800440c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004326:	893b      	ldrh	r3, [r7, #8]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	611a      	str	r2, [r3, #16]
 8004330:	e021      	b.n	8004376 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004332:	893b      	ldrh	r3, [r7, #8]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	b29b      	uxth	r3, r3
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004342:	6a39      	ldr	r1, [r7, #32]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 face 	bl	80048e6 <I2C_WaitOnTXEFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00d      	beq.n	800436c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	2b04      	cmp	r3, #4
 8004356:	d107      	bne.n	8004368 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004366:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e04f      	b.n	800440c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800436c:	893b      	ldrh	r3, [r7, #8]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004378:	6a39      	ldr	r1, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fab3 	bl	80048e6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b04      	cmp	r3, #4
 800438c:	d107      	bne.n	800439e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e034      	b.n	800440c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f9bb 	bl	800473a <I2C_WaitOnFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00c      	beq.n	80043e4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e013      	b.n	800440c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043e4:	897b      	ldrh	r3, [r7, #10]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	6a3a      	ldr	r2, [r7, #32]
 80043f8:	4906      	ldr	r1, [pc, #24]	; (8004414 <I2C_RequestMemoryRead+0x1c8>)
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f9f4 	bl	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	00010002 	.word	0x00010002

08004418 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004434:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800444a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004458:	2200      	movs	r2, #0
 800445a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	2200      	movs	r2, #0
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004472:	2b21      	cmp	r3, #33	; 0x21
 8004474:	d007      	beq.n	8004486 <I2C_DMAXferCplt+0x6e>
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800447c:	2b22      	cmp	r3, #34	; 0x22
 800447e:	d131      	bne.n	80044e4 <I2C_DMAXferCplt+0xcc>
 8004480:	7cbb      	ldrb	r3, [r7, #18]
 8004482:	2b20      	cmp	r3, #32
 8004484:	d12e      	bne.n	80044e4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004494:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	2b29      	cmp	r3, #41	; 0x29
 80044a0:	d10a      	bne.n	80044b8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2221      	movs	r2, #33	; 0x21
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2228      	movs	r2, #40	; 0x28
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044b0:	6978      	ldr	r0, [r7, #20]
 80044b2:	f7fe fcfe 	bl	8002eb2 <HAL_I2C_SlaveTxCpltCallback>
 80044b6:	e00c      	b.n	80044d2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	2b2a      	cmp	r3, #42	; 0x2a
 80044bc:	d109      	bne.n	80044d2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2222      	movs	r2, #34	; 0x22
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2228      	movs	r2, #40	; 0x28
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044cc:	6978      	ldr	r0, [r7, #20]
 80044ce:	f7fe fcfa 	bl	8002ec6 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80044e0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80044e2:	e06a      	b.n	80045ba <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d064      	beq.n	80045ba <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004508:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004518:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004520:	d009      	beq.n	8004536 <I2C_DMAXferCplt+0x11e>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d006      	beq.n	8004536 <I2C_DMAXferCplt+0x11e>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800452e:	d002      	beq.n	8004536 <I2C_DMAXferCplt+0x11e>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b20      	cmp	r3, #32
 8004534:	d107      	bne.n	8004546 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004554:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004564:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004574:	6978      	ldr	r0, [r7, #20]
 8004576:	f7fe fcd2 	bl	8002f1e <HAL_I2C_ErrorCallback>
}
 800457a:	e01e      	b.n	80045ba <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d10a      	bne.n	80045a6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2200      	movs	r2, #0
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f7fc f894 	bl	80006cc <HAL_I2C_MemRxCpltCallback>
}
 80045a4:	e009      	b.n	80045ba <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2212      	movs	r2, #18
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80045b4:	6978      	ldr	r0, [r7, #20]
 80045b6:	f7fe fc72 	bl	8002e9e <HAL_I2C_MasterRxCpltCallback>
}
 80045ba:	bf00      	nop
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	2200      	movs	r2, #0
 80045de:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	2200      	movs	r2, #0
 80045ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fd fc0d 	bl	8001e10 <HAL_DMA_GetError>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d01b      	beq.n	8004634 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0210 	orr.w	r2, r3, #16
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7fe fc75 	bl	8002f1e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	2200      	movs	r2, #0
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	2200      	movs	r2, #0
 8004670:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004680:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	2200      	movs	r2, #0
 8004696:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	2200      	movs	r2, #0
 80046a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b60      	cmp	r3, #96	; 0x60
 80046c2:	d10e      	bne.n	80046e2 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7fe fc29 	bl	8002f32 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046e0:	e027      	b.n	8004732 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046e2:	7afb      	ldrb	r3, [r7, #11]
 80046e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046e8:	2b28      	cmp	r3, #40	; 0x28
 80046ea:	d117      	bne.n	800471c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800470a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2228      	movs	r2, #40	; 0x28
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800471a:	e007      	b.n	800472c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7fe fbf6 	bl	8002f1e <HAL_I2C_ErrorCallback>
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	4613      	mov	r3, r2
 8004748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800474a:	e025      	b.n	8004798 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d021      	beq.n	8004798 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004754:	f7fc feec 	bl	8001530 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d302      	bcc.n	800476a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d116      	bne.n	8004798 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e023      	b.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	0c1b      	lsrs	r3, r3, #16
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d10d      	bne.n	80047be <I2C_WaitOnFlagUntilTimeout+0x84>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	43da      	mvns	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4013      	ands	r3, r2
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	e00c      	b.n	80047d8 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	43da      	mvns	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4013      	ands	r3, r2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d0b6      	beq.n	800474c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047f6:	e051      	b.n	800489c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004806:	d123      	bne.n	8004850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f043 0204 	orr.w	r2, r3, #4
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e046      	b.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d021      	beq.n	800489c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004858:	f7fc fe6a 	bl	8001530 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d302      	bcc.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d116      	bne.n	800489c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e020      	b.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	0c1b      	lsrs	r3, r3, #16
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d10c      	bne.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	43da      	mvns	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4013      	ands	r3, r2
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e00b      	b.n	80048d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	43da      	mvns	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4013      	ands	r3, r2
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bf14      	ite	ne
 80048d2:	2301      	movne	r3, #1
 80048d4:	2300      	moveq	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d18d      	bne.n	80047f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f2:	e02d      	b.n	8004950 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f878 	bl	80049ea <I2C_IsAcknowledgeFailed>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e02d      	b.n	8004960 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d021      	beq.n	8004950 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490c:	f7fc fe10 	bl	8001530 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	d302      	bcc.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d116      	bne.n	8004950 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e007      	b.n	8004960 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d1ca      	bne.n	80048f4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004974:	e02d      	b.n	80049d2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f837 	bl	80049ea <I2C_IsAcknowledgeFailed>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e02d      	b.n	80049e2 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d021      	beq.n	80049d2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fc fdcf 	bl	8001530 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d116      	bne.n	80049d2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f043 0220 	orr.w	r2, r3, #32
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e007      	b.n	80049e2 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d1ca      	bne.n	8004976 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d11b      	bne.n	8004a3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f043 0204 	orr.w	r2, r3, #4
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a58:	d103      	bne.n	8004a62 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a60:	e007      	b.n	8004a72 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a6a:	d102      	bne.n	8004a72 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0cc      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a94:	4b68      	ldr	r3, [pc, #416]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d90c      	bls.n	8004abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0b8      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d020      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad4:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a58      	ldr	r2, [pc, #352]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4a52      	ldr	r2, [pc, #328]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af8:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	494d      	ldr	r1, [pc, #308]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d044      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1e:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d119      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e07f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d003      	beq.n	8004b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3e:	4b3f      	ldr	r3, [pc, #252]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e06f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e067      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f023 0203 	bic.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4934      	ldr	r1, [pc, #208]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b70:	f7fc fcde 	bl	8001530 <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b78:	f7fc fcda 	bl	8001530 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e04f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 020c 	and.w	r2, r3, #12
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d1eb      	bne.n	8004b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d20c      	bcs.n	8004bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b22      	ldr	r3, [pc, #136]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e032      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4916      	ldr	r1, [pc, #88]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	490e      	ldr	r1, [pc, #56]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c06:	f000 f855 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	5cd3      	ldrb	r3, [r2, r3]
 8004c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_ClockConfig+0x1c8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fc fc3e 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023c00 	.word	0x40023c00
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	08006df0 	.word	0x08006df0
 8004c44:	20000004 	.word	0x20000004
 8004c48:	20000008 	.word	0x20000008

08004c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000004 	.word	0x20000004

08004c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c68:	f7ff fff0 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004c6c:	4601      	mov	r1, r0
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0a9b      	lsrs	r3, r3, #10
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4a03      	ldr	r2, [pc, #12]	; (8004c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c7a:	5cd3      	ldrb	r3, [r2, r3]
 8004c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	08006e00 	.word	0x08006e00

08004c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c90:	f7ff ffdc 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004c94:	4601      	mov	r1, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0b5b      	lsrs	r3, r3, #13
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4a03      	ldr	r2, [pc, #12]	; (8004cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ca2:	5cd3      	ldrb	r3, [r2, r3]
 8004ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	08006e00 	.word	0x08006e00

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cce:	4b9f      	ldr	r3, [pc, #636]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	f200 8130 	bhi.w	8004f3c <HAL_RCC_GetSysClockFreq+0x288>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <HAL_RCC_GetSysClockFreq+0x30>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d19 	.word	0x08004d19
 8004ce8:	08004f3d 	.word	0x08004f3d
 8004cec:	08004f3d 	.word	0x08004f3d
 8004cf0:	08004f3d 	.word	0x08004f3d
 8004cf4:	08004d1f 	.word	0x08004d1f
 8004cf8:	08004f3d 	.word	0x08004f3d
 8004cfc:	08004f3d 	.word	0x08004f3d
 8004d00:	08004f3d 	.word	0x08004f3d
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004f3d 	.word	0x08004f3d
 8004d0c:	08004f3d 	.word	0x08004f3d
 8004d10:	08004f3d 	.word	0x08004f3d
 8004d14:	08004e33 	.word	0x08004e33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d18:	4b8d      	ldr	r3, [pc, #564]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x29c>)
 8004d1a:	613b      	str	r3, [r7, #16]
       break;
 8004d1c:	e111      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d1e:	4b8d      	ldr	r3, [pc, #564]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004d20:	613b      	str	r3, [r7, #16]
      break;
 8004d22:	e10e      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d24:	4b89      	ldr	r3, [pc, #548]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d2c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d2e:	4b87      	ldr	r3, [pc, #540]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d023      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3a:	4b84      	ldr	r3, [pc, #528]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	f04f 0400 	mov.w	r4, #0
 8004d44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	ea03 0501 	and.w	r5, r3, r1
 8004d50:	ea04 0602 	and.w	r6, r4, r2
 8004d54:	4a7f      	ldr	r2, [pc, #508]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004d56:	fb02 f106 	mul.w	r1, r2, r6
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	fb02 f205 	mul.w	r2, r2, r5
 8004d60:	440a      	add	r2, r1
 8004d62:	497c      	ldr	r1, [pc, #496]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004d64:	fba5 0101 	umull	r0, r1, r5, r1
 8004d68:	1853      	adds	r3, r2, r1
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f04f 0400 	mov.w	r4, #0
 8004d72:	461a      	mov	r2, r3
 8004d74:	4623      	mov	r3, r4
 8004d76:	f7fb fa45 	bl	8000204 <__aeabi_uldivmod>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e049      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d82:	4b72      	ldr	r3, [pc, #456]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	f04f 0400 	mov.w	r4, #0
 8004d8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	ea03 0501 	and.w	r5, r3, r1
 8004d98:	ea04 0602 	and.w	r6, r4, r2
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4632      	mov	r2, r6
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	f04f 0400 	mov.w	r4, #0
 8004da8:	0154      	lsls	r4, r2, #5
 8004daa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dae:	014b      	lsls	r3, r1, #5
 8004db0:	4619      	mov	r1, r3
 8004db2:	4622      	mov	r2, r4
 8004db4:	1b49      	subs	r1, r1, r5
 8004db6:	eb62 0206 	sbc.w	r2, r2, r6
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	f04f 0400 	mov.w	r4, #0
 8004dc2:	0194      	lsls	r4, r2, #6
 8004dc4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004dc8:	018b      	lsls	r3, r1, #6
 8004dca:	1a5b      	subs	r3, r3, r1
 8004dcc:	eb64 0402 	sbc.w	r4, r4, r2
 8004dd0:	f04f 0100 	mov.w	r1, #0
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	00e2      	lsls	r2, r4, #3
 8004dda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dde:	00d9      	lsls	r1, r3, #3
 8004de0:	460b      	mov	r3, r1
 8004de2:	4614      	mov	r4, r2
 8004de4:	195b      	adds	r3, r3, r5
 8004de6:	eb44 0406 	adc.w	r4, r4, r6
 8004dea:	f04f 0100 	mov.w	r1, #0
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	02a2      	lsls	r2, r4, #10
 8004df4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004df8:	0299      	lsls	r1, r3, #10
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	4621      	mov	r1, r4
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f04f 0400 	mov.w	r4, #0
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	f7fb f9fa 	bl	8000204 <__aeabi_uldivmod>
 8004e10:	4603      	mov	r3, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e16:	4b4d      	ldr	r3, [pc, #308]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	0c1b      	lsrs	r3, r3, #16
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	3301      	adds	r3, #1
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	613b      	str	r3, [r7, #16]
      break;
 8004e30:	e087      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e32:	4b46      	ldr	r3, [pc, #280]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e3a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e3c:	4b43      	ldr	r3, [pc, #268]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d023      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e48:	4b40      	ldr	r3, [pc, #256]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	099b      	lsrs	r3, r3, #6
 8004e4e:	f04f 0400 	mov.w	r4, #0
 8004e52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	ea03 0501 	and.w	r5, r3, r1
 8004e5e:	ea04 0602 	and.w	r6, r4, r2
 8004e62:	4a3c      	ldr	r2, [pc, #240]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004e64:	fb02 f106 	mul.w	r1, r2, r6
 8004e68:	2200      	movs	r2, #0
 8004e6a:	fb02 f205 	mul.w	r2, r2, r5
 8004e6e:	440a      	add	r2, r1
 8004e70:	4938      	ldr	r1, [pc, #224]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004e72:	fba5 0101 	umull	r0, r1, r5, r1
 8004e76:	1853      	adds	r3, r2, r1
 8004e78:	4619      	mov	r1, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f04f 0400 	mov.w	r4, #0
 8004e80:	461a      	mov	r2, r3
 8004e82:	4623      	mov	r3, r4
 8004e84:	f7fb f9be 	bl	8000204 <__aeabi_uldivmod>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e049      	b.n	8004f24 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e90:	4b2e      	ldr	r3, [pc, #184]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	099b      	lsrs	r3, r3, #6
 8004e96:	f04f 0400 	mov.w	r4, #0
 8004e9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	ea03 0501 	and.w	r5, r3, r1
 8004ea6:	ea04 0602 	and.w	r6, r4, r2
 8004eaa:	4629      	mov	r1, r5
 8004eac:	4632      	mov	r2, r6
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	f04f 0400 	mov.w	r4, #0
 8004eb6:	0154      	lsls	r4, r2, #5
 8004eb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ebc:	014b      	lsls	r3, r1, #5
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	1b49      	subs	r1, r1, r5
 8004ec4:	eb62 0206 	sbc.w	r2, r2, r6
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	f04f 0400 	mov.w	r4, #0
 8004ed0:	0194      	lsls	r4, r2, #6
 8004ed2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ed6:	018b      	lsls	r3, r1, #6
 8004ed8:	1a5b      	subs	r3, r3, r1
 8004eda:	eb64 0402 	sbc.w	r4, r4, r2
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	00e2      	lsls	r2, r4, #3
 8004ee8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004eec:	00d9      	lsls	r1, r3, #3
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	195b      	adds	r3, r3, r5
 8004ef4:	eb44 0406 	adc.w	r4, r4, r6
 8004ef8:	f04f 0100 	mov.w	r1, #0
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	02a2      	lsls	r2, r4, #10
 8004f02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f06:	0299      	lsls	r1, r3, #10
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4614      	mov	r4, r2
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	4621      	mov	r1, r4
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f04f 0400 	mov.w	r4, #0
 8004f16:	461a      	mov	r2, r3
 8004f18:	4623      	mov	r3, r4
 8004f1a:	f7fb f973 	bl	8000204 <__aeabi_uldivmod>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	460c      	mov	r4, r1
 8004f22:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f24:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x298>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	0f1b      	lsrs	r3, r3, #28
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	613b      	str	r3, [r7, #16]
      break;
 8004f3a:	e002      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f3c:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x29c>)
 8004f3e:	613b      	str	r3, [r7, #16]
      break;
 8004f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f42:	693b      	ldr	r3, [r7, #16]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	00f42400 	.word	0x00f42400
 8004f54:	017d7840 	.word	0x017d7840

08004f58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8083 	beq.w	8005078 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f72:	4b95      	ldr	r3, [pc, #596]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d019      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f7e:	4b92      	ldr	r3, [pc, #584]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d106      	bne.n	8004f98 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f8a:	4b8f      	ldr	r3, [pc, #572]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f96:	d00c      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f98:	4b8b      	ldr	r3, [pc, #556]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d112      	bne.n	8004fca <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa4:	4b88      	ldr	r3, [pc, #544]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb0:	d10b      	bne.n	8004fca <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb2:	4b85      	ldr	r3, [pc, #532]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d05b      	beq.n	8005076 <HAL_RCC_OscConfig+0x11e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d157      	bne.n	8005076 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e216      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x8a>
 8004fd4:	4b7c      	ldr	r3, [pc, #496]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a7b      	ldr	r2, [pc, #492]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	e01d      	b.n	800501e <HAL_RCC_OscConfig+0xc6>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fea:	d10c      	bne.n	8005006 <HAL_RCC_OscConfig+0xae>
 8004fec:	4b76      	ldr	r3, [pc, #472]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a75      	ldr	r2, [pc, #468]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b73      	ldr	r3, [pc, #460]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a72      	ldr	r2, [pc, #456]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	e00b      	b.n	800501e <HAL_RCC_OscConfig+0xc6>
 8005006:	4b70      	ldr	r3, [pc, #448]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6f      	ldr	r2, [pc, #444]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 800500c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b6d      	ldr	r3, [pc, #436]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6c      	ldr	r2, [pc, #432]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800501c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d013      	beq.n	800504e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fc fa83 	bl	8001530 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800502e:	f7fc fa7f 	bl	8001530 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b64      	cmp	r3, #100	; 0x64
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e1db      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005040:	4b61      	ldr	r3, [pc, #388]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0xd6>
 800504c:	e014      	b.n	8005078 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504e:	f7fc fa6f 	bl	8001530 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005056:	f7fc fa6b 	bl	8001530 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b64      	cmp	r3, #100	; 0x64
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e1c7      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005068:	4b57      	ldr	r3, [pc, #348]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <HAL_RCC_OscConfig+0xfe>
 8005074:	e000      	b.n	8005078 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005076:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d06f      	beq.n	8005164 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005084:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 030c 	and.w	r3, r3, #12
 800508c:	2b00      	cmp	r3, #0
 800508e:	d017      	beq.n	80050c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005090:	4b4d      	ldr	r3, [pc, #308]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005098:	2b08      	cmp	r3, #8
 800509a:	d105      	bne.n	80050a8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800509c:	4b4a      	ldr	r3, [pc, #296]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a8:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050b0:	2b0c      	cmp	r3, #12
 80050b2:	d11c      	bne.n	80050ee <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b4:	4b44      	ldr	r3, [pc, #272]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d116      	bne.n	80050ee <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c0:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_OscConfig+0x180>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e18f      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d8:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4938      	ldr	r1, [pc, #224]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ec:	e03a      	b.n	8005164 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d020      	beq.n	8005138 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f6:	4b35      	ldr	r3, [pc, #212]	; (80051cc <HAL_RCC_OscConfig+0x274>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fc fa18 	bl	8001530 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005104:	f7fc fa14 	bl	8001530 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e170      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005116:	4b2c      	ldr	r3, [pc, #176]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005122:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4925      	ldr	r1, [pc, #148]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
 8005136:	e015      	b.n	8005164 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005138:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_RCC_OscConfig+0x274>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fc f9f7 	bl	8001530 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005146:	f7fc f9f3 	bl	8001530 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e14f      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f0      	bne.n	8005146 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d037      	beq.n	80051e0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d016      	beq.n	80051a6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005178:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <HAL_RCC_OscConfig+0x278>)
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517e:	f7fc f9d7 	bl	8001530 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005186:	f7fc f9d3 	bl	8001530 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e12f      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 800519a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCC_OscConfig+0x22e>
 80051a4:	e01c      	b.n	80051e0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <HAL_RCC_OscConfig+0x278>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fc f9c0 	bl	8001530 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b2:	e00f      	b.n	80051d4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fc f9bc 	bl	8001530 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d908      	bls.n	80051d4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e118      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
 80051c6:	bf00      	nop
 80051c8:	40023800 	.word	0x40023800
 80051cc:	42470000 	.word	0x42470000
 80051d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d4:	4b8a      	ldr	r3, [pc, #552]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 80051d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e9      	bne.n	80051b4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8097 	beq.w	800531c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f2:	4b83      	ldr	r3, [pc, #524]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10f      	bne.n	800521e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	4b7f      	ldr	r3, [pc, #508]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	4a7e      	ldr	r2, [pc, #504]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520c:	6413      	str	r3, [r2, #64]	; 0x40
 800520e:	4b7c      	ldr	r3, [pc, #496]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521e:	4b79      	ldr	r3, [pc, #484]	; (8005404 <HAL_RCC_OscConfig+0x4ac>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d118      	bne.n	800525c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522a:	4b76      	ldr	r3, [pc, #472]	; (8005404 <HAL_RCC_OscConfig+0x4ac>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a75      	ldr	r2, [pc, #468]	; (8005404 <HAL_RCC_OscConfig+0x4ac>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005236:	f7fc f97b 	bl	8001530 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523e:	f7fc f977 	bl	8001530 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e0d3      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005250:	4b6c      	ldr	r3, [pc, #432]	; (8005404 <HAL_RCC_OscConfig+0x4ac>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0x31a>
 8005264:	4b66      	ldr	r3, [pc, #408]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	4a65      	ldr	r2, [pc, #404]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	6713      	str	r3, [r2, #112]	; 0x70
 8005270:	e01c      	b.n	80052ac <HAL_RCC_OscConfig+0x354>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b05      	cmp	r3, #5
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x33c>
 800527a:	4b61      	ldr	r3, [pc, #388]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	4a60      	ldr	r2, [pc, #384]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005280:	f043 0304 	orr.w	r3, r3, #4
 8005284:	6713      	str	r3, [r2, #112]	; 0x70
 8005286:	4b5e      	ldr	r3, [pc, #376]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a5d      	ldr	r2, [pc, #372]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
 8005292:	e00b      	b.n	80052ac <HAL_RCC_OscConfig+0x354>
 8005294:	4b5a      	ldr	r3, [pc, #360]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	4a59      	ldr	r2, [pc, #356]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	6713      	str	r3, [r2, #112]	; 0x70
 80052a0:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a4:	4a56      	ldr	r2, [pc, #344]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 80052a6:	f023 0304 	bic.w	r3, r3, #4
 80052aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d015      	beq.n	80052e0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b4:	f7fc f93c 	bl	8001530 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ba:	e00a      	b.n	80052d2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052bc:	f7fc f938 	bl	8001530 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e092      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d2:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ee      	beq.n	80052bc <HAL_RCC_OscConfig+0x364>
 80052de:	e014      	b.n	800530a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e0:	f7fc f926 	bl	8001530 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fc f922 	bl	8001530 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e07c      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fe:	4b40      	ldr	r3, [pc, #256]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ee      	bne.n	80052e8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d105      	bne.n	800531c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005310:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	4a3a      	ldr	r2, [pc, #232]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d068      	beq.n	80053f6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005324:	4b36      	ldr	r3, [pc, #216]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 030c 	and.w	r3, r3, #12
 800532c:	2b08      	cmp	r3, #8
 800532e:	d060      	beq.n	80053f2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d145      	bne.n	80053c4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005338:	4b33      	ldr	r3, [pc, #204]	; (8005408 <HAL_RCC_OscConfig+0x4b0>)
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533e:	f7fc f8f7 	bl	8001530 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005346:	f7fc f8f3 	bl	8001530 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e04f      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005358:	4b29      	ldr	r3, [pc, #164]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	019b      	lsls	r3, r3, #6
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	3b01      	subs	r3, #1
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	071b      	lsls	r3, r3, #28
 8005390:	491b      	ldr	r1, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <HAL_RCC_OscConfig+0x4b0>)
 8005398:	2201      	movs	r2, #1
 800539a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7fc f8c8 	bl	8001530 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fc f8c4 	bl	8001530 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e020      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b6:	4b12      	ldr	r3, [pc, #72]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0x44c>
 80053c2:	e018      	b.n	80053f6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c4:	4b10      	ldr	r3, [pc, #64]	; (8005408 <HAL_RCC_OscConfig+0x4b0>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fc f8b1 	bl	8001530 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d2:	f7fc f8ad 	bl	8001530 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e009      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_RCC_OscConfig+0x4a8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f0      	bne.n	80053d2 <HAL_RCC_OscConfig+0x47a>
 80053f0:	e001      	b.n	80053f6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	40007000 	.word	0x40007000
 8005408:	42470060 	.word	0x42470060

0800540c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e01d      	b.n	800545a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fb fe70 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 fb72 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b06      	cmp	r3, #6
 8005482:	d007      	beq.n	8005494 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b06      	cmp	r3, #6
 80054d2:	d007      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e01d      	b.n	8005540 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f815 	bl	8005548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f000 faff 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fdca 	bl	8006108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <HAL_TIM_PWM_Start+0x74>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_PWM_Start+0x2c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a14      	ldr	r2, [pc, #80]	; (80055d4 <HAL_TIM_PWM_Start+0x78>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_TIM_PWM_Start+0x30>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <HAL_TIM_PWM_Start+0x32>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b06      	cmp	r3, #6
 80055b2:	d007      	beq.n	80055c4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40010400 	.word	0x40010400

080055d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d122      	bne.n	8005634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d11b      	bne.n	8005634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0202 	mvn.w	r2, #2
 8005604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa6b 	bl	8005af6 <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa5d 	bl	8005ae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fa6e 	bl	8005b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b04      	cmp	r3, #4
 8005640:	d122      	bne.n	8005688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b04      	cmp	r3, #4
 800564e:	d11b      	bne.n	8005688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0204 	mvn.w	r2, #4
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fa41 	bl	8005af6 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa33 	bl	8005ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa44 	bl	8005b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b08      	cmp	r3, #8
 8005694:	d122      	bne.n	80056dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d11b      	bne.n	80056dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0208 	mvn.w	r2, #8
 80056ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2204      	movs	r2, #4
 80056b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fa17 	bl	8005af6 <HAL_TIM_IC_CaptureCallback>
 80056c8:	e005      	b.n	80056d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fa09 	bl	8005ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fa1a 	bl	8005b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d122      	bne.n	8005730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0210 	mvn.w	r2, #16
 8005700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2208      	movs	r2, #8
 8005706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f9ed 	bl	8005af6 <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f9df 	bl	8005ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f9f0 	bl	8005b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b01      	cmp	r3, #1
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0201 	mvn.w	r2, #1
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fb fb7a 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005766:	2b80      	cmp	r3, #128	; 0x80
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005774:	2b80      	cmp	r3, #128	; 0x80
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fd6c 	bl	8006260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b40      	cmp	r3, #64	; 0x40
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f9b5 	bl	8005b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d10e      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d107      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0220 	mvn.w	r2, #32
 80057d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fd36 	bl	800624c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0b4      	b.n	800596c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2202      	movs	r2, #2
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b0c      	cmp	r3, #12
 8005816:	f200 809f 	bhi.w	8005958 <HAL_TIM_PWM_ConfigChannel+0x170>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005855 	.word	0x08005855
 8005824:	08005959 	.word	0x08005959
 8005828:	08005959 	.word	0x08005959
 800582c:	08005959 	.word	0x08005959
 8005830:	08005895 	.word	0x08005895
 8005834:	08005959 	.word	0x08005959
 8005838:	08005959 	.word	0x08005959
 800583c:	08005959 	.word	0x08005959
 8005840:	080058d7 	.word	0x080058d7
 8005844:	08005959 	.word	0x08005959
 8005848:	08005959 	.word	0x08005959
 800584c:	08005959 	.word	0x08005959
 8005850:	08005917 	.word	0x08005917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fa0a 	bl	8005c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0208 	orr.w	r2, r2, #8
 800586e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0204 	bic.w	r2, r2, #4
 800587e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6999      	ldr	r1, [r3, #24]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	619a      	str	r2, [r3, #24]
      break;
 8005892:	e062      	b.n	800595a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fa5a 	bl	8005d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6999      	ldr	r1, [r3, #24]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	021a      	lsls	r2, r3, #8
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	619a      	str	r2, [r3, #24]
      break;
 80058d4:	e041      	b.n	800595a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 faaf 	bl	8005e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0208 	orr.w	r2, r2, #8
 80058f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0204 	bic.w	r2, r2, #4
 8005900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69d9      	ldr	r1, [r3, #28]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	61da      	str	r2, [r3, #28]
      break;
 8005914:	e021      	b.n	800595a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fb03 	bl	8005f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69d9      	ldr	r1, [r3, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	021a      	lsls	r2, r3, #8
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	61da      	str	r2, [r3, #28]
      break;
 8005956:	e000      	b.n	800595a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005958:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_TIM_ConfigClockSource+0x18>
 8005988:	2302      	movs	r3, #2
 800598a:	e0a6      	b.n	8005ada <HAL_TIM_ConfigClockSource+0x166>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	d067      	beq.n	8005a94 <HAL_TIM_ConfigClockSource+0x120>
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d80b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x6c>
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d073      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0x140>
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d802      	bhi.n	80059d6 <HAL_TIM_ConfigClockSource+0x62>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d06f      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059d4:	e078      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d06c      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0x140>
 80059da:	2b30      	cmp	r3, #48	; 0x30
 80059dc:	d06a      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80059de:	e073      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059e0:	2b70      	cmp	r3, #112	; 0x70
 80059e2:	d00d      	beq.n	8005a00 <HAL_TIM_ConfigClockSource+0x8c>
 80059e4:	2b70      	cmp	r3, #112	; 0x70
 80059e6:	d804      	bhi.n	80059f2 <HAL_TIM_ConfigClockSource+0x7e>
 80059e8:	2b50      	cmp	r3, #80	; 0x50
 80059ea:	d033      	beq.n	8005a54 <HAL_TIM_ConfigClockSource+0xe0>
 80059ec:	2b60      	cmp	r3, #96	; 0x60
 80059ee:	d041      	beq.n	8005a74 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80059f0:	e06a      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f6:	d066      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x152>
 80059f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fc:	d017      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80059fe:	e063      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	6899      	ldr	r1, [r3, #8]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f000 fb5a 	bl	80060c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	609a      	str	r2, [r3, #8]
      break;
 8005a2c:	e04c      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6899      	ldr	r1, [r3, #8]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f000 fb43 	bl	80060c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a50:	609a      	str	r2, [r3, #8]
      break;
 8005a52:	e039      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	6859      	ldr	r1, [r3, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	461a      	mov	r2, r3
 8005a62:	f000 fab7 	bl	8005fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2150      	movs	r1, #80	; 0x50
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fb10 	bl	8006092 <TIM_ITRx_SetConfig>
      break;
 8005a72:	e029      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6859      	ldr	r1, [r3, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	461a      	mov	r2, r3
 8005a82:	f000 fad6 	bl	8006032 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2160      	movs	r1, #96	; 0x60
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fb00 	bl	8006092 <TIM_ITRx_SetConfig>
      break;
 8005a92:	e019      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6859      	ldr	r1, [r3, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f000 fa97 	bl	8005fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2140      	movs	r1, #64	; 0x40
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 faf0 	bl	8006092 <TIM_ITRx_SetConfig>
      break;
 8005ab2:	e009      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f000 fae7 	bl	8006092 <TIM_ITRx_SetConfig>
      break;
 8005ac4:	e000      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005ac6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a40      	ldr	r2, [pc, #256]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d00f      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3d      	ldr	r2, [pc, #244]	; (8005c4c <TIM_Base_SetConfig+0x118>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00b      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3c      	ldr	r2, [pc, #240]	; (8005c50 <TIM_Base_SetConfig+0x11c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d007      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3b      	ldr	r2, [pc, #236]	; (8005c54 <TIM_Base_SetConfig+0x120>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3a      	ldr	r2, [pc, #232]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d02b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d027      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2c      	ldr	r2, [pc, #176]	; (8005c4c <TIM_Base_SetConfig+0x118>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d023      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <TIM_Base_SetConfig+0x11c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2a      	ldr	r2, [pc, #168]	; (8005c54 <TIM_Base_SetConfig+0x120>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a29      	ldr	r2, [pc, #164]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d017      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a28      	ldr	r2, [pc, #160]	; (8005c5c <TIM_Base_SetConfig+0x128>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a27      	ldr	r2, [pc, #156]	; (8005c60 <TIM_Base_SetConfig+0x12c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00f      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a26      	ldr	r2, [pc, #152]	; (8005c64 <TIM_Base_SetConfig+0x130>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a25      	ldr	r2, [pc, #148]	; (8005c68 <TIM_Base_SetConfig+0x134>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d007      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <TIM_Base_SetConfig+0x138>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a23      	ldr	r2, [pc, #140]	; (8005c70 <TIM_Base_SetConfig+0x13c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d108      	bne.n	8005bf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_Base_SetConfig+0xf8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d103      	bne.n	8005c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	615a      	str	r2, [r3, #20]
}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40010400 	.word	0x40010400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	40014400 	.word	0x40014400
 8005c64:	40014800 	.word	0x40014800
 8005c68:	40001800 	.word	0x40001800
 8005c6c:	40001c00 	.word	0x40001c00
 8005c70:	40002000 	.word	0x40002000

08005c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f023 0201 	bic.w	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f023 0302 	bic.w	r3, r3, #2
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a20      	ldr	r2, [pc, #128]	; (8005d4c <TIM_OC1_SetConfig+0xd8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_OC1_SetConfig+0x64>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a1f      	ldr	r2, [pc, #124]	; (8005d50 <TIM_OC1_SetConfig+0xdc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d10c      	bne.n	8005cf2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0308 	bic.w	r3, r3, #8
 8005cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 0304 	bic.w	r3, r3, #4
 8005cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <TIM_OC1_SetConfig+0xd8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_OC1_SetConfig+0x8e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <TIM_OC1_SetConfig+0xdc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d111      	bne.n	8005d26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	621a      	str	r2, [r3, #32]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40010400 	.word	0x40010400

08005d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0210 	bic.w	r2, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f023 0320 	bic.w	r3, r3, #32
 8005d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <TIM_OC2_SetConfig+0xe4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d003      	beq.n	8005dbc <TIM_OC2_SetConfig+0x68>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a21      	ldr	r2, [pc, #132]	; (8005e3c <TIM_OC2_SetConfig+0xe8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d10d      	bne.n	8005dd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a17      	ldr	r2, [pc, #92]	; (8005e38 <TIM_OC2_SetConfig+0xe4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_OC2_SetConfig+0x94>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a16      	ldr	r2, [pc, #88]	; (8005e3c <TIM_OC2_SetConfig+0xe8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d113      	bne.n	8005e10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40010400 	.word	0x40010400

08005e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a21      	ldr	r2, [pc, #132]	; (8005f20 <TIM_OC3_SetConfig+0xe0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d003      	beq.n	8005ea6 <TIM_OC3_SetConfig+0x66>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <TIM_OC3_SetConfig+0xe4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d10d      	bne.n	8005ec2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <TIM_OC3_SetConfig+0xe0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_OC3_SetConfig+0x92>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <TIM_OC3_SetConfig+0xe4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d113      	bne.n	8005efa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	621a      	str	r2, [r3, #32]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40010400 	.word	0x40010400

08005f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	031b      	lsls	r3, r3, #12
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a12      	ldr	r2, [pc, #72]	; (8005fcc <TIM_OC4_SetConfig+0xa4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_OC4_SetConfig+0x68>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a11      	ldr	r2, [pc, #68]	; (8005fd0 <TIM_OC4_SetConfig+0xa8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d109      	bne.n	8005fa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	019b      	lsls	r3, r3, #6
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	621a      	str	r2, [r3, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40010400 	.word	0x40010400

08005fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0201 	bic.w	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f023 030a 	bic.w	r3, r3, #10
 8006010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006032:	b480      	push	{r7}
 8006034:	b087      	sub	sp, #28
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f023 0210 	bic.w	r2, r3, #16
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800605c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	031b      	lsls	r3, r3, #12
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800606e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f043 0307 	orr.w	r3, r3, #7
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	609a      	str	r2, [r3, #8]
}
 80060bc:	bf00      	nop
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	021a      	lsls	r2, r3, #8
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	609a      	str	r2, [r3, #8]
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	2201      	movs	r2, #1
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1a      	ldr	r2, [r3, #32]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	43db      	mvns	r3, r3
 800612a:	401a      	ands	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	fa01 f303 	lsl.w	r3, r1, r3
 8006140:	431a      	orrs	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006168:	2302      	movs	r3, #2
 800616a:	e05a      	b.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a21      	ldr	r2, [pc, #132]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d022      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d01d      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d018      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1a      	ldr	r2, [pc, #104]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d009      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a17      	ldr	r2, [pc, #92]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a15      	ldr	r2, [pc, #84]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10c      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40010000 	.word	0x40010000
 8006234:	40000400 	.word	0x40000400
 8006238:	40000800 	.word	0x40000800
 800623c:	40000c00 	.word	0x40000c00
 8006240:	40010400 	.word	0x40010400
 8006244:	40014000 	.word	0x40014000
 8006248:	40001800 	.word	0x40001800

0800624c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e03f      	b.n	8006306 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fa ffb4 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2224      	movs	r2, #36	; 0x24
 80062a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f9d9 	bl	8006670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	4613      	mov	r3, r2
 800631c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b20      	cmp	r3, #32
 8006328:	d166      	bne.n	80063f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <HAL_UART_Receive_DMA+0x26>
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e05f      	b.n	80063fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_UART_Receive_DMA+0x38>
 8006344:	2302      	movs	r3, #2
 8006346:	e058      	b.n	80063fa <HAL_UART_Receive_DMA+0xea>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2222      	movs	r2, #34	; 0x22
 8006366:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	4a25      	ldr	r2, [pc, #148]	; (8006404 <HAL_UART_Receive_DMA+0xf4>)
 8006370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	4a24      	ldr	r2, [pc, #144]	; (8006408 <HAL_UART_Receive_DMA+0xf8>)
 8006378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637e:	4a23      	ldr	r2, [pc, #140]	; (800640c <HAL_UART_Receive_DMA+0xfc>)
 8006380:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	2200      	movs	r2, #0
 8006388:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800638a:	f107 0308 	add.w	r3, r7, #8
 800638e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	88fb      	ldrh	r3, [r7, #6]
 80063a2:	f7fb fab3 	bl	800190c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695a      	ldr	r2, [r3, #20]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e000      	b.n	80063fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
  }
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	080064ef 	.word	0x080064ef
 8006408:	08006557 	.word	0x08006557
 800640c:	08006573 	.word	0x08006573

08006410 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b80      	cmp	r3, #128	; 0x80
 8006428:	bf0c      	ite	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	2300      	movne	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b21      	cmp	r3, #33	; 0x21
 800643c:	d116      	bne.n	800646c <HAL_UART_DMAStop+0x5c>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d013      	beq.n	800646c <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006452:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	4618      	mov	r0, r3
 8006462:	f7fb faab 	bl	80019bc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f8cd 	bl	8006606 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b22      	cmp	r3, #34	; 0x22
 800648c:	d116      	bne.n	80064bc <HAL_UART_DMAStop+0xac>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fb fa83 	bl	80019bc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f8bb 	bl	8006632 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d11e      	bne.n	8006548 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800651e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695a      	ldr	r2, [r3, #20]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695a      	ldr	r2, [r3, #20]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800653e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7fa fcaf 	bl	8000eac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff ffae 	bl	80064c6 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b80      	cmp	r3, #128	; 0x80
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b21      	cmp	r3, #33	; 0x21
 80065a4:	d108      	bne.n	80065b8 <UART_DMAError+0x46>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2200      	movs	r2, #0
 80065b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80065b2:	68b8      	ldr	r0, [r7, #8]
 80065b4:	f000 f827 	bl	8006606 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	bf0c      	ite	eq
 80065c6:	2301      	moveq	r3, #1
 80065c8:	2300      	movne	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b22      	cmp	r3, #34	; 0x22
 80065d8:	d108      	bne.n	80065ec <UART_DMAError+0x7a>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80065e6:	68b8      	ldr	r0, [r7, #8]
 80065e8:	f000 f823 	bl	8006632 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f0:	f043 0210 	orr.w	r2, r3, #16
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065f8:	68b8      	ldr	r0, [r7, #8]
 80065fa:	f7ff ff6e 	bl	80064da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800661c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006648:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
	...

08006670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80066b2:	f023 030c 	bic.w	r3, r3, #12
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	430b      	orrs	r3, r1
 80066be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066de:	f040 818b 	bne.w	80069f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4ac1      	ldr	r2, [pc, #772]	; (80069ec <UART_SetConfig+0x37c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d005      	beq.n	80066f8 <UART_SetConfig+0x88>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4abf      	ldr	r2, [pc, #764]	; (80069f0 <UART_SetConfig+0x380>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	f040 80bd 	bne.w	8006872 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066f8:	f7fe fac8 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 80066fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	461d      	mov	r5, r3
 8006702:	f04f 0600 	mov.w	r6, #0
 8006706:	46a8      	mov	r8, r5
 8006708:	46b1      	mov	r9, r6
 800670a:	eb18 0308 	adds.w	r3, r8, r8
 800670e:	eb49 0409 	adc.w	r4, r9, r9
 8006712:	4698      	mov	r8, r3
 8006714:	46a1      	mov	r9, r4
 8006716:	eb18 0805 	adds.w	r8, r8, r5
 800671a:	eb49 0906 	adc.w	r9, r9, r6
 800671e:	f04f 0100 	mov.w	r1, #0
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800672a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800672e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006732:	4688      	mov	r8, r1
 8006734:	4691      	mov	r9, r2
 8006736:	eb18 0005 	adds.w	r0, r8, r5
 800673a:	eb49 0106 	adc.w	r1, r9, r6
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	461d      	mov	r5, r3
 8006744:	f04f 0600 	mov.w	r6, #0
 8006748:	196b      	adds	r3, r5, r5
 800674a:	eb46 0406 	adc.w	r4, r6, r6
 800674e:	461a      	mov	r2, r3
 8006750:	4623      	mov	r3, r4
 8006752:	f7f9 fd57 	bl	8000204 <__aeabi_uldivmod>
 8006756:	4603      	mov	r3, r0
 8006758:	460c      	mov	r4, r1
 800675a:	461a      	mov	r2, r3
 800675c:	4ba5      	ldr	r3, [pc, #660]	; (80069f4 <UART_SetConfig+0x384>)
 800675e:	fba3 2302 	umull	r2, r3, r3, r2
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	461d      	mov	r5, r3
 800676c:	f04f 0600 	mov.w	r6, #0
 8006770:	46a9      	mov	r9, r5
 8006772:	46b2      	mov	sl, r6
 8006774:	eb19 0309 	adds.w	r3, r9, r9
 8006778:	eb4a 040a 	adc.w	r4, sl, sl
 800677c:	4699      	mov	r9, r3
 800677e:	46a2      	mov	sl, r4
 8006780:	eb19 0905 	adds.w	r9, r9, r5
 8006784:	eb4a 0a06 	adc.w	sl, sl, r6
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006794:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006798:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800679c:	4689      	mov	r9, r1
 800679e:	4692      	mov	sl, r2
 80067a0:	eb19 0005 	adds.w	r0, r9, r5
 80067a4:	eb4a 0106 	adc.w	r1, sl, r6
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	461d      	mov	r5, r3
 80067ae:	f04f 0600 	mov.w	r6, #0
 80067b2:	196b      	adds	r3, r5, r5
 80067b4:	eb46 0406 	adc.w	r4, r6, r6
 80067b8:	461a      	mov	r2, r3
 80067ba:	4623      	mov	r3, r4
 80067bc:	f7f9 fd22 	bl	8000204 <__aeabi_uldivmod>
 80067c0:	4603      	mov	r3, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	461a      	mov	r2, r3
 80067c6:	4b8b      	ldr	r3, [pc, #556]	; (80069f4 <UART_SetConfig+0x384>)
 80067c8:	fba3 1302 	umull	r1, r3, r3, r2
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	2164      	movs	r1, #100	; 0x64
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	3332      	adds	r3, #50	; 0x32
 80067da:	4a86      	ldr	r2, [pc, #536]	; (80069f4 <UART_SetConfig+0x384>)
 80067dc:	fba2 2303 	umull	r2, r3, r2, r3
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067e8:	4498      	add	r8, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	461d      	mov	r5, r3
 80067ee:	f04f 0600 	mov.w	r6, #0
 80067f2:	46a9      	mov	r9, r5
 80067f4:	46b2      	mov	sl, r6
 80067f6:	eb19 0309 	adds.w	r3, r9, r9
 80067fa:	eb4a 040a 	adc.w	r4, sl, sl
 80067fe:	4699      	mov	r9, r3
 8006800:	46a2      	mov	sl, r4
 8006802:	eb19 0905 	adds.w	r9, r9, r5
 8006806:	eb4a 0a06 	adc.w	sl, sl, r6
 800680a:	f04f 0100 	mov.w	r1, #0
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006816:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800681a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800681e:	4689      	mov	r9, r1
 8006820:	4692      	mov	sl, r2
 8006822:	eb19 0005 	adds.w	r0, r9, r5
 8006826:	eb4a 0106 	adc.w	r1, sl, r6
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	461d      	mov	r5, r3
 8006830:	f04f 0600 	mov.w	r6, #0
 8006834:	196b      	adds	r3, r5, r5
 8006836:	eb46 0406 	adc.w	r4, r6, r6
 800683a:	461a      	mov	r2, r3
 800683c:	4623      	mov	r3, r4
 800683e:	f7f9 fce1 	bl	8000204 <__aeabi_uldivmod>
 8006842:	4603      	mov	r3, r0
 8006844:	460c      	mov	r4, r1
 8006846:	461a      	mov	r2, r3
 8006848:	4b6a      	ldr	r3, [pc, #424]	; (80069f4 <UART_SetConfig+0x384>)
 800684a:	fba3 1302 	umull	r1, r3, r3, r2
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	2164      	movs	r1, #100	; 0x64
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	3332      	adds	r3, #50	; 0x32
 800685c:	4a65      	ldr	r2, [pc, #404]	; (80069f4 <UART_SetConfig+0x384>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	f003 0207 	and.w	r2, r3, #7
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4442      	add	r2, r8
 800686e:	609a      	str	r2, [r3, #8]
 8006870:	e26f      	b.n	8006d52 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006872:	f7fe f9f7 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 8006876:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	461d      	mov	r5, r3
 800687c:	f04f 0600 	mov.w	r6, #0
 8006880:	46a8      	mov	r8, r5
 8006882:	46b1      	mov	r9, r6
 8006884:	eb18 0308 	adds.w	r3, r8, r8
 8006888:	eb49 0409 	adc.w	r4, r9, r9
 800688c:	4698      	mov	r8, r3
 800688e:	46a1      	mov	r9, r4
 8006890:	eb18 0805 	adds.w	r8, r8, r5
 8006894:	eb49 0906 	adc.w	r9, r9, r6
 8006898:	f04f 0100 	mov.w	r1, #0
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068ac:	4688      	mov	r8, r1
 80068ae:	4691      	mov	r9, r2
 80068b0:	eb18 0005 	adds.w	r0, r8, r5
 80068b4:	eb49 0106 	adc.w	r1, r9, r6
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	461d      	mov	r5, r3
 80068be:	f04f 0600 	mov.w	r6, #0
 80068c2:	196b      	adds	r3, r5, r5
 80068c4:	eb46 0406 	adc.w	r4, r6, r6
 80068c8:	461a      	mov	r2, r3
 80068ca:	4623      	mov	r3, r4
 80068cc:	f7f9 fc9a 	bl	8000204 <__aeabi_uldivmod>
 80068d0:	4603      	mov	r3, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	461a      	mov	r2, r3
 80068d6:	4b47      	ldr	r3, [pc, #284]	; (80069f4 <UART_SetConfig+0x384>)
 80068d8:	fba3 2302 	umull	r2, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	461d      	mov	r5, r3
 80068e6:	f04f 0600 	mov.w	r6, #0
 80068ea:	46a9      	mov	r9, r5
 80068ec:	46b2      	mov	sl, r6
 80068ee:	eb19 0309 	adds.w	r3, r9, r9
 80068f2:	eb4a 040a 	adc.w	r4, sl, sl
 80068f6:	4699      	mov	r9, r3
 80068f8:	46a2      	mov	sl, r4
 80068fa:	eb19 0905 	adds.w	r9, r9, r5
 80068fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8006902:	f04f 0100 	mov.w	r1, #0
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800690e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006912:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006916:	4689      	mov	r9, r1
 8006918:	4692      	mov	sl, r2
 800691a:	eb19 0005 	adds.w	r0, r9, r5
 800691e:	eb4a 0106 	adc.w	r1, sl, r6
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	461d      	mov	r5, r3
 8006928:	f04f 0600 	mov.w	r6, #0
 800692c:	196b      	adds	r3, r5, r5
 800692e:	eb46 0406 	adc.w	r4, r6, r6
 8006932:	461a      	mov	r2, r3
 8006934:	4623      	mov	r3, r4
 8006936:	f7f9 fc65 	bl	8000204 <__aeabi_uldivmod>
 800693a:	4603      	mov	r3, r0
 800693c:	460c      	mov	r4, r1
 800693e:	461a      	mov	r2, r3
 8006940:	4b2c      	ldr	r3, [pc, #176]	; (80069f4 <UART_SetConfig+0x384>)
 8006942:	fba3 1302 	umull	r1, r3, r3, r2
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	2164      	movs	r1, #100	; 0x64
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	3332      	adds	r3, #50	; 0x32
 8006954:	4a27      	ldr	r2, [pc, #156]	; (80069f4 <UART_SetConfig+0x384>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006962:	4498      	add	r8, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	461d      	mov	r5, r3
 8006968:	f04f 0600 	mov.w	r6, #0
 800696c:	46a9      	mov	r9, r5
 800696e:	46b2      	mov	sl, r6
 8006970:	eb19 0309 	adds.w	r3, r9, r9
 8006974:	eb4a 040a 	adc.w	r4, sl, sl
 8006978:	4699      	mov	r9, r3
 800697a:	46a2      	mov	sl, r4
 800697c:	eb19 0905 	adds.w	r9, r9, r5
 8006980:	eb4a 0a06 	adc.w	sl, sl, r6
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006990:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006994:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006998:	4689      	mov	r9, r1
 800699a:	4692      	mov	sl, r2
 800699c:	eb19 0005 	adds.w	r0, r9, r5
 80069a0:	eb4a 0106 	adc.w	r1, sl, r6
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	461d      	mov	r5, r3
 80069aa:	f04f 0600 	mov.w	r6, #0
 80069ae:	196b      	adds	r3, r5, r5
 80069b0:	eb46 0406 	adc.w	r4, r6, r6
 80069b4:	461a      	mov	r2, r3
 80069b6:	4623      	mov	r3, r4
 80069b8:	f7f9 fc24 	bl	8000204 <__aeabi_uldivmod>
 80069bc:	4603      	mov	r3, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	461a      	mov	r2, r3
 80069c2:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <UART_SetConfig+0x384>)
 80069c4:	fba3 1302 	umull	r1, r3, r3, r2
 80069c8:	095b      	lsrs	r3, r3, #5
 80069ca:	2164      	movs	r1, #100	; 0x64
 80069cc:	fb01 f303 	mul.w	r3, r1, r3
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	3332      	adds	r3, #50	; 0x32
 80069d6:	4a07      	ldr	r2, [pc, #28]	; (80069f4 <UART_SetConfig+0x384>)
 80069d8:	fba2 2303 	umull	r2, r3, r2, r3
 80069dc:	095b      	lsrs	r3, r3, #5
 80069de:	f003 0207 	and.w	r2, r3, #7
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4442      	add	r2, r8
 80069e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069ea:	e1b2      	b.n	8006d52 <UART_SetConfig+0x6e2>
 80069ec:	40011000 	.word	0x40011000
 80069f0:	40011400 	.word	0x40011400
 80069f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4ad7      	ldr	r2, [pc, #860]	; (8006d5c <UART_SetConfig+0x6ec>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d005      	beq.n	8006a0e <UART_SetConfig+0x39e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4ad6      	ldr	r2, [pc, #856]	; (8006d60 <UART_SetConfig+0x6f0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	f040 80d1 	bne.w	8006bb0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a0e:	f7fe f93d 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 8006a12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	469a      	mov	sl, r3
 8006a18:	f04f 0b00 	mov.w	fp, #0
 8006a1c:	46d0      	mov	r8, sl
 8006a1e:	46d9      	mov	r9, fp
 8006a20:	eb18 0308 	adds.w	r3, r8, r8
 8006a24:	eb49 0409 	adc.w	r4, r9, r9
 8006a28:	4698      	mov	r8, r3
 8006a2a:	46a1      	mov	r9, r4
 8006a2c:	eb18 080a 	adds.w	r8, r8, sl
 8006a30:	eb49 090b 	adc.w	r9, r9, fp
 8006a34:	f04f 0100 	mov.w	r1, #0
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a48:	4688      	mov	r8, r1
 8006a4a:	4691      	mov	r9, r2
 8006a4c:	eb1a 0508 	adds.w	r5, sl, r8
 8006a50:	eb4b 0609 	adc.w	r6, fp, r9
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	f04f 0400 	mov.w	r4, #0
 8006a66:	0094      	lsls	r4, r2, #2
 8006a68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a6c:	008b      	lsls	r3, r1, #2
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4623      	mov	r3, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	4631      	mov	r1, r6
 8006a76:	f7f9 fbc5 	bl	8000204 <__aeabi_uldivmod>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4bb8      	ldr	r3, [pc, #736]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006a82:	fba3 2302 	umull	r2, r3, r3, r2
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	469b      	mov	fp, r3
 8006a90:	f04f 0c00 	mov.w	ip, #0
 8006a94:	46d9      	mov	r9, fp
 8006a96:	46e2      	mov	sl, ip
 8006a98:	eb19 0309 	adds.w	r3, r9, r9
 8006a9c:	eb4a 040a 	adc.w	r4, sl, sl
 8006aa0:	4699      	mov	r9, r3
 8006aa2:	46a2      	mov	sl, r4
 8006aa4:	eb19 090b 	adds.w	r9, r9, fp
 8006aa8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006aac:	f04f 0100 	mov.w	r1, #0
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ab8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006abc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ac0:	4689      	mov	r9, r1
 8006ac2:	4692      	mov	sl, r2
 8006ac4:	eb1b 0509 	adds.w	r5, fp, r9
 8006ac8:	eb4c 060a 	adc.w	r6, ip, sl
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	f04f 0400 	mov.w	r4, #0
 8006ade:	0094      	lsls	r4, r2, #2
 8006ae0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ae4:	008b      	lsls	r3, r1, #2
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4623      	mov	r3, r4
 8006aea:	4628      	mov	r0, r5
 8006aec:	4631      	mov	r1, r6
 8006aee:	f7f9 fb89 	bl	8000204 <__aeabi_uldivmod>
 8006af2:	4603      	mov	r3, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	461a      	mov	r2, r3
 8006af8:	4b9a      	ldr	r3, [pc, #616]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006afa:	fba3 1302 	umull	r1, r3, r3, r2
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	2164      	movs	r1, #100	; 0x64
 8006b02:	fb01 f303 	mul.w	r3, r1, r3
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	3332      	adds	r3, #50	; 0x32
 8006b0c:	4a95      	ldr	r2, [pc, #596]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b18:	4498      	add	r8, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	469b      	mov	fp, r3
 8006b1e:	f04f 0c00 	mov.w	ip, #0
 8006b22:	46d9      	mov	r9, fp
 8006b24:	46e2      	mov	sl, ip
 8006b26:	eb19 0309 	adds.w	r3, r9, r9
 8006b2a:	eb4a 040a 	adc.w	r4, sl, sl
 8006b2e:	4699      	mov	r9, r3
 8006b30:	46a2      	mov	sl, r4
 8006b32:	eb19 090b 	adds.w	r9, r9, fp
 8006b36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b3a:	f04f 0100 	mov.w	r1, #0
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b4e:	4689      	mov	r9, r1
 8006b50:	4692      	mov	sl, r2
 8006b52:	eb1b 0509 	adds.w	r5, fp, r9
 8006b56:	eb4c 060a 	adc.w	r6, ip, sl
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	f04f 0400 	mov.w	r4, #0
 8006b6c:	0094      	lsls	r4, r2, #2
 8006b6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b72:	008b      	lsls	r3, r1, #2
 8006b74:	461a      	mov	r2, r3
 8006b76:	4623      	mov	r3, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	f7f9 fb42 	bl	8000204 <__aeabi_uldivmod>
 8006b80:	4603      	mov	r3, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	461a      	mov	r2, r3
 8006b86:	4b77      	ldr	r3, [pc, #476]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006b88:	fba3 1302 	umull	r1, r3, r3, r2
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	2164      	movs	r1, #100	; 0x64
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	3332      	adds	r3, #50	; 0x32
 8006b9a:	4a72      	ldr	r2, [pc, #456]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba0:	095b      	lsrs	r3, r3, #5
 8006ba2:	f003 020f 	and.w	r2, r3, #15
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4442      	add	r2, r8
 8006bac:	609a      	str	r2, [r3, #8]
 8006bae:	e0d0      	b.n	8006d52 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bb0:	f7fe f858 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 8006bb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	469a      	mov	sl, r3
 8006bba:	f04f 0b00 	mov.w	fp, #0
 8006bbe:	46d0      	mov	r8, sl
 8006bc0:	46d9      	mov	r9, fp
 8006bc2:	eb18 0308 	adds.w	r3, r8, r8
 8006bc6:	eb49 0409 	adc.w	r4, r9, r9
 8006bca:	4698      	mov	r8, r3
 8006bcc:	46a1      	mov	r9, r4
 8006bce:	eb18 080a 	adds.w	r8, r8, sl
 8006bd2:	eb49 090b 	adc.w	r9, r9, fp
 8006bd6:	f04f 0100 	mov.w	r1, #0
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006be2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006be6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bea:	4688      	mov	r8, r1
 8006bec:	4691      	mov	r9, r2
 8006bee:	eb1a 0508 	adds.w	r5, sl, r8
 8006bf2:	eb4b 0609 	adc.w	r6, fp, r9
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	f04f 0400 	mov.w	r4, #0
 8006c08:	0094      	lsls	r4, r2, #2
 8006c0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c0e:	008b      	lsls	r3, r1, #2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4623      	mov	r3, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	4631      	mov	r1, r6
 8006c18:	f7f9 faf4 	bl	8000204 <__aeabi_uldivmod>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b50      	ldr	r3, [pc, #320]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006c24:	fba3 2302 	umull	r2, r3, r3, r2
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	469b      	mov	fp, r3
 8006c32:	f04f 0c00 	mov.w	ip, #0
 8006c36:	46d9      	mov	r9, fp
 8006c38:	46e2      	mov	sl, ip
 8006c3a:	eb19 0309 	adds.w	r3, r9, r9
 8006c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8006c42:	4699      	mov	r9, r3
 8006c44:	46a2      	mov	sl, r4
 8006c46:	eb19 090b 	adds.w	r9, r9, fp
 8006c4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c4e:	f04f 0100 	mov.w	r1, #0
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c62:	4689      	mov	r9, r1
 8006c64:	4692      	mov	sl, r2
 8006c66:	eb1b 0509 	adds.w	r5, fp, r9
 8006c6a:	eb4c 060a 	adc.w	r6, ip, sl
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4619      	mov	r1, r3
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	f04f 0400 	mov.w	r4, #0
 8006c80:	0094      	lsls	r4, r2, #2
 8006c82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c86:	008b      	lsls	r3, r1, #2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	4631      	mov	r1, r6
 8006c90:	f7f9 fab8 	bl	8000204 <__aeabi_uldivmod>
 8006c94:	4603      	mov	r3, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4b32      	ldr	r3, [pc, #200]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	2164      	movs	r1, #100	; 0x64
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	3332      	adds	r3, #50	; 0x32
 8006cae:	4a2d      	ldr	r2, [pc, #180]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cba:	4498      	add	r8, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	469b      	mov	fp, r3
 8006cc0:	f04f 0c00 	mov.w	ip, #0
 8006cc4:	46d9      	mov	r9, fp
 8006cc6:	46e2      	mov	sl, ip
 8006cc8:	eb19 0309 	adds.w	r3, r9, r9
 8006ccc:	eb4a 040a 	adc.w	r4, sl, sl
 8006cd0:	4699      	mov	r9, r3
 8006cd2:	46a2      	mov	sl, r4
 8006cd4:	eb19 090b 	adds.w	r9, r9, fp
 8006cd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cdc:	f04f 0100 	mov.w	r1, #0
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ce8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cf0:	4689      	mov	r9, r1
 8006cf2:	4692      	mov	sl, r2
 8006cf4:	eb1b 0509 	adds.w	r5, fp, r9
 8006cf8:	eb4c 060a 	adc.w	r6, ip, sl
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	4619      	mov	r1, r3
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	f04f 0400 	mov.w	r4, #0
 8006d0e:	0094      	lsls	r4, r2, #2
 8006d10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d14:	008b      	lsls	r3, r1, #2
 8006d16:	461a      	mov	r2, r3
 8006d18:	4623      	mov	r3, r4
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	f7f9 fa71 	bl	8000204 <__aeabi_uldivmod>
 8006d22:	4603      	mov	r3, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	461a      	mov	r2, r3
 8006d28:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	2164      	movs	r1, #100	; 0x64
 8006d32:	fb01 f303 	mul.w	r3, r1, r3
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	3332      	adds	r3, #50	; 0x32
 8006d3c:	4a09      	ldr	r2, [pc, #36]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	f003 020f 	and.w	r2, r3, #15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4442      	add	r2, r8
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	e7ff      	b.n	8006d52 <UART_SetConfig+0x6e2>
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5c:	40011000 	.word	0x40011000
 8006d60:	40011400 	.word	0x40011400
 8006d64:	51eb851f 	.word	0x51eb851f

08006d68 <__libc_init_array>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	4e0d      	ldr	r6, [pc, #52]	; (8006da0 <__libc_init_array+0x38>)
 8006d6c:	4c0d      	ldr	r4, [pc, #52]	; (8006da4 <__libc_init_array+0x3c>)
 8006d6e:	1ba4      	subs	r4, r4, r6
 8006d70:	10a4      	asrs	r4, r4, #2
 8006d72:	2500      	movs	r5, #0
 8006d74:	42a5      	cmp	r5, r4
 8006d76:	d109      	bne.n	8006d8c <__libc_init_array+0x24>
 8006d78:	4e0b      	ldr	r6, [pc, #44]	; (8006da8 <__libc_init_array+0x40>)
 8006d7a:	4c0c      	ldr	r4, [pc, #48]	; (8006dac <__libc_init_array+0x44>)
 8006d7c:	f000 f82c 	bl	8006dd8 <_init>
 8006d80:	1ba4      	subs	r4, r4, r6
 8006d82:	10a4      	asrs	r4, r4, #2
 8006d84:	2500      	movs	r5, #0
 8006d86:	42a5      	cmp	r5, r4
 8006d88:	d105      	bne.n	8006d96 <__libc_init_array+0x2e>
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d90:	4798      	blx	r3
 8006d92:	3501      	adds	r5, #1
 8006d94:	e7ee      	b.n	8006d74 <__libc_init_array+0xc>
 8006d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d9a:	4798      	blx	r3
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	e7f2      	b.n	8006d86 <__libc_init_array+0x1e>
 8006da0:	08006e18 	.word	0x08006e18
 8006da4:	08006e18 	.word	0x08006e18
 8006da8:	08006e18 	.word	0x08006e18
 8006dac:	08006e1c 	.word	0x08006e1c

08006db0 <memcpy>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	1e43      	subs	r3, r0, #1
 8006db4:	440a      	add	r2, r1
 8006db6:	4291      	cmp	r1, r2
 8006db8:	d100      	bne.n	8006dbc <memcpy+0xc>
 8006dba:	bd10      	pop	{r4, pc}
 8006dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dc4:	e7f7      	b.n	8006db6 <memcpy+0x6>

08006dc6 <memset>:
 8006dc6:	4402      	add	r2, r0
 8006dc8:	4603      	mov	r3, r0
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d100      	bne.n	8006dd0 <memset+0xa>
 8006dce:	4770      	bx	lr
 8006dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd4:	e7f9      	b.n	8006dca <memset+0x4>
	...

08006dd8 <_init>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr

08006de4 <_fini>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	bf00      	nop
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr
