
F446_dronas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000534c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005530  08005530  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005538  08005538  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000010  08005550  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08005550  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc1b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7e  00000000  00000000  0002fc5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00031be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00032b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022249  00000000  00000000  00033a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b63d  00000000  00000000  00055c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1a87  00000000  00000000  0006129e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004290  00000000  00000000  00132da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080054f8 	.word	0x080054f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080054f8 	.word	0x080054f8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MPU6050_Init>:

static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 800050c:	2254      	movs	r2, #84	; 0x54
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <MPU6050_Init+0x1c>)
 8000512:	f004 ffdd 	bl	80054d0 <memcpy>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000002c 	.word	0x2000002c

08000524 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR << 1);
 8000534:	23d0      	movs	r3, #208	; 0xd0
 8000536:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	b299      	uxth	r1, r3
 8000540:	f107 020c 	add.w	r2, r7, #12
 8000544:	230a      	movs	r3, #10
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2301      	movs	r3, #1
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <I2C_Read+0x4c>)
 800054c:	f001 ffd8 	bl	8002500 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	b299      	uxth	r1, r3
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	b29a      	uxth	r2, r3
 8000558:	2364      	movs	r3, #100	; 0x64
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	4613      	mov	r3, r2
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <I2C_Read+0x4c>)
 8000562:	f002 f8cb 	bl	80026fc <HAL_I2C_Master_Receive>
}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c

08000574 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR << 1);
 800058c:	23d0      	movs	r3, #208	; 0xd0
 800058e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2, 100);
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	b299      	uxth	r1, r3
 8000594:	f107 020c 	add.w	r2, r7, #12
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2302      	movs	r3, #2
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <I2C_Write8+0x38>)
 80005a0:	f001 ffae 	bl	8002500 <HAL_I2C_Master_Transmit>
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000002c 	.word	0x2000002c

080005b0 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	206b      	movs	r0, #107	; 0x6b
 80005c0:	f7ff ffd8 	bl	8000574 <I2C_Write8>
	HAL_Delay(100);
 80005c4:	2064      	movs	r0, #100	; 0x64
 80005c6:	f000 ff8d 	bl	80014e4 <HAL_Delay>
	Buffer = config->ClockSource & 0x07; //change the 7th bits of register
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config->Sleep_Mode_Bit << 6) & 0x40; // change only the 7th bit in the register
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	019b      	lsls	r3, r3, #6
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e0:	b25a      	sxtb	r2, r3
 80005e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	4619      	mov	r1, r3
 80005f0:	206b      	movs	r0, #107	; 0x6b
 80005f2:	f7ff ffbf 	bl	8000574 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80005f6:	2064      	movs	r0, #100	; 0x64
 80005f8:	f000 ff74 	bl	80014e4 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	78db      	ldrb	r3, [r3, #3]
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	4619      	mov	r1, r3
 800060e:	201a      	movs	r0, #26
 8000610:	f7ff ffb0 	bl	8000574 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	785b      	ldrb	r3, [r3, #1]
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 0318 	and.w	r3, r3, #24
 8000624:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4619      	mov	r1, r3
 800062a:	201b      	movs	r0, #27
 800062c:	f7ff ffa2 	bl	8000574 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 0318 	and.w	r3, r3, #24
 8000640:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	4619      	mov	r1, r3
 8000646:	201c      	movs	r0, #28
 8000648:	f7ff ff94 	bl	8000574 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 800064c:	2004      	movs	r0, #4
 800064e:	f000 f857 	bl	8000700 <MPU6050_Set_SMPRT_DIV>

	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d81a      	bhi.n	8000690 <MPU6050_Config+0xe0>
 800065a:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <MPU6050_Config+0xb0>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	08000671 	.word	0x08000671
 8000664:	08000679 	.word	0x08000679
 8000668:	08000681 	.word	0x08000681
 800066c:	08000689 	.word	0x08000689
	case AFS_SEL_2g:
		accelScalingFactor = (2000.0f / 32768.0f);
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MPU6050_Config+0x12c>)
 8000672:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MPU6050_Config+0x130>)
 8000674:	601a      	str	r2, [r3, #0]
		break;
 8000676:	e00c      	b.n	8000692 <MPU6050_Config+0xe2>

	case AFS_SEL_4g:
		accelScalingFactor = (4000.0f / 32768.0f);
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MPU6050_Config+0x12c>)
 800067a:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <MPU6050_Config+0x134>)
 800067c:	601a      	str	r2, [r3, #0]
		break;
 800067e:	e008      	b.n	8000692 <MPU6050_Config+0xe2>

	case AFS_SEL_8g:
		accelScalingFactor = (8000.0f / 32768.0f);
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MPU6050_Config+0x12c>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <MPU6050_Config+0x138>)
 8000684:	601a      	str	r2, [r3, #0]
		break;
 8000686:	e004      	b.n	8000692 <MPU6050_Config+0xe2>

	case AFS_SEL_16g:
		accelScalingFactor = (16000.0f / 32768.0f);
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MPU6050_Config+0x12c>)
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MPU6050_Config+0x13c>)
 800068c:	601a      	str	r2, [r3, #0]
		break;
 800068e:	e000      	b.n	8000692 <MPU6050_Config+0xe2>

	default:
		break;
 8000690:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale) {
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d81a      	bhi.n	80006d0 <MPU6050_Config+0x120>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <MPU6050_Config+0xf0>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b1 	.word	0x080006b1
 80006a4:	080006b9 	.word	0x080006b9
 80006a8:	080006c1 	.word	0x080006c1
 80006ac:	080006c9 	.word	0x080006c9
	case FS_SEL_250:
		gyroScalingFactor = 250.0f / 32768.0f;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MPU6050_Config+0x140>)
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <MPU6050_Config+0x144>)
 80006b4:	601a      	str	r2, [r3, #0]
		break;
 80006b6:	e00c      	b.n	80006d2 <MPU6050_Config+0x122>

	case FS_SEL_500:
		gyroScalingFactor = 500.0f / 32768.0f;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MPU6050_Config+0x140>)
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <MPU6050_Config+0x148>)
 80006bc:	601a      	str	r2, [r3, #0]
		break;
 80006be:	e008      	b.n	80006d2 <MPU6050_Config+0x122>

	case FS_SEL_1000:
		gyroScalingFactor = 1000.0f / 32768.0f;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MPU6050_Config+0x140>)
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <MPU6050_Config+0x14c>)
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e004      	b.n	80006d2 <MPU6050_Config+0x122>

	case FS_SEL_2000:
		gyroScalingFactor = 2000.0f / 32768.0f;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MPU6050_Config+0x140>)
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <MPU6050_Config+0x130>)
 80006cc:	601a      	str	r2, [r3, #0]
		break;
 80006ce:	e000      	b.n	80006d2 <MPU6050_Config+0x122>

	default:
		break;
 80006d0:	bf00      	nop
	}

}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000080 	.word	0x20000080
 80006e0:	3d7a0000 	.word	0x3d7a0000
 80006e4:	3dfa0000 	.word	0x3dfa0000
 80006e8:	3e7a0000 	.word	0x3e7a0000
 80006ec:	3efa0000 	.word	0x3efa0000
 80006f0:	20000084 	.word	0x20000084
 80006f4:	3bfa0000 	.word	0x3bfa0000
 80006f8:	3c7a0000 	.word	0x3c7a0000
 80006fc:	3cfa0000 	.word	0x3cfa0000

08000700 <MPU6050_Set_SMPRT_DIV>:
	I2C_Read(SMPLRT_DIV_REG, &Buffer, 1);
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4619      	mov	r1, r3
 800070e:	2019      	movs	r0, #25
 8000710:	f7ff ff30 	bl	8000574 <I2C_Write8>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MPU6050_Get_Accel_RawData>:
	I2C_Write8(CONFIG_REG, Buffer);

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1], 1);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	3301      	adds	r3, #1
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	203a      	movs	r0, #58	; 0x3a
 8000730:	f7ff fef8 	bl	8000524 <I2C_Read>
	if ((i2cBuf[1] && 0x01)) {
 8000734:	7f7b      	ldrb	r3, [r7, #29]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d04f      	beq.n	80007da <MPU6050_Get_Accel_RawData+0xbe>
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr, 6);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2206      	movs	r2, #6
 8000740:	4619      	mov	r1, r3
 8000742:	203b      	movs	r0, #59	; 0x3b
 8000744:	f7ff feee 	bl	8000524 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0] << 8) + AcceArr[1]); // x-Axis
 8000748:	7d3b      	ldrb	r3, [r7, #20]
 800074a:	b29b      	uxth	r3, r3
 800074c:	021b      	lsls	r3, r3, #8
 800074e:	b29a      	uxth	r2, r3
 8000750:	7d7b      	ldrb	r3, [r7, #21]
 8000752:	b29b      	uxth	r3, r3
 8000754:	4413      	add	r3, r2
 8000756:	b29b      	uxth	r3, r3
 8000758:	b21a      	sxth	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2] << 8) + AcceArr[3]); // y-Axis
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	b29b      	uxth	r3, r3
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b29a      	uxth	r2, r3
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	b29b      	uxth	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	b21a      	sxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4] << 8) + AcceArr[5]); // z-Axis
 8000774:	7e3b      	ldrb	r3, [r7, #24]
 8000776:	b29b      	uxth	r3, r3
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	b29a      	uxth	r2, r3
 800077c:	7e7b      	ldrb	r3, [r7, #25]
 800077e:	b29b      	uxth	r3, r3
 8000780:	4413      	add	r3, r2
 8000782:	b29b      	uxth	r3, r3
 8000784:	b21a      	sxth	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr, 6);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2206      	movs	r2, #6
 8000790:	4619      	mov	r1, r3
 8000792:	2043      	movs	r0, #67	; 0x43
 8000794:	f7ff fec6 	bl	8000524 <I2C_Read>
		GyroRW[0] = ((GyroArr[0] << 8) + GyroArr[1]);
 8000798:	7b3b      	ldrb	r3, [r7, #12]
 800079a:	b29b      	uxth	r3, r3
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	b29a      	uxth	r2, r3
 80007a0:	7b7b      	ldrb	r3, [r7, #13]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4413      	add	r3, r2
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b21a      	sxth	r2, r3
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MPU6050_Get_Accel_RawData+0xc8>)
 80007ac:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2] << 8) + GyroArr[3];
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	4413      	add	r3, r2
 80007bc:	b29b      	uxth	r3, r3
 80007be:	b21a      	sxth	r2, r3
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MPU6050_Get_Accel_RawData+0xc8>)
 80007c2:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4] << 8) + GyroArr[5]);
 80007c4:	7c3b      	ldrb	r3, [r7, #16]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	7c7b      	ldrb	r3, [r7, #17]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	4413      	add	r3, r2
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <MPU6050_Get_Accel_RawData+0xc8>)
 80007d8:	809a      	strh	r2, [r3, #4]
	}
}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000088 	.word	0x20000088

080007e8 <MPU6050_Get_Accel_Scale_AllData>:
	scaledDef->y = ((AccelRData.y + 0.0f) * accelScalingFactor);
	scaledDef->z = ((AccelRData.z + 0.0f) * accelScalingFactor);
}

void MPU6050_Get_Accel_Scale_AllData(ScaledData_Def *scaledDef,
		RawData_Def *AccelRData) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	MPU6050_Get_Accel_RawData(AccelRData);
 80007f2:	6838      	ldr	r0, [r7, #0]
 80007f4:	f7ff ff92 	bl	800071c <MPU6050_Get_Accel_RawData>

	//Accel Scale data
	scaledDef->x = ((AccelRData->x + 0.0f) * accelScalingFactor);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000806:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000874 <MPU6050_Get_Accel_Scale_AllData+0x8c>
 800080a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MPU6050_Get_Accel_Scale_AllData+0x90>)
 8000810:	edd3 7a00 	vldr	s15, [r3]
 8000814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData->y + 0.0f) * accelScalingFactor);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000824:	ee07 3a90 	vmov	s15, r3
 8000828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800082c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000874 <MPU6050_Get_Accel_Scale_AllData+0x8c>
 8000830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MPU6050_Get_Accel_Scale_AllData+0x90>)
 8000836:	edd3 7a00 	vldr	s15, [r3]
 800083a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData->z + 0.0f) * accelScalingFactor);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000852:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000874 <MPU6050_Get_Accel_Scale_AllData+0x8c>
 8000856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MPU6050_Get_Accel_Scale_AllData+0x90>)
 800085c:	edd3 7a00 	vldr	s15, [r3]
 8000860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	00000000 	.word	0x00000000
 8000878:	20000080 	.word	0x20000080

0800087c <HAL_GPIO_EXTI_Callback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
	if (hi2c->Instance == I2C2) {
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800088c:	d104      	bne.n	8000898 <HAL_GPIO_EXTI_Callback+0x1c>
		mFlags.accDataReady = 1;
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000890:	7813      	ldrb	r3, [r2, #0]
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	7013      	strb	r3, [r2, #0]
	}
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	20000000 	.word	0x20000000

080008a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008ae:	f000 fda7 	bl	8001400 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008b2:	f000 f90f 	bl	8000ad4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008b6:	f000 faaf 	bl	8000e18 <MX_GPIO_Init>
	MX_DMA_Init();
 80008ba:	f000 fa8d 	bl	8000dd8 <MX_DMA_Init>
	MX_TIM4_Init();
 80008be:	f000 f9a5 	bl	8000c0c <MX_TIM4_Init>
	MX_UART4_Init();
 80008c2:	f000 fa5f 	bl	8000d84 <MX_UART4_Init>
	MX_TIM14_Init();
 80008c6:	f000 fa39 	bl	8000d3c <MX_TIM14_Init>
	MX_I2C3_Init();
 80008ca:	f000 f971 	bl	8000bb0 <MX_I2C3_Init>
//	HAL_I2C_Mem_Read_DMA(&hi2c2, ((0x68 | 0) << 1), 0x75, 1, mDataRead,
//			6 + 2 + 6);
//	HAL_Delay(10);
	MPU_ConfigTypeDef myMpuConfig;

	MPU6050_Init(&hi2c3);
 80008ce:	4876      	ldr	r0, [pc, #472]	; (8000aa8 <main+0x200>)
 80008d0:	f7ff fe18 	bl	8000504 <MPU6050_Init>

	myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 80008d4:	2301      	movs	r3, #1
 80008d6:	70bb      	strb	r3, [r7, #2]
	myMpuConfig.ClockSource = Internal_8MHz;
 80008d8:	2300      	movs	r3, #0
 80008da:	703b      	strb	r3, [r7, #0]
	myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80008dc:	2301      	movs	r3, #1
 80008de:	70fb      	strb	r3, [r7, #3]
	myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80008e0:	2301      	movs	r3, #1
 80008e2:	707b      	strb	r3, [r7, #1]
	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 80008e4:	2300      	movs	r3, #0
 80008e6:	713b      	strb	r3, [r7, #4]
	MPU6050_Config(&myMpuConfig);
 80008e8:	463b      	mov	r3, r7
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe60 	bl	80005b0 <MPU6050_Config>

	I2C_Write8(INT_PIN_CFG, 1 << 4);		//clear flag after read
 80008f0:	2110      	movs	r1, #16
 80008f2:	2037      	movs	r0, #55	; 0x37
 80008f4:	f7ff fe3e 	bl	8000574 <I2C_Write8>
	I2C_Write8(INT_ENABLE_REG, 1);		//enable interupt
 80008f8:	2101      	movs	r1, #1
 80008fa:	2038      	movs	r0, #56	; 0x38
 80008fc:	f7ff fe3a 	bl	8000574 <I2C_Write8>

	//==== PWM init ================================================================
	HAL_TIM_Base_Start(&htim4);
 8000900:	486a      	ldr	r0, [pc, #424]	; (8000aac <main+0x204>)
 8000902:	f003 f93e 	bl	8003b82 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim14);	//apsauga nuo negaunamu duomenu
 8000906:	486a      	ldr	r0, [pc, #424]	; (8000ab0 <main+0x208>)
 8000908:	f003 f95f 	bl	8003bca <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	//BL
 800090c:	2100      	movs	r1, #0
 800090e:	4867      	ldr	r0, [pc, #412]	; (8000aac <main+0x204>)
 8000910:	f003 f9b4 	bl	8003c7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	//FL
 8000914:	2104      	movs	r1, #4
 8000916:	4865      	ldr	r0, [pc, #404]	; (8000aac <main+0x204>)
 8000918:	f003 f9b0 	bl	8003c7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	//BR
 800091c:	2108      	movs	r1, #8
 800091e:	4863      	ldr	r0, [pc, #396]	; (8000aac <main+0x204>)
 8000920:	f003 f9ac 	bl	8003c7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	//FR
 8000924:	210c      	movs	r1, #12
 8000926:	4861      	ldr	r0, [pc, #388]	; (8000aac <main+0x204>)
 8000928:	f003 f9a8 	bl	8003c7c <HAL_TIM_PWM_Start>

	//==== uart init ===============================================================
	HAL_UART_Receive_DMA(&huart4, mPaketas, 10);
 800092c:	220a      	movs	r2, #10
 800092e:	4961      	ldr	r1, [pc, #388]	; (8000ab4 <main+0x20c>)
 8000930:	4861      	ldr	r0, [pc, #388]	; (8000ab8 <main+0x210>)
 8000932:	f004 f87d 	bl	8004a30 <HAL_UART_Receive_DMA>
	HAL_Delay(1);
 8000936:	2001      	movs	r0, #1
 8000938:	f000 fdd4 	bl	80014e4 <HAL_Delay>
	HAL_UART_DMAStop(&huart4);
 800093c:	485e      	ldr	r0, [pc, #376]	; (8000ab8 <main+0x210>)
 800093e:	f004 f8f7 	bl	8004b30 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(&huart4, mPaketas, 10);
 8000942:	220a      	movs	r2, #10
 8000944:	495b      	ldr	r1, [pc, #364]	; (8000ab4 <main+0x20c>)
 8000946:	485c      	ldr	r0, [pc, #368]	; (8000ab8 <main+0x210>)
 8000948:	f004 f872 	bl	8004a30 <HAL_UART_Receive_DMA>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_Delay(50);
 800094c:	2032      	movs	r0, #50	; 0x32
 800094e:	f000 fdc9 	bl	80014e4 <HAL_Delay>

	while (1) {

		if (mFlags.accDataReady) {
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <main+0x214>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d008      	beq.n	8000972 <main+0xca>
			mFlags.accDataReady = 0;
 8000960:	4a56      	ldr	r2, [pc, #344]	; (8000abc <main+0x214>)
 8000962:	7813      	ldrb	r3, [r2, #0]
 8000964:	f36f 0341 	bfc	r3, #1, #1
 8000968:	7013      	strb	r3, [r2, #0]
			MPU6050_Get_Accel_Scale_AllData(&myAccelScaled, &myAccelRaw);
 800096a:	4955      	ldr	r1, [pc, #340]	; (8000ac0 <main+0x218>)
 800096c:	4855      	ldr	r0, [pc, #340]	; (8000ac4 <main+0x21c>)
 800096e:	f7ff ff3b 	bl	80007e8 <MPU6050_Get_Accel_Scale_AllData>
		}

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mFlags.dataUart) {
 8000972:	4b52      	ldr	r3, [pc, #328]	; (8000abc <main+0x214>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d0e8      	beq.n	8000952 <main+0xaa>
			mFlags.dataUart = 0;
 8000980:	4a4e      	ldr	r2, [pc, #312]	; (8000abc <main+0x214>)
 8000982:	7813      	ldrb	r3, [r2, #0]
 8000984:	f36f 0300 	bfc	r3, #0, #1
 8000988:	7013      	strb	r3, [r2, #0]
			if (mPaketas[0] == '3') {
 800098a:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <main+0x20c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b33      	cmp	r3, #51	; 0x33
 8000990:	d1df      	bne.n	8000952 <main+0xaa>
				if (mPaketas[9] == getCRC(mPaketas, 9)) {
 8000992:	4b48      	ldr	r3, [pc, #288]	; (8000ab4 <main+0x20c>)
 8000994:	7a5c      	ldrb	r4, [r3, #9]
 8000996:	2109      	movs	r1, #9
 8000998:	4846      	ldr	r0, [pc, #280]	; (8000ab4 <main+0x20c>)
 800099a:	f000 faa5 	bl	8000ee8 <getCRC>
 800099e:	4603      	mov	r3, r0
 80009a0:	429c      	cmp	r4, r3
 80009a2:	d177      	bne.n	8000a94 <main+0x1ec>
					TIM14->CNT = 0;
 80009a4:	4b48      	ldr	r3, [pc, #288]	; (8000ac8 <main+0x220>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24

					//TODO padaryt funkcija kuri patikrintu min max reiksmes tiesiog, koeficientu irasyma

					TIM4->CCR1 = ((float) (mPaketas[1] | (mPaketas[2] << 8))
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <main+0x20c>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <main+0x20c>)
 80009b2:	789b      	ldrb	r3, [r3, #2]
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	4313      	orrs	r3, r2
 80009b8:	ee07 3a90 	vmov	s15, r3
 80009bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* minStepCycles / maxSiunciamaReiksme
 80009c0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000acc <main+0x224>
 80009c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009c8:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000acc <main+0x224>
 80009cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
							+ minStepCycles);
 80009d0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000acc <main+0x224>
 80009d4:	ee77 7a87 	vadd.f32	s15, s15, s14
					TIM4->CCR1 = ((float) (mPaketas[1] | (mPaketas[2] << 8))
 80009d8:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <main+0x228>)
 80009da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009de:	ee17 2a90 	vmov	r2, s15
 80009e2:	635a      	str	r2, [r3, #52]	; 0x34
					TIM4->CCR2 = ((float) (mPaketas[3] | (mPaketas[4] << 8))
 80009e4:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <main+0x20c>)
 80009e6:	78db      	ldrb	r3, [r3, #3]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <main+0x20c>)
 80009ec:	791b      	ldrb	r3, [r3, #4]
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	4313      	orrs	r3, r2
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* minStepCycles / maxSiunciamaReiksme
 80009fa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000acc <main+0x224>
 80009fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a02:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000acc <main+0x224>
 8000a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
							+ minStepCycles);
 8000a0a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000acc <main+0x224>
 8000a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
					TIM4->CCR2 = ((float) (mPaketas[3] | (mPaketas[4] << 8))
 8000a12:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <main+0x228>)
 8000a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a18:	ee17 2a90 	vmov	r2, s15
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38
					TIM4->CCR3 = ((float) (mPaketas[5] | (mPaketas[6] << 8))
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <main+0x20c>)
 8000a20:	795b      	ldrb	r3, [r3, #5]
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <main+0x20c>)
 8000a26:	799b      	ldrb	r3, [r3, #6]
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* minStepCycles / maxSiunciamaReiksme
 8000a34:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000acc <main+0x224>
 8000a38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a3c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000acc <main+0x224>
 8000a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
							+ minStepCycles);
 8000a44:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000acc <main+0x224>
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
					TIM4->CCR3 = ((float) (mPaketas[5] | (mPaketas[6] << 8))
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <main+0x228>)
 8000a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a52:	ee17 2a90 	vmov	r2, s15
 8000a56:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM4->CCR4 = ((float) (mPaketas[7] | (mPaketas[8] << 8))
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <main+0x20c>)
 8000a5a:	79db      	ldrb	r3, [r3, #7]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <main+0x20c>)
 8000a60:	7a1b      	ldrb	r3, [r3, #8]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	4313      	orrs	r3, r2
 8000a66:	ee07 3a90 	vmov	s15, r3
 8000a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* minStepCycles / maxSiunciamaReiksme
 8000a6e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000acc <main+0x224>
 8000a72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a76:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000acc <main+0x224>
 8000a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
							+ minStepCycles);
 8000a7e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000acc <main+0x224>
 8000a82:	ee77 7a87 	vadd.f32	s15, s15, s14
					TIM4->CCR4 = ((float) (mPaketas[7] | (mPaketas[8] << 8))
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <main+0x228>)
 8000a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8c:	ee17 2a90 	vmov	r2, s15
 8000a90:	641a      	str	r2, [r3, #64]	; 0x40
 8000a92:	e75e      	b.n	8000952 <main+0xaa>

				} else {
					HAL_UART_DMAStop(&huart4);
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <main+0x210>)
 8000a96:	f004 f84b 	bl	8004b30 <HAL_UART_DMAStop>
					HAL_UART_Receive_DMA(&huart4, mPaketas, 10);
 8000a9a:	220a      	movs	r2, #10
 8000a9c:	4905      	ldr	r1, [pc, #20]	; (8000ab4 <main+0x20c>)
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <main+0x210>)
 8000aa0:	f003 ffc6 	bl	8004a30 <HAL_UART_Receive_DMA>
		if (mFlags.accDataReady) {
 8000aa4:	e755      	b.n	8000952 <main+0xaa>
 8000aa6:	bf00      	nop
 8000aa8:	200000fc 	.word	0x200000fc
 8000aac:	20000150 	.word	0x20000150
 8000ab0:	200001f4 	.word	0x200001f4
 8000ab4:	20000090 	.word	0x20000090
 8000ab8:	200001b4 	.word	0x200001b4
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000240 	.word	0x20000240
 8000ac4:	200001a8 	.word	0x200001a8
 8000ac8:	40002000 	.word	0x40002000
 8000acc:	43fa0000 	.word	0x43fa0000
 8000ad0:	40000800 	.word	0x40000800

08000ad4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2234      	movs	r2, #52	; 0x34
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f004 fcff 	bl	80054e6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <SystemClock_Config+0xd4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <SystemClock_Config+0xd4>)
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <SystemClock_Config+0xd4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <SystemClock_Config+0xd8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b20:	4a22      	ldr	r2, [pc, #136]	; (8000bac <SystemClock_Config+0xd8>)
 8000b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <SystemClock_Config+0xd8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b40:	2302      	movs	r3, #2
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 8000b4c:	2340      	movs	r3, #64	; 0x40
 8000b4e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fd89 	bl	8003678 <HAL_RCC_OscConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x9c>
		Error_Handler();
 8000b6c:	f000 fa32 	bl	8000fd4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b70:	230f      	movs	r3, #15
 8000b72:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2302      	movs	r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b80:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 fb06 	bl	80031a0 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0xca>
		Error_Handler();
 8000b9a:	f000 fa1b 	bl	8000fd4 <Error_Handler>
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3750      	adds	r7, #80	; 0x50
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000

08000bb0 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000bb6:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <MX_I2C3_Init+0x54>)
 8000bb8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 400000;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000bbc:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <MX_I2C3_Init+0x58>)
 8000bbe:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd2:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_I2C3_Init+0x50>)
 8000bee:	f001 fb4f 	bl	8002290 <HAL_I2C_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000bf8:	f000 f9ec 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000fc 	.word	0x200000fc
 8000c04:	40005c00 	.word	0x40005c00
 8000c08:	00061a80 	.word	0x00061a80

08000c0c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000c3e:	4a3e      	ldr	r2, [pc, #248]	; (8000d38 <MX_TIM4_Init+0x12c>)
 8000c40:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 128 - 1;
 8000c42:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000c44:	227f      	movs	r2, #127	; 0x7f
 8000c46:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000 - 1;
 8000c4e:	4b39      	ldr	r3, [pc, #228]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000c50:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c54:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b37      	ldr	r3, [pc, #220]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000c62:	4834      	ldr	r0, [pc, #208]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000c64:	f002 ff62 	bl	8003b2c <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM4_Init+0x66>
		Error_Handler();
 8000c6e:	f000 f9b1 	bl	8000fd4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000c78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	482d      	ldr	r0, [pc, #180]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000c80:	f003 fa08 	bl	8004094 <HAL_TIM_ConfigClockSource>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM4_Init+0x82>
		Error_Handler();
 8000c8a:	f000 f9a3 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000c8e:	4829      	ldr	r0, [pc, #164]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000c90:	f002 ffbf 	bl	8003c12 <HAL_TIM_PWM_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM4_Init+0x92>
		Error_Handler();
 8000c9a:	f000 f99b 	bl	8000fd4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	4619      	mov	r1, r3
 8000cac:	4821      	ldr	r0, [pc, #132]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000cae:	f003 fde1 	bl	8004874 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000cb8:	f000 f98c 	bl	8000fd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbc:	2360      	movs	r3, #96	; 0x60
 8000cbe:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500 - 1;
 8000cc0:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000cc4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4817      	ldr	r0, [pc, #92]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000cd6:	f003 f917 	bl	8003f08 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM4_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000ce0:	f000 f978 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000cec:	f003 f90c 	bl	8003f08 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM4_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8000cf6:	f000 f96d 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000d02:	f003 f901 	bl	8003f08 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM4_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8000d0c:	f000 f962 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	220c      	movs	r2, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000d18:	f003 f8f6 	bl	8003f08 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 8000d22:	f000 f957 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <MX_TIM4_Init+0x128>)
 8000d28:	f000 fa2a 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8000d2c:	bf00      	nop
 8000d2e:	3738      	adds	r7, #56	; 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000150 	.word	0x20000150
 8000d38:	40000800 	.word	0x40000800

08000d3c <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_TIM14_Init+0x40>)
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <MX_TIM14_Init+0x44>)
 8000d44:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 12800;
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <MX_TIM14_Init+0x40>)
 8000d48:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000d4c:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_TIM14_Init+0x40>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 10 * 100;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_TIM14_Init+0x40>)
 8000d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d5a:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_TIM14_Init+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_TIM14_Init+0x40>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_TIM14_Init+0x40>)
 8000d6a:	f002 fedf 	bl	8003b2c <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM14_Init+0x3c>
		Error_Handler();
 8000d74:	f000 f92e 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200001f4 	.word	0x200001f4
 8000d80:	40002000 	.word	0x40002000

08000d84 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_UART4_Init+0x48>)
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <MX_UART4_Init+0x4c>)
 8000d8c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 2000000;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_UART4_Init+0x48>)
 8000d90:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <MX_UART4_Init+0x50>)
 8000d92:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <MX_UART4_Init+0x48>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_UART4_Init+0x48>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <MX_UART4_Init+0x48>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_UART4_Init+0x48>)
 8000da8:	220c      	movs	r2, #12
 8000daa:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_UART4_Init+0x48>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_UART4_Init+0x48>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_UART4_Init+0x48>)
 8000dba:	f003 fdeb 	bl	8004994 <HAL_UART_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_UART4_Init+0x44>
		Error_Handler();
 8000dc4:	f000 f906 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200001b4 	.word	0x200001b4
 8000dd0:	40004c00 	.word	0x40004c00
 8000dd4:	001e8480 	.word	0x001e8480

08000dd8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_DMA_Init+0x3c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <MX_DMA_Init+0x3c>)
 8000de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_DMA_Init+0x3c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	200d      	movs	r0, #13
 8000e00:	f000 fc6d 	bl	80016de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e04:	200d      	movs	r0, #13
 8000e06:	f000 fc86 	bl	8001716 <HAL_NVIC_EnableIRQ>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <MX_GPIO_Init+0xc4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a29      	ldr	r2, [pc, #164]	; (8000edc <MX_GPIO_Init+0xc4>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <MX_GPIO_Init+0xc4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_GPIO_Init+0xc4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a22      	ldr	r2, [pc, #136]	; (8000edc <MX_GPIO_Init+0xc4>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_GPIO_Init+0xc4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_GPIO_Init+0xc4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <MX_GPIO_Init+0xc4>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_GPIO_Init+0xc4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2120      	movs	r1, #32
 8000e86:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e88:	f001 f9d0 	bl	800222c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : led_Pin */
	GPIO_InitStruct.Pin = led_Pin;
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <MX_GPIO_Init+0xc8>)
 8000ea4:	f001 f830 	bl	8001f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_GPIO_Init+0xcc>)
 8000eb0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <MX_GPIO_Init+0xc8>)
 8000ebe:	f001 f823 	bl	8001f08 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2028      	movs	r0, #40	; 0x28
 8000ec8:	f000 fc09 	bl	80016de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ecc:	2028      	movs	r0, #40	; 0x28
 8000ece:	f000 fc22 	bl	8001716 <HAL_NVIC_EnableIRQ>

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	10110000 	.word	0x10110000

08000ee8 <getCRC>:

/* USER CODE BEGIN 4 */
uint8_t getCRC(uint8_t *message, uint8_t length) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < length; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73bb      	strb	r3, [r7, #14]
 8000efc:	e01f      	b.n	8000f3e <getCRC+0x56>
		crc ^= *(message + i);
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4053      	eors	r3, r2
 8000f0a:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	737b      	strb	r3, [r7, #13]
 8000f10:	e00f      	b.n	8000f32 <getCRC+0x4a>
			if (crc & 1)
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <getCRC+0x3e>
				crc ^= 0x91; //CRC7_POLY = 0x91
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	f083 036e 	eor.w	r3, r3, #110	; 0x6e
 8000f22:	43db      	mvns	r3, r3
 8000f24:	73fb      	strb	r3, [r7, #15]
			crc >>= 1;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	085b      	lsrs	r3, r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8000f2c:	7b7b      	ldrb	r3, [r7, #13]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	737b      	strb	r3, [r7, #13]
 8000f32:	7b7b      	ldrb	r3, [r7, #13]
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	d9ec      	bls.n	8000f12 <getCRC+0x2a>
	for (uint8_t i = 0; i < length; i++) {
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	73bb      	strb	r3, [r7, #14]
 8000f3e:	7bba      	ldrb	r2, [r7, #14]
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d3db      	bcc.n	8000efe <getCRC+0x16>
		}
	}
	return crc;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d117      	bne.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x42>
		HAL_UART_DMAStop(&huart4);
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f68:	f003 fde2 	bl	8004b30 <HAL_UART_DMAStop>
		HAL_UART_Receive_DMA(&huart4, mPaketas, 10);
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f72:	f003 fd5d 	bl	8004a30 <HAL_UART_Receive_DMA>

		TIM4->CCR1 = minStepCycles;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = minStepCycles;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f84:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = minStepCycles;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = minStepCycles;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40002000 	.word	0x40002000
 8000fa4:	200001b4 	.word	0x200001b4
 8000fa8:	20000090 	.word	0x20000090
 8000fac:	40000800 	.word	0x40000800

08000fb0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	mFlags.dataUart = 1;
 8000fb8:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_UART_RxCpltCallback+0x20>)
 8000fba:	7813      	ldrb	r3, [r2, #0]
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	7013      	strb	r3, [r2, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <HAL_I2C_MspInit+0xc0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d14a      	bne.n	80010ec <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800108e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001094:	2312      	movs	r3, #18
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001098:	2301      	movs	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010a0:	2304      	movs	r3, #4
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4814      	ldr	r0, [pc, #80]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 80010ac:	f000 ff2c 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010b0:	2310      	movs	r3, #16
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b4:	2312      	movs	r3, #18
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010c0:	2304      	movs	r3, #4
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <HAL_I2C_MspInit+0xcc>)
 80010cc:	f000 ff1c 	bl	8001f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 80010da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40005c00 	.word	0x40005c00
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020400 	.word	0x40020400

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <HAL_TIM_Base_MspInit+0x70>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10e      	bne.n	8001134 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_TIM_Base_MspInit+0x74>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a16      	ldr	r2, [pc, #88]	; (8001178 <HAL_TIM_Base_MspInit+0x74>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_TIM_Base_MspInit+0x74>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001132:	e01a      	b.n	800116a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_TIM_Base_MspInit+0x78>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d115      	bne.n	800116a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_TIM_Base_MspInit+0x74>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <HAL_TIM_Base_MspInit+0x74>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_TIM_Base_MspInit+0x74>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	202d      	movs	r0, #45	; 0x2d
 8001160:	f000 fabd 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001164:	202d      	movs	r0, #45	; 0x2d
 8001166:	f000 fad6 	bl	8001716 <HAL_NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40000800 	.word	0x40000800
 8001178:	40023800 	.word	0x40023800
 800117c:	40002000 	.word	0x40002000

08001180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <HAL_TIM_MspPostInit+0x68>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d11e      	bne.n	80011e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_TIM_MspPostInit+0x6c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_TIM_MspPostInit+0x6c>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_TIM_MspPostInit+0x6c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011be:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_TIM_MspPostInit+0x70>)
 80011dc:	f000 fe94 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40000800 	.word	0x40000800
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d15c      	bne.n	80012d0 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <HAL_UART_MspInit+0xe8>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <HAL_UART_MspInit+0xe8>)
 8001220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <HAL_UART_MspInit+0xe8>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <HAL_UART_MspInit+0xe8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a28      	ldr	r2, [pc, #160]	; (80012dc <HAL_UART_MspInit+0xe8>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <HAL_UART_MspInit+0xe8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800124e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001258:	2301      	movs	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001260:	2308      	movs	r3, #8
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <HAL_UART_MspInit+0xec>)
 800126c:	f000 fe4c 	bl	8001f08 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <HAL_UART_MspInit+0xf4>)
 8001274:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 8001278:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800127c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 800128c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001290:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 80012a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012ac:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 80012b6:	f000 fa49 	bl	800174c <HAL_DMA_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80012c0:	f7ff fe88 	bl	8000fd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ca:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_UART_MspInit+0xf0>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40004c00 	.word	0x40004c00
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	2000009c 	.word	0x2000009c
 80012e8:	40026040 	.word	0x40026040

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler+0x4>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler+0x4>

08001312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f8b0 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <DMA1_Stream2_IRQHandler+0x10>)
 800134e:	f000 fb73 	bl	8001a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000009c 	.word	0x2000009c

0800135c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001360:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001364:	f000 ff7c 	bl	8002260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001372:	f002 fcc1 	bl	8003cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001f4 	.word	0x200001f4

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <SystemInit+0x28>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <SystemInit+0x28>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SystemInit+0x28>)
 8001396:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800139a:	609a      	str	r2, [r3, #8]
#endif
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013b2:	e003      	b.n	80013bc <LoopCopyDataInit>

080013b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013ba:	3104      	adds	r1, #4

080013bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013c4:	d3f6      	bcc.n	80013b4 <CopyDataInit>
  ldr  r2, =_sbss
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013c8:	e002      	b.n	80013d0 <LoopFillZerobss>

080013ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013cc:	f842 3b04 	str.w	r3, [r2], #4

080013d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013d4:	d3f9      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013d6:	f7ff ffd3 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013da:	f004 f855 	bl	8005488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013de:	f7ff fa63 	bl	80008a8 <main>
  bx  lr    
 80013e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013e8:	08005540 	.word	0x08005540
  ldr  r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013f0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80013f4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80013f8:	2000024c 	.word	0x2000024c

080013fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_Init+0x40>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_Init+0x40>)
 8001416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_Init+0x40>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f94d 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f808 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff fdd6 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023c00 	.word	0x40023c00

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f965 	bl	8001732 <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 f92d 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000004 	.word	0x20000004
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	20000008 	.word	0x20000008

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	20000248 	.word	0x20000248

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000248 	.word	0x20000248

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_Delay+0x40>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000000c 	.word	0x2000000c

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff29 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff3e 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff31 	bl	800158c <__NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa2 	bl	8001684 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff feb8 	bl	80014cc <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e099      	b.n	800189c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001788:	e00f      	b.n	80017aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800178a:	f7ff fe9f 	bl	80014cc <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b05      	cmp	r3, #5
 8001796:	d908      	bls.n	80017aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2220      	movs	r2, #32
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2203      	movs	r2, #3
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e078      	b.n	800189c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e8      	bne.n	800178a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_DMA_Init+0x158>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2b04      	cmp	r3, #4
 8001802:	d107      	bne.n	8001814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	4313      	orrs	r3, r2
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f023 0307 	bic.w	r3, r3, #7
 800182a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	4313      	orrs	r3, r2
 8001834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	2b04      	cmp	r3, #4
 800183c:	d117      	bne.n	800186e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00e      	beq.n	800186e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 fadf 	bl	8001e14 <DMA_CheckFifoParam>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2240      	movs	r2, #64	; 0x40
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800186a:	2301      	movs	r3, #1
 800186c:	e016      	b.n	800189c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fa96 	bl	8001da8 <DMA_CalcBaseAndBitshift>
 800187c:	4603      	mov	r3, r0
 800187e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	223f      	movs	r2, #63	; 0x3f
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	f010803f 	.word	0xf010803f

080018a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_DMA_Start_IT+0x26>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e040      	b.n	8001950 <HAL_DMA_Start_IT+0xa8>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d12f      	bne.n	8001942 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2202      	movs	r2, #2
 80018e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 fa28 	bl	8001d4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	223f      	movs	r2, #63	; 0x3f
 8001902:	409a      	lsls	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0216 	orr.w	r2, r2, #22
 8001916:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0208 	orr.w	r2, r2, #8
 800192e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e005      	b.n	800194e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800194a:	2302      	movs	r3, #2
 800194c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800194e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001966:	f7ff fdb1 	bl	80014cc <HAL_GetTick>
 800196a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d008      	beq.n	800198a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e052      	b.n	8001a30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0216 	bic.w	r2, r2, #22
 8001998:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <HAL_DMA_Abort+0x62>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0208 	bic.w	r2, r2, #8
 80019c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019da:	e013      	b.n	8001a04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019dc:	f7ff fd76 	bl	80014cc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d90c      	bls.n	8001a04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2203      	movs	r2, #3
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e015      	b.n	8001a30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1e4      	bne.n	80019dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a16:	223f      	movs	r2, #63	; 0x3f
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a44:	4b92      	ldr	r3, [pc, #584]	; (8001c90 <HAL_DMA_IRQHandler+0x258>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a92      	ldr	r2, [pc, #584]	; (8001c94 <HAL_DMA_IRQHandler+0x25c>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0a9b      	lsrs	r3, r3, #10
 8001a50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a62:	2208      	movs	r2, #8
 8001a64:	409a      	lsls	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d01a      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0204 	bic.w	r2, r2, #4
 8001a8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2208      	movs	r2, #8
 8001a92:	409a      	lsls	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d012      	beq.n	8001ada <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad2:	f043 0202 	orr.w	r2, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	2204      	movs	r2, #4
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d012      	beq.n	8001b10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00b      	beq.n	8001b10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	2204      	movs	r2, #4
 8001afe:	409a      	lsls	r2, r3
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f043 0204 	orr.w	r2, r3, #4
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2210      	movs	r2, #16
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d043      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d03c      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	2210      	movs	r2, #16
 8001b34:	409a      	lsls	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d018      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d024      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
 8001b66:	e01f      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01b      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
 8001b78:	e016      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0208 	bic.w	r2, r2, #8
 8001b96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	2220      	movs	r2, #32
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 808e 	beq.w	8001cd6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8086 	beq.w	8001cd6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	2220      	movs	r2, #32
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d136      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0216 	bic.w	r2, r2, #22
 8001bf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d103      	bne.n	8001c12 <HAL_DMA_IRQHandler+0x1da>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0208 	bic.w	r2, r2, #8
 8001c20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	223f      	movs	r2, #63	; 0x3f
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d07d      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
        }
        return;
 8001c4e:	e078      	b.n	8001d42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01c      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d108      	bne.n	8001c7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d030      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	4798      	blx	r3
 8001c7c:	e02b      	b.n	8001cd6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d027      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
 8001c8e:	e022      	b.n	8001cd6 <HAL_DMA_IRQHandler+0x29e>
 8001c90:	20000004 	.word	0x20000004
 8001c94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10f      	bne.n	8001cc6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0210 	bic.w	r2, r2, #16
 8001cb4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d032      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d022      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2205      	movs	r2, #5
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d307      	bcc.n	8001d1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f2      	bne.n	8001d02 <HAL_DMA_IRQHandler+0x2ca>
 8001d1c:	e000      	b.n	8001d20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
 8001d40:	e000      	b.n	8001d44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d42:	bf00      	nop
    }
  }
}
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop

08001d4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b40      	cmp	r3, #64	; 0x40
 8001d78:	d108      	bne.n	8001d8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d8a:	e007      	b.n	8001d9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	60da      	str	r2, [r3, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3b10      	subs	r3, #16
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <DMA_CalcBaseAndBitshift+0x64>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <DMA_CalcBaseAndBitshift+0x68>)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d909      	bls.n	8001dea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dde:	f023 0303 	bic.w	r3, r3, #3
 8001de2:	1d1a      	adds	r2, r3, #4
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	659a      	str	r2, [r3, #88]	; 0x58
 8001de8:	e007      	b.n	8001dfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001df2:	f023 0303 	bic.w	r3, r3, #3
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	aaaaaaab 	.word	0xaaaaaaab
 8001e10:	08005528 	.word	0x08005528

08001e14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d11f      	bne.n	8001e6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d855      	bhi.n	8001ee0 <DMA_CheckFifoParam+0xcc>
 8001e34:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <DMA_CheckFifoParam+0x28>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e5f 	.word	0x08001e5f
 8001e44:	08001e4d 	.word	0x08001e4d
 8001e48:	08001ee1 	.word	0x08001ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d045      	beq.n	8001ee4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e5c:	e042      	b.n	8001ee4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e66:	d13f      	bne.n	8001ee8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6c:	e03c      	b.n	8001ee8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e76:	d121      	bne.n	8001ebc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d836      	bhi.n	8001eec <DMA_CheckFifoParam+0xd8>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <DMA_CheckFifoParam+0x70>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001e95 	.word	0x08001e95
 8001e88:	08001e9b 	.word	0x08001e9b
 8001e8c:	08001e95 	.word	0x08001e95
 8001e90:	08001ead 	.word	0x08001ead
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
      break;
 8001e98:	e02f      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d024      	beq.n	8001ef0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eaa:	e021      	b.n	8001ef0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eb4:	d11e      	bne.n	8001ef4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eba:	e01b      	b.n	8001ef4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d902      	bls.n	8001ec8 <DMA_CheckFifoParam+0xb4>
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d003      	beq.n	8001ece <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ec6:	e018      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      break;
 8001ecc:	e015      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00e      	beq.n	8001ef8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
      break;
 8001ede:	e00b      	b.n	8001ef8 <DMA_CheckFifoParam+0xe4>
      break;
 8001ee0:	bf00      	nop
 8001ee2:	e00a      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001ee4:	bf00      	nop
 8001ee6:	e008      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001ee8:	bf00      	nop
 8001eea:	e006      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001eec:	bf00      	nop
 8001eee:	e004      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001ef0:	bf00      	nop
 8001ef2:	e002      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;   
 8001ef4:	bf00      	nop
 8001ef6:	e000      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001ef8:	bf00      	nop
    }
  } 
  
  return status; 
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	e165      	b.n	80021f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f040 8154 	bne.w	80021ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d00b      	beq.n	8001f62 <HAL_GPIO_Init+0x5a>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f56:	2b11      	cmp	r3, #17
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b12      	cmp	r3, #18
 8001f60:	d130      	bne.n	8001fc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 0201 	and.w	r2, r3, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0xfc>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b12      	cmp	r3, #18
 8002002:	d123      	bne.n	800204c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	69b9      	ldr	r1, [r7, #24]
 8002048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80ae 	beq.w	80021ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <HAL_GPIO_Init+0x2fc>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a5b      	ldr	r2, [pc, #364]	; (8002204 <HAL_GPIO_Init+0x2fc>)
 8002098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_GPIO_Init+0x2fc>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020aa:	4a57      	ldr	r2, [pc, #348]	; (8002208 <HAL_GPIO_Init+0x300>)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4e      	ldr	r2, [pc, #312]	; (800220c <HAL_GPIO_Init+0x304>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d025      	beq.n	8002122 <HAL_GPIO_Init+0x21a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4d      	ldr	r2, [pc, #308]	; (8002210 <HAL_GPIO_Init+0x308>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01f      	beq.n	800211e <HAL_GPIO_Init+0x216>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_GPIO_Init+0x30c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x212>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4b      	ldr	r2, [pc, #300]	; (8002218 <HAL_GPIO_Init+0x310>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4a      	ldr	r2, [pc, #296]	; (800221c <HAL_GPIO_Init+0x314>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x20a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a49      	ldr	r2, [pc, #292]	; (8002220 <HAL_GPIO_Init+0x318>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x206>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_GPIO_Init+0x31c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x202>
 8002106:	2306      	movs	r3, #6
 8002108:	e00c      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800210a:	2307      	movs	r3, #7
 800210c:	e00a      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800210e:	2305      	movs	r3, #5
 8002110:	e008      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002112:	2304      	movs	r3, #4
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002116:	2303      	movs	r3, #3
 8002118:	e004      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800211a:	2302      	movs	r3, #2
 800211c:	e002      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002122:	2300      	movs	r3, #0
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f002 0203 	and.w	r2, r2, #3
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4093      	lsls	r3, r2
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002134:	4934      	ldr	r1, [pc, #208]	; (8002208 <HAL_GPIO_Init+0x300>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002142:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_GPIO_Init+0x320>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002166:	4a30      	ldr	r2, [pc, #192]	; (8002228 <HAL_GPIO_Init+0x320>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_GPIO_Init+0x320>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <HAL_GPIO_Init+0x320>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_GPIO_Init+0x320>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ba:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_GPIO_Init+0x320>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_GPIO_Init+0x320>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e4:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_GPIO_Init+0x320>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3301      	adds	r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b0f      	cmp	r3, #15
 80021f4:	f67f ae96 	bls.w	8001f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f8:	bf00      	nop
 80021fa:	3724      	adds	r7, #36	; 0x24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40023800 	.word	0x40023800
 8002208:	40013800 	.word	0x40013800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020400 	.word	0x40020400
 8002214:	40020800 	.word	0x40020800
 8002218:	40020c00 	.word	0x40020c00
 800221c:	40021000 	.word	0x40021000
 8002220:	40021400 	.word	0x40021400
 8002224:	40021800 	.word	0x40021800
 8002228:	40013c00 	.word	0x40013c00

0800222c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
 8002238:	4613      	mov	r3, r2
 800223a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002248:	e003      	b.n	8002252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	041a      	lsls	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	619a      	str	r2, [r3, #24]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fafc 	bl	800087c <HAL_GPIO_EXTI_Callback>
  }
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e11f      	b.n	80024e2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe febc 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022f4:	f001 f846 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 80022f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4a7b      	ldr	r2, [pc, #492]	; (80024ec <HAL_I2C_Init+0x25c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d807      	bhi.n	8002314 <HAL_I2C_Init+0x84>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a7a      	ldr	r2, [pc, #488]	; (80024f0 <HAL_I2C_Init+0x260>)
 8002308:	4293      	cmp	r3, r2
 800230a:	bf94      	ite	ls
 800230c:	2301      	movls	r3, #1
 800230e:	2300      	movhi	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	e006      	b.n	8002322 <HAL_I2C_Init+0x92>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4a77      	ldr	r2, [pc, #476]	; (80024f4 <HAL_I2C_Init+0x264>)
 8002318:	4293      	cmp	r3, r2
 800231a:	bf94      	ite	ls
 800231c:	2301      	movls	r3, #1
 800231e:	2300      	movhi	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0db      	b.n	80024e2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a72      	ldr	r2, [pc, #456]	; (80024f8 <HAL_I2C_Init+0x268>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0c9b      	lsrs	r3, r3, #18
 8002334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a64      	ldr	r2, [pc, #400]	; (80024ec <HAL_I2C_Init+0x25c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d802      	bhi.n	8002364 <HAL_I2C_Init+0xd4>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	3301      	adds	r3, #1
 8002362:	e009      	b.n	8002378 <HAL_I2C_Init+0xe8>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	4a63      	ldr	r2, [pc, #396]	; (80024fc <HAL_I2C_Init+0x26c>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	3301      	adds	r3, #1
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800238a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4956      	ldr	r1, [pc, #344]	; (80024ec <HAL_I2C_Init+0x25c>)
 8002394:	428b      	cmp	r3, r1
 8002396:	d80d      	bhi.n	80023b4 <HAL_I2C_Init+0x124>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e59      	subs	r1, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	bf38      	it	cc
 80023b0:	2304      	movcc	r3, #4
 80023b2:	e04f      	b.n	8002454 <HAL_I2C_Init+0x1c4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d111      	bne.n	80023e0 <HAL_I2C_Init+0x150>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1e58      	subs	r0, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	440b      	add	r3, r1
 80023ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	e012      	b.n	8002406 <HAL_I2C_Init+0x176>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e58      	subs	r0, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	0099      	lsls	r1, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Init+0x17e>
 800240a:	2301      	movs	r3, #1
 800240c:	e022      	b.n	8002454 <HAL_I2C_Init+0x1c4>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10e      	bne.n	8002434 <HAL_I2C_Init+0x1a4>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1e58      	subs	r0, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	440b      	add	r3, r1
 8002424:	fbb0 f3f3 	udiv	r3, r0, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002432:	e00f      	b.n	8002454 <HAL_I2C_Init+0x1c4>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1e58      	subs	r0, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	0099      	lsls	r1, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	fbb0 f3f3 	udiv	r3, r0, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	6809      	ldr	r1, [r1, #0]
 8002458:	4313      	orrs	r3, r2
 800245a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002482:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6911      	ldr	r1, [r2, #16]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68d2      	ldr	r2, [r2, #12]
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	430b      	orrs	r3, r1
 8002496:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	000186a0 	.word	0x000186a0
 80024f0:	001e847f 	.word	0x001e847f
 80024f4:	003d08ff 	.word	0x003d08ff
 80024f8:	431bde83 	.word	0x431bde83
 80024fc:	10624dd3 	.word	0x10624dd3

08002500 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	461a      	mov	r2, r3
 800250c:	460b      	mov	r3, r1
 800250e:	817b      	strh	r3, [r7, #10]
 8002510:	4613      	mov	r3, r2
 8002512:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7fe ffda 	bl	80014cc <HAL_GetTick>
 8002518:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b20      	cmp	r3, #32
 8002524:	f040 80e0 	bne.w	80026e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2319      	movs	r3, #25
 800252e:	2201      	movs	r2, #1
 8002530:	4970      	ldr	r1, [pc, #448]	; (80026f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fc56 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	e0d3      	b.n	80026ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_I2C_Master_Transmit+0x50>
 800254c:	2302      	movs	r3, #2
 800254e:	e0cc      	b.n	80026ea <HAL_I2C_Master_Transmit+0x1ea>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d007      	beq.n	8002576 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2221      	movs	r2, #33	; 0x21
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2210      	movs	r2, #16
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	893a      	ldrh	r2, [r7, #8]
 80025a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025b8:	8979      	ldrh	r1, [r7, #10]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	6a3a      	ldr	r2, [r7, #32]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fac2 	bl	8002b48 <I2C_MasterRequestWrite>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e08d      	b.n	80026ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025e4:	e066      	b.n	80026b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	6a39      	ldr	r1, [r7, #32]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fcd0 	bl	8002f90 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00d      	beq.n	8002612 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d107      	bne.n	800260e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e06b      	b.n	80026ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b04      	cmp	r3, #4
 800264e:	d11b      	bne.n	8002688 <HAL_I2C_Master_Transmit+0x188>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	d017      	beq.n	8002688 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	6a39      	ldr	r1, [r7, #32]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fcc0 	bl	8003012 <I2C_WaitOnBTFFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00d      	beq.n	80026b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	2b04      	cmp	r3, #4
 800269e:	d107      	bne.n	80026b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e01a      	b.n	80026ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d194      	bne.n	80025e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	00100002 	.word	0x00100002
 80026f8:	ffff0000 	.word	0xffff0000

080026fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	461a      	mov	r2, r3
 8002708:	460b      	mov	r3, r1
 800270a:	817b      	strh	r3, [r7, #10]
 800270c:	4613      	mov	r3, r2
 800270e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7fe fedc 	bl	80014cc <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b20      	cmp	r3, #32
 8002720:	f040 820b 	bne.w	8002b3a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2319      	movs	r3, #25
 800272a:	2201      	movs	r2, #1
 800272c:	497c      	ldr	r1, [pc, #496]	; (8002920 <HAL_I2C_Master_Receive+0x224>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fb58 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800273a:	2302      	movs	r3, #2
 800273c:	e1fe      	b.n	8002b3c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_I2C_Master_Receive+0x50>
 8002748:	2302      	movs	r3, #2
 800274a:	e1f7      	b.n	8002b3c <HAL_I2C_Master_Receive+0x440>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d007      	beq.n	8002772 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002780:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2222      	movs	r2, #34	; 0x22
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2210      	movs	r2, #16
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	893a      	ldrh	r2, [r7, #8]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a5c      	ldr	r2, [pc, #368]	; (8002924 <HAL_I2C_Master_Receive+0x228>)
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027b4:	8979      	ldrh	r1, [r7, #10]
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fa46 	bl	8002c4c <I2C_MasterRequestRead>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e1b8      	b.n	8002b3c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d113      	bne.n	80027fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	623b      	str	r3, [r7, #32]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	623b      	str	r3, [r7, #32]
 80027e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e18c      	b.n	8002b14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d11b      	bne.n	800283a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e16c      	b.n	8002b14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283e:	2b02      	cmp	r3, #2
 8002840:	d11b      	bne.n	800287a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002850:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	e14c      	b.n	8002b14 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028a0:	e138      	b.n	8002b14 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	f200 80f1 	bhi.w	8002a8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d123      	bne.n	80028fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fbeb 	bl	8003094 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e139      	b.n	8002b3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028fa:	e10b      	b.n	8002b14 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	2b02      	cmp	r3, #2
 8002902:	d14e      	bne.n	80029a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	2200      	movs	r2, #0
 800290c:	4906      	ldr	r1, [pc, #24]	; (8002928 <HAL_I2C_Master_Receive+0x22c>)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fa68 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e10e      	b.n	8002b3c <HAL_I2C_Master_Receive+0x440>
 800291e:	bf00      	nop
 8002920:	00100002 	.word	0x00100002
 8002924:	ffff0000 	.word	0xffff0000
 8002928:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029a0:	e0b8      	b.n	8002b14 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	2200      	movs	r2, #0
 80029aa:	4966      	ldr	r1, [pc, #408]	; (8002b44 <HAL_I2C_Master_Receive+0x448>)
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fa19 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0bf      	b.n	8002b3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	2200      	movs	r2, #0
 8002a06:	494f      	ldr	r1, [pc, #316]	; (8002b44 <HAL_I2C_Master_Receive+0x448>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f9eb 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e091      	b.n	8002b3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a8c:	e042      	b.n	8002b14 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fafe 	bl	8003094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e04c      	b.n	8002b3c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d118      	bne.n	8002b14 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f aec2 	bne.w	80028a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	; 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	00010004 	.word	0x00010004

08002b48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d006      	beq.n	8002b72 <I2C_MasterRequestWrite+0x2a>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d003      	beq.n	8002b72 <I2C_MasterRequestWrite+0x2a>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b70:	d108      	bne.n	8002b84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e00b      	b.n	8002b9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	2b12      	cmp	r3, #18
 8002b8a:	d107      	bne.n	8002b9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f91b 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e035      	b.n	8002c3a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd6:	d108      	bne.n	8002bea <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bd8:	897b      	ldrh	r3, [r7, #10]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002be6:	611a      	str	r2, [r3, #16]
 8002be8:	e01b      	b.n	8002c22 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	11db      	asrs	r3, r3, #7
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f003 0306 	and.w	r3, r3, #6
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f063 030f 	orn	r3, r3, #15
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	490f      	ldr	r1, [pc, #60]	; (8002c44 <I2C_MasterRequestWrite+0xfc>)
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f942 	bl	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e010      	b.n	8002c3a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c18:	897b      	ldrh	r3, [r7, #10]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4908      	ldr	r1, [pc, #32]	; (8002c48 <I2C_MasterRequestWrite+0x100>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f932 	bl	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	00010008 	.word	0x00010008
 8002c48:	00010002 	.word	0x00010002

08002c4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d006      	beq.n	8002c86 <I2C_MasterRequestRead+0x3a>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d003      	beq.n	8002c86 <I2C_MasterRequestRead+0x3a>
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c84:	d108      	bne.n	8002c98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e00b      	b.n	8002cb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	2b11      	cmp	r3, #17
 8002c9e:	d107      	bne.n	8002cb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f891 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00c      	beq.n	8002ce2 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e078      	b.n	8002dd4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cea:	d108      	bne.n	8002cfe <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cec:	897b      	ldrh	r3, [r7, #10]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]
 8002cfc:	e05e      	b.n	8002dbc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cfe:	897b      	ldrh	r3, [r7, #10]
 8002d00:	11db      	asrs	r3, r3, #7
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f003 0306 	and.w	r3, r3, #6
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f063 030f 	orn	r3, r3, #15
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4930      	ldr	r1, [pc, #192]	; (8002ddc <I2C_MasterRequestRead+0x190>)
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f8b8 	bl	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e053      	b.n	8002dd4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d2c:	897b      	ldrh	r3, [r7, #10]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4929      	ldr	r1, [pc, #164]	; (8002de0 <I2C_MasterRequestRead+0x194>)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f8a8 	bl	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e043      	b.n	8002dd4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d70:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f830 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00c      	beq.n	8002da4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e017      	b.n	8002dd4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002da4:	897b      	ldrh	r3, [r7, #10]
 8002da6:	11db      	asrs	r3, r3, #7
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 0306 	and.w	r3, r3, #6
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f063 030e 	orn	r3, r3, #14
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <I2C_MasterRequestRead+0x194>)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f865 	bl	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	00010008 	.word	0x00010008
 8002de0:	00010002 	.word	0x00010002

08002de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df4:	e025      	b.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d021      	beq.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7fe fb65 	bl	80014cc <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d116      	bne.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e023      	b.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10d      	bne.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	e00c      	b.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4013      	ands	r3, r2
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d0b6      	beq.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ea0:	e051      	b.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb0:	d123      	bne.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f043 0204 	orr.w	r2, r3, #4
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e046      	b.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d021      	beq.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7fe fae3 	bl	80014cc <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d116      	bne.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e020      	b.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10c      	bne.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	e00b      	b.n	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d18d      	bne.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9c:	e02d      	b.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f8ce 	bl	8003140 <I2C_IsAcknowledgeFailed>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e02d      	b.n	800300a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d021      	beq.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7fe fa89 	bl	80014cc <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d116      	bne.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0220 	orr.w	r2, r3, #32
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e007      	b.n	800300a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d1ca      	bne.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800301e:	e02d      	b.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f88d 	bl	8003140 <I2C_IsAcknowledgeFailed>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e02d      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d021      	beq.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003038:	f7fe fa48 	bl	80014cc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d302      	bcc.n	800304e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e007      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d1ca      	bne.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a0:	e042      	b.n	8003128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d119      	bne.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0210 	mvn.w	r2, #16
 80030b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e029      	b.n	8003138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fe f9f2 	bl	80014cc <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e007      	b.n	8003138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d1b5      	bne.n	80030a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003156:	d11b      	bne.n	8003190 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003160:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f043 0204 	orr.w	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0cc      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b68      	ldr	r3, [pc, #416]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d90c      	bls.n	80031dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b65      	ldr	r3, [pc, #404]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b63      	ldr	r3, [pc, #396]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0b8      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d020      	beq.n	800322a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f4:	4b59      	ldr	r3, [pc, #356]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a58      	ldr	r2, [pc, #352]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800320c:	4b53      	ldr	r3, [pc, #332]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a52      	ldr	r2, [pc, #328]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003218:	4b50      	ldr	r3, [pc, #320]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	494d      	ldr	r1, [pc, #308]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d044      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	4b47      	ldr	r3, [pc, #284]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d119      	bne.n	800327e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e07f      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d003      	beq.n	800325e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	2b03      	cmp	r3, #3
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325e:	4b3f      	ldr	r3, [pc, #252]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e06f      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326e:	4b3b      	ldr	r3, [pc, #236]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e067      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327e:	4b37      	ldr	r3, [pc, #220]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f023 0203 	bic.w	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4934      	ldr	r1, [pc, #208]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	4313      	orrs	r3, r2
 800328e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003290:	f7fe f91c 	bl	80014cc <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	e00a      	b.n	80032ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003298:	f7fe f918 	bl	80014cc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e04f      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	4b2b      	ldr	r3, [pc, #172]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 020c 	and.w	r2, r3, #12
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	429a      	cmp	r2, r3
 80032be:	d1eb      	bne.n	8003298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032c0:	4b25      	ldr	r3, [pc, #148]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d20c      	bcs.n	80032e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b20      	ldr	r3, [pc, #128]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e032      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f4:	4b19      	ldr	r3, [pc, #100]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4916      	ldr	r1, [pc, #88]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003312:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	490e      	ldr	r1, [pc, #56]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003326:	f000 f855 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800332a:	4601      	mov	r1, r0
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	fa21 f303 	lsr.w	r3, r1, r3
 800333e:	4a09      	ldr	r2, [pc, #36]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe f87c 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023c00 	.word	0x40023c00
 800335c:	40023800 	.word	0x40023800
 8003360:	08005510 	.word	0x08005510
 8003364:	20000004 	.word	0x20000004
 8003368:	20000008 	.word	0x20000008

0800336c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_RCC_GetHCLKFreq+0x14>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000004 	.word	0x20000004

08003384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003388:	f7ff fff0 	bl	800336c <HAL_RCC_GetHCLKFreq>
 800338c:	4601      	mov	r1, r0
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	0a9b      	lsrs	r3, r3, #10
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	4a03      	ldr	r2, [pc, #12]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800339a:	5cd3      	ldrb	r3, [r2, r3]
 800339c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	08005520 	.word	0x08005520

080033ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033b0:	f7ff ffdc 	bl	800336c <HAL_RCC_GetHCLKFreq>
 80033b4:	4601      	mov	r1, r0
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	0b5b      	lsrs	r3, r3, #13
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4a03      	ldr	r2, [pc, #12]	; (80033d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40023800 	.word	0x40023800
 80033d0:	08005520 	.word	0x08005520

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ee:	4b9f      	ldr	r3, [pc, #636]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	f200 8130 	bhi.w	800365c <HAL_RCC_GetSysClockFreq+0x288>
 80033fc:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <HAL_RCC_GetSysClockFreq+0x30>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003439 	.word	0x08003439
 8003408:	0800365d 	.word	0x0800365d
 800340c:	0800365d 	.word	0x0800365d
 8003410:	0800365d 	.word	0x0800365d
 8003414:	0800343f 	.word	0x0800343f
 8003418:	0800365d 	.word	0x0800365d
 800341c:	0800365d 	.word	0x0800365d
 8003420:	0800365d 	.word	0x0800365d
 8003424:	08003445 	.word	0x08003445
 8003428:	0800365d 	.word	0x0800365d
 800342c:	0800365d 	.word	0x0800365d
 8003430:	0800365d 	.word	0x0800365d
 8003434:	08003553 	.word	0x08003553
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003438:	4b8d      	ldr	r3, [pc, #564]	; (8003670 <HAL_RCC_GetSysClockFreq+0x29c>)
 800343a:	613b      	str	r3, [r7, #16]
       break;
 800343c:	e111      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800343e:	4b8d      	ldr	r3, [pc, #564]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003440:	613b      	str	r3, [r7, #16]
      break;
 8003442:	e10e      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003444:	4b89      	ldr	r3, [pc, #548]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800344c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344e:	4b87      	ldr	r3, [pc, #540]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d023      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345a:	4b84      	ldr	r3, [pc, #528]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	f04f 0400 	mov.w	r4, #0
 8003464:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	ea03 0501 	and.w	r5, r3, r1
 8003470:	ea04 0602 	and.w	r6, r4, r2
 8003474:	4a7f      	ldr	r2, [pc, #508]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003476:	fb02 f106 	mul.w	r1, r2, r6
 800347a:	2200      	movs	r2, #0
 800347c:	fb02 f205 	mul.w	r2, r2, r5
 8003480:	440a      	add	r2, r1
 8003482:	497c      	ldr	r1, [pc, #496]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003484:	fba5 0101 	umull	r0, r1, r5, r1
 8003488:	1853      	adds	r3, r2, r1
 800348a:	4619      	mov	r1, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f04f 0400 	mov.w	r4, #0
 8003492:	461a      	mov	r2, r3
 8003494:	4623      	mov	r3, r4
 8003496:	f7fc feb5 	bl	8000204 <__aeabi_uldivmod>
 800349a:	4603      	mov	r3, r0
 800349c:	460c      	mov	r4, r1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e049      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a2:	4b72      	ldr	r3, [pc, #456]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	f04f 0400 	mov.w	r4, #0
 80034ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	ea03 0501 	and.w	r5, r3, r1
 80034b8:	ea04 0602 	and.w	r6, r4, r2
 80034bc:	4629      	mov	r1, r5
 80034be:	4632      	mov	r2, r6
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	f04f 0400 	mov.w	r4, #0
 80034c8:	0154      	lsls	r4, r2, #5
 80034ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034ce:	014b      	lsls	r3, r1, #5
 80034d0:	4619      	mov	r1, r3
 80034d2:	4622      	mov	r2, r4
 80034d4:	1b49      	subs	r1, r1, r5
 80034d6:	eb62 0206 	sbc.w	r2, r2, r6
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	f04f 0400 	mov.w	r4, #0
 80034e2:	0194      	lsls	r4, r2, #6
 80034e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034e8:	018b      	lsls	r3, r1, #6
 80034ea:	1a5b      	subs	r3, r3, r1
 80034ec:	eb64 0402 	sbc.w	r4, r4, r2
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	00e2      	lsls	r2, r4, #3
 80034fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034fe:	00d9      	lsls	r1, r3, #3
 8003500:	460b      	mov	r3, r1
 8003502:	4614      	mov	r4, r2
 8003504:	195b      	adds	r3, r3, r5
 8003506:	eb44 0406 	adc.w	r4, r4, r6
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	02a2      	lsls	r2, r4, #10
 8003514:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003518:	0299      	lsls	r1, r3, #10
 800351a:	460b      	mov	r3, r1
 800351c:	4614      	mov	r4, r2
 800351e:	4618      	mov	r0, r3
 8003520:	4621      	mov	r1, r4
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f04f 0400 	mov.w	r4, #0
 8003528:	461a      	mov	r2, r3
 800352a:	4623      	mov	r3, r4
 800352c:	f7fc fe6a 	bl	8000204 <__aeabi_uldivmod>
 8003530:	4603      	mov	r3, r0
 8003532:	460c      	mov	r4, r1
 8003534:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003536:	4b4d      	ldr	r3, [pc, #308]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	3301      	adds	r3, #1
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	613b      	str	r3, [r7, #16]
      break;
 8003550:	e087      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003552:	4b46      	ldr	r3, [pc, #280]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355c:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d023      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003568:	4b40      	ldr	r3, [pc, #256]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	f04f 0400 	mov.w	r4, #0
 8003572:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	ea03 0501 	and.w	r5, r3, r1
 800357e:	ea04 0602 	and.w	r6, r4, r2
 8003582:	4a3c      	ldr	r2, [pc, #240]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003584:	fb02 f106 	mul.w	r1, r2, r6
 8003588:	2200      	movs	r2, #0
 800358a:	fb02 f205 	mul.w	r2, r2, r5
 800358e:	440a      	add	r2, r1
 8003590:	4938      	ldr	r1, [pc, #224]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003592:	fba5 0101 	umull	r0, r1, r5, r1
 8003596:	1853      	adds	r3, r2, r1
 8003598:	4619      	mov	r1, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f04f 0400 	mov.w	r4, #0
 80035a0:	461a      	mov	r2, r3
 80035a2:	4623      	mov	r3, r4
 80035a4:	f7fc fe2e 	bl	8000204 <__aeabi_uldivmod>
 80035a8:	4603      	mov	r3, r0
 80035aa:	460c      	mov	r4, r1
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	e049      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b0:	4b2e      	ldr	r3, [pc, #184]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	f04f 0400 	mov.w	r4, #0
 80035ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	ea03 0501 	and.w	r5, r3, r1
 80035c6:	ea04 0602 	and.w	r6, r4, r2
 80035ca:	4629      	mov	r1, r5
 80035cc:	4632      	mov	r2, r6
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	f04f 0400 	mov.w	r4, #0
 80035d6:	0154      	lsls	r4, r2, #5
 80035d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035dc:	014b      	lsls	r3, r1, #5
 80035de:	4619      	mov	r1, r3
 80035e0:	4622      	mov	r2, r4
 80035e2:	1b49      	subs	r1, r1, r5
 80035e4:	eb62 0206 	sbc.w	r2, r2, r6
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	f04f 0400 	mov.w	r4, #0
 80035f0:	0194      	lsls	r4, r2, #6
 80035f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035f6:	018b      	lsls	r3, r1, #6
 80035f8:	1a5b      	subs	r3, r3, r1
 80035fa:	eb64 0402 	sbc.w	r4, r4, r2
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	00e2      	lsls	r2, r4, #3
 8003608:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800360c:	00d9      	lsls	r1, r3, #3
 800360e:	460b      	mov	r3, r1
 8003610:	4614      	mov	r4, r2
 8003612:	195b      	adds	r3, r3, r5
 8003614:	eb44 0406 	adc.w	r4, r4, r6
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	02a2      	lsls	r2, r4, #10
 8003622:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003626:	0299      	lsls	r1, r3, #10
 8003628:	460b      	mov	r3, r1
 800362a:	4614      	mov	r4, r2
 800362c:	4618      	mov	r0, r3
 800362e:	4621      	mov	r1, r4
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	461a      	mov	r2, r3
 8003638:	4623      	mov	r3, r4
 800363a:	f7fc fde3 	bl	8000204 <__aeabi_uldivmod>
 800363e:	4603      	mov	r3, r0
 8003640:	460c      	mov	r4, r1
 8003642:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_GetSysClockFreq+0x298>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0f1b      	lsrs	r3, r3, #28
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	613b      	str	r3, [r7, #16]
      break;
 800365a:	e002      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCC_GetSysClockFreq+0x29c>)
 800365e:	613b      	str	r3, [r7, #16]
      break;
 8003660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003662:	693b      	ldr	r3, [r7, #16]
}
 8003664:	4618      	mov	r0, r3
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	017d7840 	.word	0x017d7840

08003678 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8083 	beq.w	8003798 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003692:	4b95      	ldr	r3, [pc, #596]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d019      	beq.n	80036d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800369e:	4b92      	ldr	r3, [pc, #584]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d106      	bne.n	80036b8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036aa:	4b8f      	ldr	r3, [pc, #572]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b6:	d00c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b8:	4b8b      	ldr	r3, [pc, #556]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036c0:	2b0c      	cmp	r3, #12
 80036c2:	d112      	bne.n	80036ea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c4:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d0:	d10b      	bne.n	80036ea <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d2:	4b85      	ldr	r3, [pc, #532]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d05b      	beq.n	8003796 <HAL_RCC_OscConfig+0x11e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d157      	bne.n	8003796 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e216      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x8a>
 80036f4:	4b7c      	ldr	r3, [pc, #496]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a7b      	ldr	r2, [pc, #492]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80036fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	e01d      	b.n	800373e <HAL_RCC_OscConfig+0xc6>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800370a:	d10c      	bne.n	8003726 <HAL_RCC_OscConfig+0xae>
 800370c:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a75      	ldr	r2, [pc, #468]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b73      	ldr	r3, [pc, #460]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a72      	ldr	r2, [pc, #456]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e00b      	b.n	800373e <HAL_RCC_OscConfig+0xc6>
 8003726:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6f      	ldr	r2, [pc, #444]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 800372c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6c      	ldr	r2, [pc, #432]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d013      	beq.n	800376e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd fec1 	bl	80014cc <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800374e:	f7fd febd 	bl	80014cc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b64      	cmp	r3, #100	; 0x64
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1db      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003760:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0xd6>
 800376c:	e014      	b.n	8003798 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fead 	bl	80014cc <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003776:	f7fd fea9 	bl	80014cc <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b64      	cmp	r3, #100	; 0x64
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1c7      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003788:	4b57      	ldr	r3, [pc, #348]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0xfe>
 8003794:	e000      	b.n	8003798 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003796:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d06f      	beq.n	8003884 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d017      	beq.n	80037e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037b0:	4b4d      	ldr	r3, [pc, #308]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d105      	bne.n	80037c8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037bc:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c8:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	d11c      	bne.n	800380e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d4:	4b44      	ldr	r3, [pc, #272]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d116      	bne.n	800380e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e0:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_OscConfig+0x180>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e18f      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4938      	ldr	r1, [pc, #224]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380c:	e03a      	b.n	8003884 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003816:	4b35      	ldr	r3, [pc, #212]	; (80038ec <HAL_RCC_OscConfig+0x274>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fd fe56 	bl	80014cc <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003824:	f7fd fe52 	bl	80014cc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e170      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003836:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4925      	ldr	r1, [pc, #148]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
 8003856:	e015      	b.n	8003884 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003858:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_RCC_OscConfig+0x274>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fd fe35 	bl	80014cc <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003866:	f7fd fe31 	bl	80014cc <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e14f      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d037      	beq.n	8003900 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d016      	beq.n	80038c6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_RCC_OscConfig+0x278>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389e:	f7fd fe15 	bl	80014cc <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fd fe11 	bl	80014cc <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e12f      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 80038ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x22e>
 80038c4:	e01c      	b.n	8003900 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_RCC_OscConfig+0x278>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd fdfe 	bl	80014cc <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d2:	e00f      	b.n	80038f4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fd fdfa 	bl	80014cc <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d908      	bls.n	80038f4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e118      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	42470000 	.word	0x42470000
 80038f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	4b8a      	ldr	r3, [pc, #552]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 80038f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e9      	bne.n	80038d4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8097 	beq.w	8003a3c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003912:	4b83      	ldr	r3, [pc, #524]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b7f      	ldr	r3, [pc, #508]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a7e      	ldr	r2, [pc, #504]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b7c      	ldr	r3, [pc, #496]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	4b79      	ldr	r3, [pc, #484]	; (8003b24 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d118      	bne.n	800397c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394a:	4b76      	ldr	r3, [pc, #472]	; (8003b24 <HAL_RCC_OscConfig+0x4ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a75      	ldr	r2, [pc, #468]	; (8003b24 <HAL_RCC_OscConfig+0x4ac>)
 8003950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003956:	f7fd fdb9 	bl	80014cc <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395e:	f7fd fdb5 	bl	80014cc <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0d3      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	4b6c      	ldr	r3, [pc, #432]	; (8003b24 <HAL_RCC_OscConfig+0x4ac>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x31a>
 8003984:	4b66      	ldr	r3, [pc, #408]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	4a65      	ldr	r2, [pc, #404]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6713      	str	r3, [r2, #112]	; 0x70
 8003990:	e01c      	b.n	80039cc <HAL_RCC_OscConfig+0x354>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x33c>
 800399a:	4b61      	ldr	r3, [pc, #388]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a60      	ldr	r2, [pc, #384]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
 80039a6:	4b5e      	ldr	r3, [pc, #376]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	4a5d      	ldr	r2, [pc, #372]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6713      	str	r3, [r2, #112]	; 0x70
 80039b2:	e00b      	b.n	80039cc <HAL_RCC_OscConfig+0x354>
 80039b4:	4b5a      	ldr	r3, [pc, #360]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a59      	ldr	r2, [pc, #356]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
 80039c0:	4b57      	ldr	r3, [pc, #348]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	4a56      	ldr	r2, [pc, #344]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 80039c6:	f023 0304 	bic.w	r3, r3, #4
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d015      	beq.n	8003a00 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fd fd7a 	bl	80014cc <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fd fd76 	bl	80014cc <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e092      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ee      	beq.n	80039dc <HAL_RCC_OscConfig+0x364>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fd fd64 	bl	80014cc <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fd fd60 	bl	80014cc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e07c      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1e:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1ee      	bne.n	8003a08 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a30:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	4a3a      	ldr	r2, [pc, #232]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d068      	beq.n	8003b16 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a44:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d060      	beq.n	8003b12 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d145      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a58:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <HAL_RCC_OscConfig+0x4b0>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7fd fd35 	bl	80014cc <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fd fd31 	bl	80014cc <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e04f      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a78:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	019b      	lsls	r3, r3, #6
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	061b      	lsls	r3, r3, #24
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	071b      	lsls	r3, r3, #28
 8003ab0:	491b      	ldr	r1, [pc, #108]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <HAL_RCC_OscConfig+0x4b0>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd fd06 	bl	80014cc <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fd02 	bl	80014cc <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e020      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x44c>
 8003ae2:	e018      	b.n	8003b16 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_RCC_OscConfig+0x4b0>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fd fcef 	bl	80014cc <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fd fceb 	bl	80014cc <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e009      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCC_OscConfig+0x4a8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x47a>
 8003b10:	e001      	b.n	8003b16 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40007000 	.word	0x40007000
 8003b28:	42470060 	.word	0x42470060

08003b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e01d      	b.n	8003b7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fad6 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f000 fb72 	bl	8004254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b06      	cmp	r3, #6
 8003ba2:	d007      	beq.n	8003bb4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b06      	cmp	r3, #6
 8003bf2:	d007      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e01d      	b.n	8003c60 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f815 	bl	8003c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 faff 	bl	8004254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fdca 	bl	8004828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <HAL_TIM_PWM_Start+0x74>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_PWM_Start+0x2c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <HAL_TIM_PWM_Start+0x78>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_PWM_Start+0x30>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_TIM_PWM_Start+0x32>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b06      	cmp	r3, #6
 8003cd2:	d007      	beq.n	8003ce4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d122      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0202 	mvn.w	r2, #2
 8003d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fa6b 	bl	8004216 <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa5d 	bl	8004202 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fa6e 	bl	800422a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d122      	bne.n	8003da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d11b      	bne.n	8003da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0204 	mvn.w	r2, #4
 8003d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa41 	bl	8004216 <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fa33 	bl	8004202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fa44 	bl	800422a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d122      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d11b      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0208 	mvn.w	r2, #8
 8003dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa17 	bl	8004216 <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa09 	bl	8004202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fa1a 	bl	800422a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d122      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d11b      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0210 	mvn.w	r2, #16
 8003e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2208      	movs	r2, #8
 8003e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9ed 	bl	8004216 <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f9df 	bl	8004202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f9f0 	bl	800422a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d10e      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d107      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0201 	mvn.w	r2, #1
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd f86c 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b80      	cmp	r3, #128	; 0x80
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b80      	cmp	r3, #128	; 0x80
 8003e96:	d107      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fd6c 	bl	8004980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d107      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9b5 	bl	800423e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d10e      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d107      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0220 	mvn.w	r2, #32
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fd36 	bl	800496c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e0b4      	b.n	800408c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b0c      	cmp	r3, #12
 8003f36:	f200 809f 	bhi.w	8004078 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08004079 	.word	0x08004079
 8003f48:	08004079 	.word	0x08004079
 8003f4c:	08004079 	.word	0x08004079
 8003f50:	08003fb5 	.word	0x08003fb5
 8003f54:	08004079 	.word	0x08004079
 8003f58:	08004079 	.word	0x08004079
 8003f5c:	08004079 	.word	0x08004079
 8003f60:	08003ff7 	.word	0x08003ff7
 8003f64:	08004079 	.word	0x08004079
 8003f68:	08004079 	.word	0x08004079
 8003f6c:	08004079 	.word	0x08004079
 8003f70:	08004037 	.word	0x08004037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fa0a 	bl	8004394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0204 	bic.w	r2, r2, #4
 8003f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	619a      	str	r2, [r3, #24]
      break;
 8003fb2:	e062      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fa5a 	bl	8004474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6999      	ldr	r1, [r3, #24]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	021a      	lsls	r2, r3, #8
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	619a      	str	r2, [r3, #24]
      break;
 8003ff4:	e041      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 faaf 	bl	8004560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0208 	orr.w	r2, r2, #8
 8004010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0204 	bic.w	r2, r2, #4
 8004020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69d9      	ldr	r1, [r3, #28]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	61da      	str	r2, [r3, #28]
      break;
 8004034:	e021      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fb03 	bl	8004648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69d9      	ldr	r1, [r3, #28]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	021a      	lsls	r2, r3, #8
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	61da      	str	r2, [r3, #28]
      break;
 8004076:	e000      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004078:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_TIM_ConfigClockSource+0x18>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0a6      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x166>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d067      	beq.n	80041b4 <HAL_TIM_ConfigClockSource+0x120>
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d80b      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x6c>
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d073      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0x140>
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d802      	bhi.n	80040f6 <HAL_TIM_ConfigClockSource+0x62>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d06f      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040f4:	e078      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d06c      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0x140>
 80040fa:	2b30      	cmp	r3, #48	; 0x30
 80040fc:	d06a      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040fe:	e073      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004100:	2b70      	cmp	r3, #112	; 0x70
 8004102:	d00d      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0x8c>
 8004104:	2b70      	cmp	r3, #112	; 0x70
 8004106:	d804      	bhi.n	8004112 <HAL_TIM_ConfigClockSource+0x7e>
 8004108:	2b50      	cmp	r3, #80	; 0x50
 800410a:	d033      	beq.n	8004174 <HAL_TIM_ConfigClockSource+0xe0>
 800410c:	2b60      	cmp	r3, #96	; 0x60
 800410e:	d041      	beq.n	8004194 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004110:	e06a      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004116:	d066      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x152>
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411c:	d017      	beq.n	800414e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800411e:	e063      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6899      	ldr	r1, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f000 fb5a 	bl	80047e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004142:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]
      break;
 800414c:	e04c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f000 fb43 	bl	80047e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004170:	609a      	str	r2, [r3, #8]
      break;
 8004172:	e039      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	461a      	mov	r2, r3
 8004182:	f000 fab7 	bl	80046f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2150      	movs	r1, #80	; 0x50
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fb10 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 8004192:	e029      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	461a      	mov	r2, r3
 80041a2:	f000 fad6 	bl	8004752 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2160      	movs	r1, #96	; 0x60
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fb00 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 80041b2:	e019      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	461a      	mov	r2, r3
 80041c2:	f000 fa97 	bl	80046f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2140      	movs	r1, #64	; 0x40
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 faf0 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 80041d2:	e009      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 fae7 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 80041e4:	e000      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a40      	ldr	r2, [pc, #256]	; (8004368 <TIM_Base_SetConfig+0x114>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004272:	d00f      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a3d      	ldr	r2, [pc, #244]	; (800436c <TIM_Base_SetConfig+0x118>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00b      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <TIM_Base_SetConfig+0x11c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d007      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a3b      	ldr	r2, [pc, #236]	; (8004374 <TIM_Base_SetConfig+0x120>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a3a      	ldr	r2, [pc, #232]	; (8004378 <TIM_Base_SetConfig+0x124>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d108      	bne.n	80042a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2f      	ldr	r2, [pc, #188]	; (8004368 <TIM_Base_SetConfig+0x114>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d02b      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b4:	d027      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a2c      	ldr	r2, [pc, #176]	; (800436c <TIM_Base_SetConfig+0x118>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d023      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a2b      	ldr	r2, [pc, #172]	; (8004370 <TIM_Base_SetConfig+0x11c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d01f      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <TIM_Base_SetConfig+0x120>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d01b      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a29      	ldr	r2, [pc, #164]	; (8004378 <TIM_Base_SetConfig+0x124>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d017      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a28      	ldr	r2, [pc, #160]	; (800437c <TIM_Base_SetConfig+0x128>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a27      	ldr	r2, [pc, #156]	; (8004380 <TIM_Base_SetConfig+0x12c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00f      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a26      	ldr	r2, [pc, #152]	; (8004384 <TIM_Base_SetConfig+0x130>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00b      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a25      	ldr	r2, [pc, #148]	; (8004388 <TIM_Base_SetConfig+0x134>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a24      	ldr	r2, [pc, #144]	; (800438c <TIM_Base_SetConfig+0x138>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a23      	ldr	r2, [pc, #140]	; (8004390 <TIM_Base_SetConfig+0x13c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d108      	bne.n	8004318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <TIM_Base_SetConfig+0x114>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_Base_SetConfig+0xf8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a0c      	ldr	r2, [pc, #48]	; (8004378 <TIM_Base_SetConfig+0x124>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d103      	bne.n	8004354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	615a      	str	r2, [r3, #20]
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40000c00 	.word	0x40000c00
 8004378:	40010400 	.word	0x40010400
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800
 8004388:	40001800 	.word	0x40001800
 800438c:	40001c00 	.word	0x40001c00
 8004390:	40002000 	.word	0x40002000

08004394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0201 	bic.w	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 0302 	bic.w	r3, r3, #2
 80043dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a20      	ldr	r2, [pc, #128]	; (800446c <TIM_OC1_SetConfig+0xd8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d003      	beq.n	80043f8 <TIM_OC1_SetConfig+0x64>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a1f      	ldr	r2, [pc, #124]	; (8004470 <TIM_OC1_SetConfig+0xdc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10c      	bne.n	8004412 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f023 0308 	bic.w	r3, r3, #8
 80043fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <TIM_OC1_SetConfig+0xd8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <TIM_OC1_SetConfig+0x8e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <TIM_OC1_SetConfig+0xdc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d111      	bne.n	8004446 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	621a      	str	r2, [r3, #32]
}
 8004460:	bf00      	nop
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40010000 	.word	0x40010000
 8004470:	40010400 	.word	0x40010400

08004474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0210 	bic.w	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0320 	bic.w	r3, r3, #32
 80044be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a22      	ldr	r2, [pc, #136]	; (8004558 <TIM_OC2_SetConfig+0xe4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_OC2_SetConfig+0x68>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a21      	ldr	r2, [pc, #132]	; (800455c <TIM_OC2_SetConfig+0xe8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10d      	bne.n	80044f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a17      	ldr	r2, [pc, #92]	; (8004558 <TIM_OC2_SetConfig+0xe4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_OC2_SetConfig+0x94>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a16      	ldr	r2, [pc, #88]	; (800455c <TIM_OC2_SetConfig+0xe8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d113      	bne.n	8004530 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800450e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40010000 	.word	0x40010000
 800455c:	40010400 	.word	0x40010400

08004560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a21      	ldr	r2, [pc, #132]	; (8004640 <TIM_OC3_SetConfig+0xe0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_OC3_SetConfig+0x66>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a20      	ldr	r2, [pc, #128]	; (8004644 <TIM_OC3_SetConfig+0xe4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10d      	bne.n	80045e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a16      	ldr	r2, [pc, #88]	; (8004640 <TIM_OC3_SetConfig+0xe0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_OC3_SetConfig+0x92>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <TIM_OC3_SetConfig+0xe4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d113      	bne.n	800461a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	621a      	str	r2, [r3, #32]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40010000 	.word	0x40010000
 8004644:	40010400 	.word	0x40010400

08004648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	031b      	lsls	r3, r3, #12
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <TIM_OC4_SetConfig+0xa4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC4_SetConfig+0x68>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <TIM_OC4_SetConfig+0xa8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d109      	bne.n	80046c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	019b      	lsls	r3, r3, #6
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40010400 	.word	0x40010400

080046f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 030a 	bic.w	r3, r3, #10
 8004730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	621a      	str	r2, [r3, #32]
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004752:	b480      	push	{r7}
 8004754:	b087      	sub	sp, #28
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0210 	bic.w	r2, r3, #16
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800477c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	031b      	lsls	r3, r3, #12
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800478e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f043 0307 	orr.w	r3, r3, #7
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	021a      	lsls	r2, r3, #8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	431a      	orrs	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	2201      	movs	r2, #1
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1a      	ldr	r2, [r3, #32]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	43db      	mvns	r3, r3
 800484a:	401a      	ands	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	431a      	orrs	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004888:	2302      	movs	r3, #2
 800488a:	e05a      	b.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a21      	ldr	r2, [pc, #132]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d8:	d01d      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1a      	ldr	r2, [pc, #104]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a18      	ldr	r2, [pc, #96]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a17      	ldr	r2, [pc, #92]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a15      	ldr	r2, [pc, #84]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10c      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4313      	orrs	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40010400 	.word	0x40010400
 8004964:	40014000 	.word	0x40014000
 8004968:	40001800 	.word	0x40001800

0800496c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e03f      	b.n	8004a26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fc fc1a 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2224      	movs	r2, #36	; 0x24
 80049c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9d9 	bl	8004d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d166      	bne.n	8004b18 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_UART_Receive_DMA+0x26>
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e05f      	b.n	8004b1a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_UART_Receive_DMA+0x38>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e058      	b.n	8004b1a <HAL_UART_Receive_DMA+0xea>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	88fa      	ldrh	r2, [r7, #6]
 8004a7a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2222      	movs	r2, #34	; 0x22
 8004a86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <HAL_UART_Receive_DMA+0xf4>)
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a96:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <HAL_UART_Receive_DMA+0xf8>)
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <HAL_UART_Receive_DMA+0xfc>)
 8004aa0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004aaa:	f107 0308 	add.w	r3, r7, #8
 8004aae:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	f7fc fef1 	bl	80018a8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b12:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	08004c0f 	.word	0x08004c0f
 8004b28:	08004c77 	.word	0x08004c77
 8004b2c:	08004c93 	.word	0x08004c93

08004b30 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b80      	cmp	r3, #128	; 0x80
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b21      	cmp	r3, #33	; 0x21
 8004b5c:	d116      	bne.n	8004b8c <HAL_UART_DMAStop+0x5c>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d013      	beq.n	8004b8c <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b72:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc fee9 	bl	8001958 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f8cd 	bl	8004d26 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b22      	cmp	r3, #34	; 0x22
 8004bac:	d116      	bne.n	8004bdc <HAL_UART_DMAStop+0xac>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fc fec1 	bl	8001958 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8bb 	bl	8004d52 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d11e      	bne.n	8004c68 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c3e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0201 	bic.w	r2, r2, #1
 8004c4e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7fc f9a1 	bl	8000fb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff ffae 	bl	8004be6 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b21      	cmp	r3, #33	; 0x21
 8004cc4:	d108      	bne.n	8004cd8 <UART_DMAError+0x46>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004cd2:	68b8      	ldr	r0, [r7, #8]
 8004cd4:	f000 f827 	bl	8004d26 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	2300      	movne	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b22      	cmp	r3, #34	; 0x22
 8004cf8:	d108      	bne.n	8004d0c <UART_DMAError+0x7a>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2200      	movs	r2, #0
 8004d04:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004d06:	68b8      	ldr	r0, [r7, #8]
 8004d08:	f000 f823 	bl	8004d52 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	f043 0210 	orr.w	r2, r3, #16
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	f7ff ff6e 	bl	8004bfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d3c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004dd2:	f023 030c 	bic.w	r3, r3, #12
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfe:	f040 818b 	bne.w	8005118 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4ac1      	ldr	r2, [pc, #772]	; (800510c <UART_SetConfig+0x37c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d005      	beq.n	8004e18 <UART_SetConfig+0x88>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4abf      	ldr	r2, [pc, #764]	; (8005110 <UART_SetConfig+0x380>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	f040 80bd 	bne.w	8004f92 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e18:	f7fe fac8 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 8004e1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	461d      	mov	r5, r3
 8004e22:	f04f 0600 	mov.w	r6, #0
 8004e26:	46a8      	mov	r8, r5
 8004e28:	46b1      	mov	r9, r6
 8004e2a:	eb18 0308 	adds.w	r3, r8, r8
 8004e2e:	eb49 0409 	adc.w	r4, r9, r9
 8004e32:	4698      	mov	r8, r3
 8004e34:	46a1      	mov	r9, r4
 8004e36:	eb18 0805 	adds.w	r8, r8, r5
 8004e3a:	eb49 0906 	adc.w	r9, r9, r6
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e52:	4688      	mov	r8, r1
 8004e54:	4691      	mov	r9, r2
 8004e56:	eb18 0005 	adds.w	r0, r8, r5
 8004e5a:	eb49 0106 	adc.w	r1, r9, r6
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	461d      	mov	r5, r3
 8004e64:	f04f 0600 	mov.w	r6, #0
 8004e68:	196b      	adds	r3, r5, r5
 8004e6a:	eb46 0406 	adc.w	r4, r6, r6
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4623      	mov	r3, r4
 8004e72:	f7fb f9c7 	bl	8000204 <__aeabi_uldivmod>
 8004e76:	4603      	mov	r3, r0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4ba5      	ldr	r3, [pc, #660]	; (8005114 <UART_SetConfig+0x384>)
 8004e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	461d      	mov	r5, r3
 8004e8c:	f04f 0600 	mov.w	r6, #0
 8004e90:	46a9      	mov	r9, r5
 8004e92:	46b2      	mov	sl, r6
 8004e94:	eb19 0309 	adds.w	r3, r9, r9
 8004e98:	eb4a 040a 	adc.w	r4, sl, sl
 8004e9c:	4699      	mov	r9, r3
 8004e9e:	46a2      	mov	sl, r4
 8004ea0:	eb19 0905 	adds.w	r9, r9, r5
 8004ea4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004eb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ebc:	4689      	mov	r9, r1
 8004ebe:	4692      	mov	sl, r2
 8004ec0:	eb19 0005 	adds.w	r0, r9, r5
 8004ec4:	eb4a 0106 	adc.w	r1, sl, r6
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	461d      	mov	r5, r3
 8004ece:	f04f 0600 	mov.w	r6, #0
 8004ed2:	196b      	adds	r3, r5, r5
 8004ed4:	eb46 0406 	adc.w	r4, r6, r6
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4623      	mov	r3, r4
 8004edc:	f7fb f992 	bl	8000204 <__aeabi_uldivmod>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b8b      	ldr	r3, [pc, #556]	; (8005114 <UART_SetConfig+0x384>)
 8004ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	2164      	movs	r1, #100	; 0x64
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	3332      	adds	r3, #50	; 0x32
 8004efa:	4a86      	ldr	r2, [pc, #536]	; (8005114 <UART_SetConfig+0x384>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f08:	4498      	add	r8, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	461d      	mov	r5, r3
 8004f0e:	f04f 0600 	mov.w	r6, #0
 8004f12:	46a9      	mov	r9, r5
 8004f14:	46b2      	mov	sl, r6
 8004f16:	eb19 0309 	adds.w	r3, r9, r9
 8004f1a:	eb4a 040a 	adc.w	r4, sl, sl
 8004f1e:	4699      	mov	r9, r3
 8004f20:	46a2      	mov	sl, r4
 8004f22:	eb19 0905 	adds.w	r9, r9, r5
 8004f26:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f3e:	4689      	mov	r9, r1
 8004f40:	4692      	mov	sl, r2
 8004f42:	eb19 0005 	adds.w	r0, r9, r5
 8004f46:	eb4a 0106 	adc.w	r1, sl, r6
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	461d      	mov	r5, r3
 8004f50:	f04f 0600 	mov.w	r6, #0
 8004f54:	196b      	adds	r3, r5, r5
 8004f56:	eb46 0406 	adc.w	r4, r6, r6
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	f7fb f951 	bl	8000204 <__aeabi_uldivmod>
 8004f62:	4603      	mov	r3, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	461a      	mov	r2, r3
 8004f68:	4b6a      	ldr	r3, [pc, #424]	; (8005114 <UART_SetConfig+0x384>)
 8004f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2164      	movs	r1, #100	; 0x64
 8004f72:	fb01 f303 	mul.w	r3, r1, r3
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	3332      	adds	r3, #50	; 0x32
 8004f7c:	4a65      	ldr	r2, [pc, #404]	; (8005114 <UART_SetConfig+0x384>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f003 0207 	and.w	r2, r3, #7
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4442      	add	r2, r8
 8004f8e:	609a      	str	r2, [r3, #8]
 8004f90:	e26f      	b.n	8005472 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f92:	f7fe f9f7 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 8004f96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	461d      	mov	r5, r3
 8004f9c:	f04f 0600 	mov.w	r6, #0
 8004fa0:	46a8      	mov	r8, r5
 8004fa2:	46b1      	mov	r9, r6
 8004fa4:	eb18 0308 	adds.w	r3, r8, r8
 8004fa8:	eb49 0409 	adc.w	r4, r9, r9
 8004fac:	4698      	mov	r8, r3
 8004fae:	46a1      	mov	r9, r4
 8004fb0:	eb18 0805 	adds.w	r8, r8, r5
 8004fb4:	eb49 0906 	adc.w	r9, r9, r6
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fcc:	4688      	mov	r8, r1
 8004fce:	4691      	mov	r9, r2
 8004fd0:	eb18 0005 	adds.w	r0, r8, r5
 8004fd4:	eb49 0106 	adc.w	r1, r9, r6
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	461d      	mov	r5, r3
 8004fde:	f04f 0600 	mov.w	r6, #0
 8004fe2:	196b      	adds	r3, r5, r5
 8004fe4:	eb46 0406 	adc.w	r4, r6, r6
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4623      	mov	r3, r4
 8004fec:	f7fb f90a 	bl	8000204 <__aeabi_uldivmod>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b47      	ldr	r3, [pc, #284]	; (8005114 <UART_SetConfig+0x384>)
 8004ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	461d      	mov	r5, r3
 8005006:	f04f 0600 	mov.w	r6, #0
 800500a:	46a9      	mov	r9, r5
 800500c:	46b2      	mov	sl, r6
 800500e:	eb19 0309 	adds.w	r3, r9, r9
 8005012:	eb4a 040a 	adc.w	r4, sl, sl
 8005016:	4699      	mov	r9, r3
 8005018:	46a2      	mov	sl, r4
 800501a:	eb19 0905 	adds.w	r9, r9, r5
 800501e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005022:	f04f 0100 	mov.w	r1, #0
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800502e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005032:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005036:	4689      	mov	r9, r1
 8005038:	4692      	mov	sl, r2
 800503a:	eb19 0005 	adds.w	r0, r9, r5
 800503e:	eb4a 0106 	adc.w	r1, sl, r6
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	461d      	mov	r5, r3
 8005048:	f04f 0600 	mov.w	r6, #0
 800504c:	196b      	adds	r3, r5, r5
 800504e:	eb46 0406 	adc.w	r4, r6, r6
 8005052:	461a      	mov	r2, r3
 8005054:	4623      	mov	r3, r4
 8005056:	f7fb f8d5 	bl	8000204 <__aeabi_uldivmod>
 800505a:	4603      	mov	r3, r0
 800505c:	460c      	mov	r4, r1
 800505e:	461a      	mov	r2, r3
 8005060:	4b2c      	ldr	r3, [pc, #176]	; (8005114 <UART_SetConfig+0x384>)
 8005062:	fba3 1302 	umull	r1, r3, r3, r2
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	2164      	movs	r1, #100	; 0x64
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	3332      	adds	r3, #50	; 0x32
 8005074:	4a27      	ldr	r2, [pc, #156]	; (8005114 <UART_SetConfig+0x384>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005082:	4498      	add	r8, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	461d      	mov	r5, r3
 8005088:	f04f 0600 	mov.w	r6, #0
 800508c:	46a9      	mov	r9, r5
 800508e:	46b2      	mov	sl, r6
 8005090:	eb19 0309 	adds.w	r3, r9, r9
 8005094:	eb4a 040a 	adc.w	r4, sl, sl
 8005098:	4699      	mov	r9, r3
 800509a:	46a2      	mov	sl, r4
 800509c:	eb19 0905 	adds.w	r9, r9, r5
 80050a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050b8:	4689      	mov	r9, r1
 80050ba:	4692      	mov	sl, r2
 80050bc:	eb19 0005 	adds.w	r0, r9, r5
 80050c0:	eb4a 0106 	adc.w	r1, sl, r6
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	461d      	mov	r5, r3
 80050ca:	f04f 0600 	mov.w	r6, #0
 80050ce:	196b      	adds	r3, r5, r5
 80050d0:	eb46 0406 	adc.w	r4, r6, r6
 80050d4:	461a      	mov	r2, r3
 80050d6:	4623      	mov	r3, r4
 80050d8:	f7fb f894 	bl	8000204 <__aeabi_uldivmod>
 80050dc:	4603      	mov	r3, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	461a      	mov	r2, r3
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <UART_SetConfig+0x384>)
 80050e4:	fba3 1302 	umull	r1, r3, r3, r2
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	2164      	movs	r1, #100	; 0x64
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	3332      	adds	r3, #50	; 0x32
 80050f6:	4a07      	ldr	r2, [pc, #28]	; (8005114 <UART_SetConfig+0x384>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	f003 0207 	and.w	r2, r3, #7
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4442      	add	r2, r8
 8005108:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800510a:	e1b2      	b.n	8005472 <UART_SetConfig+0x6e2>
 800510c:	40011000 	.word	0x40011000
 8005110:	40011400 	.word	0x40011400
 8005114:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4ad7      	ldr	r2, [pc, #860]	; (800547c <UART_SetConfig+0x6ec>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d005      	beq.n	800512e <UART_SetConfig+0x39e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4ad6      	ldr	r2, [pc, #856]	; (8005480 <UART_SetConfig+0x6f0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	f040 80d1 	bne.w	80052d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800512e:	f7fe f93d 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 8005132:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	469a      	mov	sl, r3
 8005138:	f04f 0b00 	mov.w	fp, #0
 800513c:	46d0      	mov	r8, sl
 800513e:	46d9      	mov	r9, fp
 8005140:	eb18 0308 	adds.w	r3, r8, r8
 8005144:	eb49 0409 	adc.w	r4, r9, r9
 8005148:	4698      	mov	r8, r3
 800514a:	46a1      	mov	r9, r4
 800514c:	eb18 080a 	adds.w	r8, r8, sl
 8005150:	eb49 090b 	adc.w	r9, r9, fp
 8005154:	f04f 0100 	mov.w	r1, #0
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005160:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005164:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005168:	4688      	mov	r8, r1
 800516a:	4691      	mov	r9, r2
 800516c:	eb1a 0508 	adds.w	r5, sl, r8
 8005170:	eb4b 0609 	adc.w	r6, fp, r9
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4619      	mov	r1, r3
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	f04f 0400 	mov.w	r4, #0
 8005186:	0094      	lsls	r4, r2, #2
 8005188:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800518c:	008b      	lsls	r3, r1, #2
 800518e:	461a      	mov	r2, r3
 8005190:	4623      	mov	r3, r4
 8005192:	4628      	mov	r0, r5
 8005194:	4631      	mov	r1, r6
 8005196:	f7fb f835 	bl	8000204 <__aeabi_uldivmod>
 800519a:	4603      	mov	r3, r0
 800519c:	460c      	mov	r4, r1
 800519e:	461a      	mov	r2, r3
 80051a0:	4bb8      	ldr	r3, [pc, #736]	; (8005484 <UART_SetConfig+0x6f4>)
 80051a2:	fba3 2302 	umull	r2, r3, r3, r2
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	469b      	mov	fp, r3
 80051b0:	f04f 0c00 	mov.w	ip, #0
 80051b4:	46d9      	mov	r9, fp
 80051b6:	46e2      	mov	sl, ip
 80051b8:	eb19 0309 	adds.w	r3, r9, r9
 80051bc:	eb4a 040a 	adc.w	r4, sl, sl
 80051c0:	4699      	mov	r9, r3
 80051c2:	46a2      	mov	sl, r4
 80051c4:	eb19 090b 	adds.w	r9, r9, fp
 80051c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051cc:	f04f 0100 	mov.w	r1, #0
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051e0:	4689      	mov	r9, r1
 80051e2:	4692      	mov	sl, r2
 80051e4:	eb1b 0509 	adds.w	r5, fp, r9
 80051e8:	eb4c 060a 	adc.w	r6, ip, sl
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4619      	mov	r1, r3
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	f04f 0400 	mov.w	r4, #0
 80051fe:	0094      	lsls	r4, r2, #2
 8005200:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005204:	008b      	lsls	r3, r1, #2
 8005206:	461a      	mov	r2, r3
 8005208:	4623      	mov	r3, r4
 800520a:	4628      	mov	r0, r5
 800520c:	4631      	mov	r1, r6
 800520e:	f7fa fff9 	bl	8000204 <__aeabi_uldivmod>
 8005212:	4603      	mov	r3, r0
 8005214:	460c      	mov	r4, r1
 8005216:	461a      	mov	r2, r3
 8005218:	4b9a      	ldr	r3, [pc, #616]	; (8005484 <UART_SetConfig+0x6f4>)
 800521a:	fba3 1302 	umull	r1, r3, r3, r2
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	2164      	movs	r1, #100	; 0x64
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	3332      	adds	r3, #50	; 0x32
 800522c:	4a95      	ldr	r2, [pc, #596]	; (8005484 <UART_SetConfig+0x6f4>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005238:	4498      	add	r8, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	469b      	mov	fp, r3
 800523e:	f04f 0c00 	mov.w	ip, #0
 8005242:	46d9      	mov	r9, fp
 8005244:	46e2      	mov	sl, ip
 8005246:	eb19 0309 	adds.w	r3, r9, r9
 800524a:	eb4a 040a 	adc.w	r4, sl, sl
 800524e:	4699      	mov	r9, r3
 8005250:	46a2      	mov	sl, r4
 8005252:	eb19 090b 	adds.w	r9, r9, fp
 8005256:	eb4a 0a0c 	adc.w	sl, sl, ip
 800525a:	f04f 0100 	mov.w	r1, #0
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005266:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800526a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800526e:	4689      	mov	r9, r1
 8005270:	4692      	mov	sl, r2
 8005272:	eb1b 0509 	adds.w	r5, fp, r9
 8005276:	eb4c 060a 	adc.w	r6, ip, sl
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4619      	mov	r1, r3
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	f04f 0400 	mov.w	r4, #0
 800528c:	0094      	lsls	r4, r2, #2
 800528e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005292:	008b      	lsls	r3, r1, #2
 8005294:	461a      	mov	r2, r3
 8005296:	4623      	mov	r3, r4
 8005298:	4628      	mov	r0, r5
 800529a:	4631      	mov	r1, r6
 800529c:	f7fa ffb2 	bl	8000204 <__aeabi_uldivmod>
 80052a0:	4603      	mov	r3, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	461a      	mov	r2, r3
 80052a6:	4b77      	ldr	r3, [pc, #476]	; (8005484 <UART_SetConfig+0x6f4>)
 80052a8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	2164      	movs	r1, #100	; 0x64
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	3332      	adds	r3, #50	; 0x32
 80052ba:	4a72      	ldr	r2, [pc, #456]	; (8005484 <UART_SetConfig+0x6f4>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f003 020f 	and.w	r2, r3, #15
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4442      	add	r2, r8
 80052cc:	609a      	str	r2, [r3, #8]
 80052ce:	e0d0      	b.n	8005472 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fe f858 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 80052d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	469a      	mov	sl, r3
 80052da:	f04f 0b00 	mov.w	fp, #0
 80052de:	46d0      	mov	r8, sl
 80052e0:	46d9      	mov	r9, fp
 80052e2:	eb18 0308 	adds.w	r3, r8, r8
 80052e6:	eb49 0409 	adc.w	r4, r9, r9
 80052ea:	4698      	mov	r8, r3
 80052ec:	46a1      	mov	r9, r4
 80052ee:	eb18 080a 	adds.w	r8, r8, sl
 80052f2:	eb49 090b 	adc.w	r9, r9, fp
 80052f6:	f04f 0100 	mov.w	r1, #0
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005302:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005306:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800530a:	4688      	mov	r8, r1
 800530c:	4691      	mov	r9, r2
 800530e:	eb1a 0508 	adds.w	r5, sl, r8
 8005312:	eb4b 0609 	adc.w	r6, fp, r9
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4619      	mov	r1, r3
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	f04f 0400 	mov.w	r4, #0
 8005328:	0094      	lsls	r4, r2, #2
 800532a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800532e:	008b      	lsls	r3, r1, #2
 8005330:	461a      	mov	r2, r3
 8005332:	4623      	mov	r3, r4
 8005334:	4628      	mov	r0, r5
 8005336:	4631      	mov	r1, r6
 8005338:	f7fa ff64 	bl	8000204 <__aeabi_uldivmod>
 800533c:	4603      	mov	r3, r0
 800533e:	460c      	mov	r4, r1
 8005340:	461a      	mov	r2, r3
 8005342:	4b50      	ldr	r3, [pc, #320]	; (8005484 <UART_SetConfig+0x6f4>)
 8005344:	fba3 2302 	umull	r2, r3, r3, r2
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	469b      	mov	fp, r3
 8005352:	f04f 0c00 	mov.w	ip, #0
 8005356:	46d9      	mov	r9, fp
 8005358:	46e2      	mov	sl, ip
 800535a:	eb19 0309 	adds.w	r3, r9, r9
 800535e:	eb4a 040a 	adc.w	r4, sl, sl
 8005362:	4699      	mov	r9, r3
 8005364:	46a2      	mov	sl, r4
 8005366:	eb19 090b 	adds.w	r9, r9, fp
 800536a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800536e:	f04f 0100 	mov.w	r1, #0
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800537a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800537e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005382:	4689      	mov	r9, r1
 8005384:	4692      	mov	sl, r2
 8005386:	eb1b 0509 	adds.w	r5, fp, r9
 800538a:	eb4c 060a 	adc.w	r6, ip, sl
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4619      	mov	r1, r3
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	f04f 0400 	mov.w	r4, #0
 80053a0:	0094      	lsls	r4, r2, #2
 80053a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053a6:	008b      	lsls	r3, r1, #2
 80053a8:	461a      	mov	r2, r3
 80053aa:	4623      	mov	r3, r4
 80053ac:	4628      	mov	r0, r5
 80053ae:	4631      	mov	r1, r6
 80053b0:	f7fa ff28 	bl	8000204 <__aeabi_uldivmod>
 80053b4:	4603      	mov	r3, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	461a      	mov	r2, r3
 80053ba:	4b32      	ldr	r3, [pc, #200]	; (8005484 <UART_SetConfig+0x6f4>)
 80053bc:	fba3 1302 	umull	r1, r3, r3, r2
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	2164      	movs	r1, #100	; 0x64
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	3332      	adds	r3, #50	; 0x32
 80053ce:	4a2d      	ldr	r2, [pc, #180]	; (8005484 <UART_SetConfig+0x6f4>)
 80053d0:	fba2 2303 	umull	r2, r3, r2, r3
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053da:	4498      	add	r8, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	469b      	mov	fp, r3
 80053e0:	f04f 0c00 	mov.w	ip, #0
 80053e4:	46d9      	mov	r9, fp
 80053e6:	46e2      	mov	sl, ip
 80053e8:	eb19 0309 	adds.w	r3, r9, r9
 80053ec:	eb4a 040a 	adc.w	r4, sl, sl
 80053f0:	4699      	mov	r9, r3
 80053f2:	46a2      	mov	sl, r4
 80053f4:	eb19 090b 	adds.w	r9, r9, fp
 80053f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053fc:	f04f 0100 	mov.w	r1, #0
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005408:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800540c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005410:	4689      	mov	r9, r1
 8005412:	4692      	mov	sl, r2
 8005414:	eb1b 0509 	adds.w	r5, fp, r9
 8005418:	eb4c 060a 	adc.w	r6, ip, sl
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4619      	mov	r1, r3
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	f04f 0400 	mov.w	r4, #0
 800542e:	0094      	lsls	r4, r2, #2
 8005430:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005434:	008b      	lsls	r3, r1, #2
 8005436:	461a      	mov	r2, r3
 8005438:	4623      	mov	r3, r4
 800543a:	4628      	mov	r0, r5
 800543c:	4631      	mov	r1, r6
 800543e:	f7fa fee1 	bl	8000204 <__aeabi_uldivmod>
 8005442:	4603      	mov	r3, r0
 8005444:	460c      	mov	r4, r1
 8005446:	461a      	mov	r2, r3
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <UART_SetConfig+0x6f4>)
 800544a:	fba3 1302 	umull	r1, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	2164      	movs	r1, #100	; 0x64
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	3332      	adds	r3, #50	; 0x32
 800545c:	4a09      	ldr	r2, [pc, #36]	; (8005484 <UART_SetConfig+0x6f4>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	f003 020f 	and.w	r2, r3, #15
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4442      	add	r2, r8
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	e7ff      	b.n	8005472 <UART_SetConfig+0x6e2>
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547c:	40011000 	.word	0x40011000
 8005480:	40011400 	.word	0x40011400
 8005484:	51eb851f 	.word	0x51eb851f

08005488 <__libc_init_array>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4e0d      	ldr	r6, [pc, #52]	; (80054c0 <__libc_init_array+0x38>)
 800548c:	4c0d      	ldr	r4, [pc, #52]	; (80054c4 <__libc_init_array+0x3c>)
 800548e:	1ba4      	subs	r4, r4, r6
 8005490:	10a4      	asrs	r4, r4, #2
 8005492:	2500      	movs	r5, #0
 8005494:	42a5      	cmp	r5, r4
 8005496:	d109      	bne.n	80054ac <__libc_init_array+0x24>
 8005498:	4e0b      	ldr	r6, [pc, #44]	; (80054c8 <__libc_init_array+0x40>)
 800549a:	4c0c      	ldr	r4, [pc, #48]	; (80054cc <__libc_init_array+0x44>)
 800549c:	f000 f82c 	bl	80054f8 <_init>
 80054a0:	1ba4      	subs	r4, r4, r6
 80054a2:	10a4      	asrs	r4, r4, #2
 80054a4:	2500      	movs	r5, #0
 80054a6:	42a5      	cmp	r5, r4
 80054a8:	d105      	bne.n	80054b6 <__libc_init_array+0x2e>
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054b0:	4798      	blx	r3
 80054b2:	3501      	adds	r5, #1
 80054b4:	e7ee      	b.n	8005494 <__libc_init_array+0xc>
 80054b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054ba:	4798      	blx	r3
 80054bc:	3501      	adds	r5, #1
 80054be:	e7f2      	b.n	80054a6 <__libc_init_array+0x1e>
 80054c0:	08005538 	.word	0x08005538
 80054c4:	08005538 	.word	0x08005538
 80054c8:	08005538 	.word	0x08005538
 80054cc:	0800553c 	.word	0x0800553c

080054d0 <memcpy>:
 80054d0:	b510      	push	{r4, lr}
 80054d2:	1e43      	subs	r3, r0, #1
 80054d4:	440a      	add	r2, r1
 80054d6:	4291      	cmp	r1, r2
 80054d8:	d100      	bne.n	80054dc <memcpy+0xc>
 80054da:	bd10      	pop	{r4, pc}
 80054dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e4:	e7f7      	b.n	80054d6 <memcpy+0x6>

080054e6 <memset>:
 80054e6:	4402      	add	r2, r0
 80054e8:	4603      	mov	r3, r0
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d100      	bne.n	80054f0 <memset+0xa>
 80054ee:	4770      	bx	lr
 80054f0:	f803 1b01 	strb.w	r1, [r3], #1
 80054f4:	e7f9      	b.n	80054ea <memset+0x4>
	...

080054f8 <_init>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr

08005504 <_fini>:
 8005504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005506:	bf00      	nop
 8005508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550a:	bc08      	pop	{r3}
 800550c:	469e      	mov	lr, r3
 800550e:	4770      	bx	lr
