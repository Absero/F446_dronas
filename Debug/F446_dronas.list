
F446_dronas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000711c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007300  08007300  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007300  08007300  00017300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007308  08007308  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000010  08007320  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08007320  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f662  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020f5  00000000  00000000  0002f6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00031798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  00032728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ac9  00000000  00000000  000335d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb3c  00000000  00000000  00055099  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce16b  00000000  00000000  00060bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012ed40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000421c  00000000  00000000  0012edbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080072c8 	.word	0x080072c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080072c8 	.word	0x080072c8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <AG_start>:
#include "AccGyro.h"

void AG_start(I2C_HandleTypeDef *i2c_instance) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
#if Gyro_FullScale==250
	uint8_t gyroFS = 0;
#elif Gyro_FullScale==500
	uint8_t gyroFS = 1;
#elif Gyro_FullScale==1000
	uint8_t gyroFS = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	73fb      	strb	r3, [r7, #15]
#if ACC_FullScale==2
	uint8_t accFS=0;
#elif ACC_FullScale==4
	uint8_t accFS=1;
#elif ACC_FullScale==8
	uint8_t accFS = 2;
 8000510:	2302      	movs	r3, #2
 8000512:	73bb      	strb	r3, [r7, #14]
#elif ACC_FullScale==16
	uint8_t accFS=3;
#endif

	AG.i2c = i2c_instance;
 8000514:	4a19      	ldr	r2, [pc, #100]	; (800057c <AG_start+0x78>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6013      	str	r3, [r2, #0]

	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	206b      	movs	r0, #107	; 0x6b
 800051e:	f000 f90b 	bl	8000738 <I2C_Write8>
	HAL_Delay(100);
 8000522:	2064      	movs	r0, #100	; 0x64
 8000524:	f001 fa94 	bl	8001a50 <HAL_Delay>

	//Clock Source
	I2C_Write8(PWR_MAGT_1_REG, 0);
 8000528:	2100      	movs	r1, #0
 800052a:	206b      	movs	r0, #107	; 0x6b
 800052c:	f000 f904 	bl	8000738 <I2C_Write8>
	HAL_Delay(100);  // should wait 10ms after changeing the clock setting.
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f001 fa8d 	bl	8001a50 <HAL_Delay>

	//Set the Digital Low Pass Filter
	I2C_Write8(CONFIG_REG, ACC_Filtras);
 8000536:	2100      	movs	r1, #0
 8000538:	201a      	movs	r0, #26
 800053a:	f000 f8fd 	bl	8000738 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	I2C_Write8(GYRO_CONFIG_REG, gyroFS << 3);
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4619      	mov	r1, r3
 8000546:	201b      	movs	r0, #27
 8000548:	f000 f8f6 	bl	8000738 <I2C_Write8>

	//Select the Accelerometer Full Scale Range

	I2C_Write8(ACCEL_CONFIG_REG, accFS << 3);
 800054c:	7bbb      	ldrb	r3, [r7, #14]
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4619      	mov	r1, r3
 8000554:	201c      	movs	r0, #28
 8000556:	f000 f8ef 	bl	8000738 <I2C_Write8>
	//Set SRD To Default
	I2C_Write8(SMPLRT_DIV_REG, 0x04);
 800055a:	2104      	movs	r1, #4
 800055c:	2019      	movs	r0, #25
 800055e:	f000 f8eb 	bl	8000738 <I2C_Write8>

	//clear flag after read
	I2C_Write8(INT_PIN_CFG, (1 << 4) | (1 << 5));
 8000562:	2130      	movs	r1, #48	; 0x30
 8000564:	2037      	movs	r0, #55	; 0x37
 8000566:	f000 f8e7 	bl	8000738 <I2C_Write8>

	//enable interupt
	I2C_Write8(INT_ENABLE_REG, 1);
 800056a:	2101      	movs	r1, #1
 800056c:	2038      	movs	r0, #56	; 0x38
 800056e:	f000 f8e3 	bl	8000738 <I2C_Write8>
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000002c 	.word	0x2000002c

08000580 <AG_AddNewValues>:

void AG_AddNewValues(int16_t x, int16_t y, int16_t z) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
 800058a:	460b      	mov	r3, r1
 800058c:	80bb      	strh	r3, [r7, #4]
 800058e:	4613      	mov	r3, r2
 8000590:	807b      	strh	r3, [r7, #2]
	if (AG.ValueBuffer.Counter < ACC_MeanValues) AG.ValueBuffer.Counter++;
 8000592:	4b68      	ldr	r3, [pc, #416]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000594:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8000598:	2b31      	cmp	r3, #49	; 0x31
 800059a:	d807      	bhi.n	80005ac <AG_AddNewValues+0x2c>
 800059c:	4b65      	ldr	r3, [pc, #404]	; (8000734 <AG_AddNewValues+0x1b4>)
 800059e:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 80005a2:	3301      	adds	r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b63      	ldr	r3, [pc, #396]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005a8:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d

	AG.LastRawValues.x = x;
 80005ac:	4a61      	ldr	r2, [pc, #388]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	8093      	strh	r3, [r2, #4]
	AG.LastRawValues.y = y;
 80005b2:	4a60      	ldr	r2, [pc, #384]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	80d3      	strh	r3, [r2, #6]
	AG.LastRawValues.z = z;
 80005b8:	4a5e      	ldr	r2, [pc, #376]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	8113      	strh	r3, [r2, #8]

	uint8_t currentPlace = AG.ValueBuffer.Place;
 80005be:	4b5d      	ldr	r3, [pc, #372]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005c0:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80005c4:	73fb      	strb	r3, [r7, #15]

	//atimti seniausias reiksmes
	AG.ValueBuffer.Sum.x -= AG.ValueBuffer.ValueArrays.x[currentPlace];
 80005c6:	4b5b      	ldr	r3, [pc, #364]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005c8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	4959      	ldr	r1, [pc, #356]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005d0:	3304      	adds	r3, #4
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	440b      	add	r3, r1
 80005d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	4a55      	ldr	r2, [pc, #340]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
	AG.ValueBuffer.Sum.y -= AG.ValueBuffer.ValueArrays.y[currentPlace];
 80005e2:	4b54      	ldr	r3, [pc, #336]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005e4:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	4952      	ldr	r1, [pc, #328]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005ec:	3334      	adds	r3, #52	; 0x34
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	440b      	add	r3, r1
 80005f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	4a4e      	ldr	r2, [pc, #312]	; (8000734 <AG_AddNewValues+0x1b4>)
 80005fa:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	AG.ValueBuffer.Sum.z -= AG.ValueBuffer.ValueArrays.z[currentPlace];
 80005fe:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000600:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	494b      	ldr	r1, [pc, #300]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000608:	3368      	adds	r3, #104	; 0x68
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	440b      	add	r3, r1
 800060e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	4a47      	ldr	r2, [pc, #284]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000616:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

	//irasyti naujausias reiksmes buferyje
	AG.ValueBuffer.ValueArrays.x[currentPlace] = x;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4a45      	ldr	r2, [pc, #276]	; (8000734 <AG_AddNewValues+0x1b4>)
 800061e:	3304      	adds	r3, #4
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	809a      	strh	r2, [r3, #4]
	AG.ValueBuffer.ValueArrays.y[currentPlace] = y;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	4a42      	ldr	r2, [pc, #264]	; (8000734 <AG_AddNewValues+0x1b4>)
 800062c:	3334      	adds	r3, #52	; 0x34
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	88ba      	ldrh	r2, [r7, #4]
 8000634:	811a      	strh	r2, [r3, #8]
	AG.ValueBuffer.ValueArrays.z[currentPlace] = z;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	4a3e      	ldr	r2, [pc, #248]	; (8000734 <AG_AddNewValues+0x1b4>)
 800063a:	3368      	adds	r3, #104	; 0x68
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	887a      	ldrh	r2, [r7, #2]
 8000642:	809a      	strh	r2, [r3, #4]

	//prideti naujausias reiksmes
	AG.ValueBuffer.Sum.x += x;
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000646:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800064a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800064e:	4413      	add	r3, r2
 8000650:	4a38      	ldr	r2, [pc, #224]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000652:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
	AG.ValueBuffer.Sum.y += y;
 8000656:	4b37      	ldr	r3, [pc, #220]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000658:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800065c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a34      	ldr	r2, [pc, #208]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000664:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	AG.ValueBuffer.Sum.z += z;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <AG_AddNewValues+0x1b4>)
 800066a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800066e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000672:	4413      	add	r3, r2
 8000674:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000676:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

	//suskaiciuoti nauja vidurki
	AG.ValueBuffer.CurrentMean.x = (int16_t) ((float) AG.ValueBuffer.Sum.x / (float) AG.ValueBuffer.Counter);
 800067a:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <AG_AddNewValues+0x1b4>)
 800067c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000680:	ee07 3a90 	vmov	s15, r3
 8000684:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <AG_AddNewValues+0x1b4>)
 800068a:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800069a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800069e:	ee17 3a90 	vmov	r3, s15
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <AG_AddNewValues+0x1b4>)
 80006a6:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	AG.ValueBuffer.CurrentMean.y = (int16_t) ((float) AG.ValueBuffer.Sum.y / (float) AG.ValueBuffer.Counter);
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <AG_AddNewValues+0x1b4>)
 80006ac:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <AG_AddNewValues+0x1b4>)
 80006ba:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ce:	ee17 3a90 	vmov	r3, s15
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <AG_AddNewValues+0x1b4>)
 80006d6:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
	AG.ValueBuffer.CurrentMean.z = (int16_t) ((float) AG.ValueBuffer.Sum.z / (float) AG.ValueBuffer.Counter);
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <AG_AddNewValues+0x1b4>)
 80006dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80006e0:	ee07 3a90 	vmov	s15, r3
 80006e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <AG_AddNewValues+0x1b4>)
 80006ea:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 80006ee:	ee07 3a90 	vmov	s15, r3
 80006f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006fe:	ee17 3a90 	vmov	r3, s15
 8000702:	b21a      	sxth	r2, r3
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000706:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	//pakeisti vieta
	AG.ValueBuffer.Place = AG.ValueBuffer.Place == ACC_MeanValues - 1 ? 0 : AG.ValueBuffer.Place + 1;
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <AG_AddNewValues+0x1b4>)
 800070c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8000710:	2b31      	cmp	r3, #49	; 0x31
 8000712:	d005      	beq.n	8000720 <AG_AddNewValues+0x1a0>
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000716:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800071a:	3301      	adds	r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	e000      	b.n	8000722 <AG_AddNewValues+0x1a2>
 8000720:	2300      	movs	r3, #0
 8000722:	4a04      	ldr	r2, [pc, #16]	; (8000734 <AG_AddNewValues+0x1b4>)
 8000724:	f882 314c 	strb.w	r3, [r2, #332]	; 0x14c
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	2000002c 	.word	0x2000002c

08000738 <I2C_Write8>:

//=================== I2C ===================
void I2C_Write8(uint8_t ADDR, uint8_t data) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af02      	add	r7, sp, #8
 800073e:	4603      	mov	r3, r0
 8000740:	460a      	mov	r2, r1
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	4613      	mov	r3, r2
 8000746:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(AG.i2c, MPU_ADDR << 1, i2cData, 2, 100);
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <I2C_Write8+0x34>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	f107 020c 	add.w	r2, r7, #12
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2302      	movs	r3, #2
 800075e:	21d0      	movs	r1, #208	; 0xd0
 8000760:	f002 f9c0 	bl	8002ae4 <HAL_I2C_Master_Transmit>
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000002c 	.word	0x2000002c

08000770 <Motors_Init>:
#include "Motors.h"

void Motors_Init(TIM_TypeDef *motorTimer) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	Motors.TIM = motorTimer;
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <Motors_Init+0x1c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	2000017c 	.word	0x2000017c

08000790 <Motors_Hold>:
	}

	Motors_Set(temp);
}

void Motors_Hold() {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
	//=========== Apskaiciuoti koeficientus islyginimui ===========
	//Uzfixuoti reiksmes
	int16_t x = AG.ValueBuffer.CurrentMean.x, y = AG.ValueBuffer.CurrentMean.y, z = AG.ValueBuffer.CurrentMean.z;
 8000796:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <Motors_Hold+0xf4>)
 8000798:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 800079c:	81bb      	strh	r3, [r7, #12]
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <Motors_Hold+0xf4>)
 80007a0:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 80007a4:	817b      	strh	r3, [r7, #10]
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <Motors_Hold+0xf4>)
 80007a8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80007ac:	813b      	strh	r3, [r7, #8]
	/*
	 * 		*** x asis nukreipta i FR, y asis nukreipta i FL ***
	 * 		reiktu patikrint ar Y teigiamas, kad nedarytu nesamoniu apsivertes
	 */

	if (x > ACC_TimkamosReiksmesDiapazonas) {
 80007ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007b2:	2b64      	cmp	r3, #100	; 0x64
 80007b4:	dd04      	ble.n	80007c0 <Motors_Hold+0x30>
		tiltFR(-1);
 80007b6:	f04f 30ff 	mov.w	r0, #4294967295
 80007ba:	f000 fa19 	bl	8000bf0 <tiltFR>
 80007be:	e007      	b.n	80007d0 <Motors_Hold+0x40>
	} else if (x < -ACC_TimkamosReiksmesDiapazonas) {
 80007c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007c4:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80007c8:	da02      	bge.n	80007d0 <Motors_Hold+0x40>
		tiltFR(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fa10 	bl	8000bf0 <tiltFR>
	}
	if (y > 0) {
 80007d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dd04      	ble.n	80007e2 <Motors_Hold+0x52>
		tiltFL(-1);
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f000 f97c 	bl	8000ad8 <tiltFL>
 80007e0:	e006      	b.n	80007f0 <Motors_Hold+0x60>
	} else if (y != 0) {
 80007e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <Motors_Hold+0x60>
		tiltFL(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 f974 	bl	8000ad8 <tiltFL>
	}
	if (z > 0) {
	} else if (z != 0) {
	}

	int16_t temp[4] = { 0 };
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]

	for (uint8_t i = 0, j = 1; i < 4; i++, j += 2) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	2301      	movs	r3, #1
 80007fe:	73bb      	strb	r3, [r7, #14]
 8000800:	e035      	b.n	800086e <Motors_Hold+0xde>
		temp[i] = Motors.packet[j] | (Motors.packet[j + 1] << 8);
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	4a20      	ldr	r2, [pc, #128]	; (8000888 <Motors_Hold+0xf8>)
 8000806:	4413      	add	r3, r2
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	b219      	sxth	r1, r3
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	3301      	adds	r3, #1
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <Motors_Hold+0xf8>)
 8000812:	4413      	add	r3, r2
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	b21a      	sxth	r2, r3
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	430a      	orrs	r2, r1
 800081e:	b212      	sxth	r2, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	f107 0110 	add.w	r1, r7, #16
 8000826:	440b      	add	r3, r1
 8000828:	f823 2c10 	strh.w	r2, [r3, #-16]
		if (temp[i] > maxMotorValue) temp[i] = maxMotorValue;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	f107 0210 	add.w	r2, r7, #16
 8000834:	4413      	add	r3, r2
 8000836:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000842:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800088c <Motors_Hold+0xfc>
 8000846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084e:	dd08      	ble.n	8000862 <Motors_Hold+0xd2>
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	f107 0210 	add.w	r2, r7, #16
 8000858:	4413      	add	r3, r2
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	f823 2c10 	strh.w	r2, [r3, #-16]
	for (uint8_t i = 0, j = 1; i < 4; i++, j += 2) {
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	3301      	adds	r3, #1
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	3302      	adds	r3, #2
 800086c:	73bb      	strb	r3, [r7, #14]
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d9c6      	bls.n	8000802 <Motors_Hold+0x72>
	}

	Motors_Set(temp);
 8000874:	463b      	mov	r3, r7
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f80a 	bl	8000890 <Motors_Set>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000002c 	.word	0x2000002c
 8000888:	2000017c 	.word	0x2000017c
 800088c:	447a0000 	.word	0x447a0000

08000890 <Motors_Set>:

void Motors_Set(int16_t *valueArray) {
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

	//todo perkelti masyvo sudaryma i cia
	//todo praleisti per vidurkinima
	if (*(valueArray) == 0 && *(valueArray + 1) == 0 && *(valueArray + 2) == 0 && *(valueArray + 3) == 0) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f040 8090 	bne.w	80009c4 <Motors_Set+0x134>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3302      	adds	r3, #2
 80008a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f040 8089 	bne.w	80009c4 <Motors_Set+0x134>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3304      	adds	r3, #4
 80008b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f040 8082 	bne.w	80009c4 <Motors_Set+0x134>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3306      	adds	r3, #6
 80008c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d17b      	bne.n	80009c4 <Motors_Set+0x134>
		//kad nesisuktu kai nereikia
		Motors.TIM->CCR1 = (*valueArray * minMotorValue / maxSiunciamaReiksme + minMotorValue);			//BL
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008da:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8000ad0 <Motors_Set+0x240>
 80008de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008e2:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8000ad0 <Motors_Set+0x240>
 80008e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ea:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000ad0 <Motors_Set+0x240>
 80008ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008f2:	4b78      	ldr	r3, [pc, #480]	; (8000ad4 <Motors_Set+0x244>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008fa:	ee17 2a90 	vmov	r2, s15
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
		Motors.TIM->CCR2 = (*(valueArray + 1) * minMotorValue / maxSiunciamaReiksme + minMotorValue);	//FL
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3302      	adds	r3, #2
 8000904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000908:	ee07 3a90 	vmov	s15, r3
 800090c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000910:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8000ad0 <Motors_Set+0x240>
 8000914:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000918:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8000ad0 <Motors_Set+0x240>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8000ad0 <Motors_Set+0x240>
 8000924:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000928:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <Motors_Set+0x244>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000930:	ee17 2a90 	vmov	r2, s15
 8000934:	639a      	str	r2, [r3, #56]	; 0x38
		Motors.TIM->CCR3 = (*(valueArray + 2) * minMotorValue / maxSiunciamaReiksme + minMotorValue);	//BR
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3304      	adds	r3, #4
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000946:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000ad0 <Motors_Set+0x240>
 800094a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800094e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8000ad0 <Motors_Set+0x240>
 8000952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000956:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8000ad0 <Motors_Set+0x240>
 800095a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800095e:	4b5d      	ldr	r3, [pc, #372]	; (8000ad4 <Motors_Set+0x244>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000966:	ee17 2a90 	vmov	r2, s15
 800096a:	63da      	str	r2, [r3, #60]	; 0x3c
		Motors.TIM->CCR4 = (*(valueArray + 3) * minMotorValue / maxSiunciamaReiksme + minMotorValue);	//FR
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3306      	adds	r3, #6
 8000970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8000ad0 <Motors_Set+0x240>
 8000980:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000984:	eddf 6a52 	vldr	s13, [pc, #328]	; 8000ad0 <Motors_Set+0x240>
 8000988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800098c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000ad0 <Motors_Set+0x240>
 8000990:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000994:	4b4f      	ldr	r3, [pc, #316]	; (8000ad4 <Motors_Set+0x244>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800099c:	ee17 2a90 	vmov	r2, s15
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
		for (uint8_t i = 0; i < 4; i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e009      	b.n	80009bc <Motors_Set+0x12c>
			Motors.coefACC.coeff[i] = 0;
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	4a4a      	ldr	r2, [pc, #296]	; (8000ad4 <Motors_Set+0x244>)
 80009ac:	3304      	adds	r3, #4
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	2200      	movs	r2, #0
 80009b4:	80da      	strh	r2, [r3, #6]
		for (uint8_t i = 0; i < 4; i++)
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	3301      	adds	r3, #1
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d9f2      	bls.n	80009a8 <Motors_Set+0x118>
 80009c2:	e07e      	b.n	8000ac2 <Motors_Set+0x232>
	} else {
		//todo patikrinti min max ribas
		Motors.TIM->CCR1 = ((*valueArray + Motors.coefACC.coeff[0]) * minMotorValue / maxSiunciamaReiksme + minMotorValue);			//BL
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b41      	ldr	r3, [pc, #260]	; (8000ad4 <Motors_Set+0x244>)
 80009ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009d2:	4413      	add	r3, r2
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009dc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000ad0 <Motors_Set+0x240>
 80009e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009e4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8000ad0 <Motors_Set+0x240>
 80009e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000ad0 <Motors_Set+0x240>
 80009f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009f4:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <Motors_Set+0x244>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fc:	ee17 2a90 	vmov	r2, s15
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
		Motors.TIM->CCR2 = ((*(valueArray + 1) + Motors.coefACC.coeff[1]) * minMotorValue / maxSiunciamaReiksme + minMotorValue);	//FL
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3302      	adds	r3, #2
 8000a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <Motors_Set+0x244>)
 8000a0e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a12:	4413      	add	r3, r2
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000ad0 <Motors_Set+0x240>
 8000a20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a24:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000ad0 <Motors_Set+0x240>
 8000a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a2c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000ad0 <Motors_Set+0x240>
 8000a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <Motors_Set+0x244>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3c:	ee17 2a90 	vmov	r2, s15
 8000a40:	639a      	str	r2, [r3, #56]	; 0x38
		Motors.TIM->CCR3 = ((*(valueArray + 2) + Motors.coefACC.coeff[2]) * minMotorValue / maxSiunciamaReiksme + minMotorValue);	//BR
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3304      	adds	r3, #4
 8000a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <Motors_Set+0x244>)
 8000a4e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a52:	4413      	add	r3, r2
 8000a54:	ee07 3a90 	vmov	s15, r3
 8000a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a5c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000ad0 <Motors_Set+0x240>
 8000a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a64:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000ad0 <Motors_Set+0x240>
 8000a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000ad0 <Motors_Set+0x240>
 8000a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <Motors_Set+0x244>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a7c:	ee17 2a90 	vmov	r2, s15
 8000a80:	63da      	str	r2, [r3, #60]	; 0x3c
		Motors.TIM->CCR4 = ((*(valueArray + 3) + Motors.coefACC.coeff[3]) * minMotorValue / maxSiunciamaReiksme + minMotorValue);	//FR
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3306      	adds	r3, #6
 8000a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <Motors_Set+0x244>)
 8000a8e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000a92:	4413      	add	r3, r2
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a9c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000ad0 <Motors_Set+0x240>
 8000aa0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aa4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000ad0 <Motors_Set+0x240>
 8000aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000ad0 <Motors_Set+0x240>
 8000ab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <Motors_Set+0x244>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000abc:	ee17 2a90 	vmov	r2, s15
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	43fa0000 	.word	0x43fa0000
 8000ad4:	2000017c 	.word	0x2000017c

08000ad8 <tiltFL>:

void tiltFL(int8_t kryptis) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	//kai teigiamas - FL kyla i virsu
	if (Motors.coefACC.addedFL) {
 8000ae2:	4b40      	ldr	r3, [pc, #256]	; (8000be4 <tiltFL+0x10c>)
 8000ae4:	7d9b      	ldrb	r3, [r3, #22]
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d039      	beq.n	8000b64 <tiltFL+0x8c>
		Motors.coefACC.addedFL = 0;
 8000af0:	4a3c      	ldr	r2, [pc, #240]	; (8000be4 <tiltFL+0x10c>)
 8000af2:	7d93      	ldrb	r3, [r2, #22]
 8000af4:	f36f 0341 	bfc	r3, #1, #1
 8000af8:	7593      	strb	r3, [r2, #22]
		if (Motors.coefACC.coeff[1] + 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[1] + 2 * kryptis > -Motoru_Coef_Limit)
 8000afa:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <tiltFL+0x10c>)
 8000afc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000b00:	461a      	mov	r2, r3
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b12:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000be8 <tiltFL+0x110>
 8000b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1e:	d400      	bmi.n	8000b22 <tiltFL+0x4a>
	} else {
		Motors.coefACC.addedFL = 1;
		if (Motors.coefACC.coeff[2] - 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[2] - 2 * kryptis > -Motoru_Coef_Limit)
			Motors.coefACC.coeff[2] -= kryptis;
	}
}
 8000b20:	e059      	b.n	8000bd6 <tiltFL+0xfe>
		if (Motors.coefACC.coeff[1] + 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[1] + 2 * kryptis > -Motoru_Coef_Limit)
 8000b22:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <tiltFL+0x10c>)
 8000b24:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	ee07 3a90 	vmov	s15, r3
 8000b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000bec <tiltFL+0x114>
 8000b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b46:	dc00      	bgt.n	8000b4a <tiltFL+0x72>
}
 8000b48:	e045      	b.n	8000bd6 <tiltFL+0xfe>
			Motors.coefACC.coeff[1] += kryptis;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <tiltFL+0x10c>)
 8000b4c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	4413      	add	r3, r2
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <tiltFL+0x10c>)
 8000b60:	821a      	strh	r2, [r3, #16]
}
 8000b62:	e038      	b.n	8000bd6 <tiltFL+0xfe>
		Motors.coefACC.addedFL = 1;
 8000b64:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <tiltFL+0x10c>)
 8000b66:	7d93      	ldrb	r3, [r2, #22]
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	7593      	strb	r3, [r2, #22]
		if (Motors.coefACC.coeff[2] - 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[2] - 2 * kryptis > -Motoru_Coef_Limit)
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <tiltFL+0x10c>)
 8000b70:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000b74:	461a      	mov	r2, r3
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	ee07 3a90 	vmov	s15, r3
 8000b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b86:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000be8 <tiltFL+0x110>
 8000b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b92:	d400      	bmi.n	8000b96 <tiltFL+0xbe>
}
 8000b94:	e01f      	b.n	8000bd6 <tiltFL+0xfe>
		if (Motors.coefACC.coeff[2] - 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[2] - 2 * kryptis > -Motoru_Coef_Limit)
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <tiltFL+0x10c>)
 8000b98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000bec <tiltFL+0x114>
 8000bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bba:	dc00      	bgt.n	8000bbe <tiltFL+0xe6>
}
 8000bbc:	e00b      	b.n	8000bd6 <tiltFL+0xfe>
			Motors.coefACC.coeff[2] -= kryptis;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <tiltFL+0x10c>)
 8000bc0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <tiltFL+0x10c>)
 8000bd4:	825a      	strh	r2, [r3, #18]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000017c 	.word	0x2000017c
 8000be8:	42fa0000 	.word	0x42fa0000
 8000bec:	c2fa0000 	.word	0xc2fa0000

08000bf0 <tiltFR>:

void tiltFR(int8_t kryptis) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	//kai teigiamas - FR kyla i virsu
	if (Motors.coefACC.addedFR) {
 8000bfa:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <tiltFR+0x10c>)
 8000bfc:	7d9b      	ldrb	r3, [r3, #22]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d039      	beq.n	8000c7c <tiltFR+0x8c>
		Motors.coefACC.addedFR = 0;
 8000c08:	4a3c      	ldr	r2, [pc, #240]	; (8000cfc <tiltFR+0x10c>)
 8000c0a:	7d93      	ldrb	r3, [r2, #22]
 8000c0c:	f36f 0300 	bfc	r3, #0, #1
 8000c10:	7593      	strb	r3, [r2, #22]
		if (Motors.coefACC.coeff[3] + 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[3] + 2 * kryptis > -Motoru_Coef_Limit)
 8000c12:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <tiltFR+0x10c>)
 8000c14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c2a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000d00 <tiltFR+0x110>
 8000c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c36:	d400      	bmi.n	8000c3a <tiltFR+0x4a>
	} else {
		Motors.coefACC.addedFR = 1;
		if (Motors.coefACC.coeff[0] - 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[0] - 2 * kryptis > -Motoru_Coef_Limit)
			Motors.coefACC.coeff[0] -= kryptis;
	}
}
 8000c38:	e059      	b.n	8000cee <tiltFR+0xfe>
		if (Motors.coefACC.coeff[3] + 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[3] + 2 * kryptis > -Motoru_Coef_Limit)
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <tiltFR+0x10c>)
 8000c3c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000c40:	461a      	mov	r2, r3
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	ee07 3a90 	vmov	s15, r3
 8000c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c52:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000d04 <tiltFR+0x114>
 8000c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5e:	dc00      	bgt.n	8000c62 <tiltFR+0x72>
}
 8000c60:	e045      	b.n	8000cee <tiltFR+0xfe>
			Motors.coefACC.coeff[3] += kryptis;
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <tiltFR+0x10c>)
 8000c64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <tiltFR+0x10c>)
 8000c78:	829a      	strh	r2, [r3, #20]
}
 8000c7a:	e038      	b.n	8000cee <tiltFR+0xfe>
		Motors.coefACC.addedFR = 1;
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <tiltFR+0x10c>)
 8000c7e:	7d93      	ldrb	r3, [r2, #22]
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	7593      	strb	r3, [r2, #22]
		if (Motors.coefACC.coeff[0] - 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[0] - 2 * kryptis > -Motoru_Coef_Limit)
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <tiltFR+0x10c>)
 8000c88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	ee07 3a90 	vmov	s15, r3
 8000c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000d00 <tiltFR+0x110>
 8000ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000caa:	d400      	bmi.n	8000cae <tiltFR+0xbe>
}
 8000cac:	e01f      	b.n	8000cee <tiltFR+0xfe>
		if (Motors.coefACC.coeff[0] - 2 * kryptis < Motoru_Coef_Limit && Motors.coefACC.coeff[0] - 2 * kryptis > -Motoru_Coef_Limit)
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <tiltFR+0x10c>)
 8000cb0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000d04 <tiltFR+0x114>
 8000cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd2:	dc00      	bgt.n	8000cd6 <tiltFR+0xe6>
}
 8000cd4:	e00b      	b.n	8000cee <tiltFR+0xfe>
			Motors.coefACC.coeff[0] -= kryptis;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <tiltFR+0x10c>)
 8000cd8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <tiltFR+0x10c>)
 8000cec:	81da      	strh	r2, [r3, #14]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000017c 	.word	0x2000017c
 8000d00:	42fa0000 	.word	0x42fa0000
 8000d04:	c2fa0000 	.word	0xc2fa0000

08000d08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d0e:	f000 fe2d 	bl	800196c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d12:	f000 f8b9 	bl	8000e88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d16:	f000 fa69 	bl	80011ec <MX_GPIO_Init>
	MX_DMA_Init();
 8000d1a:	f000 fa37 	bl	800118c <MX_DMA_Init>
	MX_TIM4_Init();
 8000d1e:	f000 f94f 	bl	8000fc0 <MX_TIM4_Init>
	MX_UART4_Init();
 8000d22:	f000 fa09 	bl	8001138 <MX_UART4_Init>
	MX_TIM14_Init();
 8000d26:	f000 f9e3 	bl	80010f0 <MX_TIM14_Init>
	MX_I2C3_Init();
 8000d2a:	f000 f91b 	bl	8000f64 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */

	//==== MPU init ================================================================
	AG_start(&hi2c3);
 8000d2e:	484c      	ldr	r0, [pc, #304]	; (8000e60 <main+0x158>)
 8000d30:	f7ff fbe8 	bl	8000504 <AG_start>

	//==== PWM init ================================================================
	HAL_TIM_Base_Start(&htim4);
 8000d34:	484b      	ldr	r0, [pc, #300]	; (8000e64 <main+0x15c>)
 8000d36:	f004 fe18 	bl	800596a <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	//BL
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4849      	ldr	r0, [pc, #292]	; (8000e64 <main+0x15c>)
 8000d3e:	f004 fe91 	bl	8005a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	//FL
 8000d42:	2104      	movs	r1, #4
 8000d44:	4847      	ldr	r0, [pc, #284]	; (8000e64 <main+0x15c>)
 8000d46:	f004 fe8d 	bl	8005a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	//BR
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	4845      	ldr	r0, [pc, #276]	; (8000e64 <main+0x15c>)
 8000d4e:	f004 fe89 	bl	8005a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	//FR
 8000d52:	210c      	movs	r1, #12
 8000d54:	4843      	ldr	r0, [pc, #268]	; (8000e64 <main+0x15c>)
 8000d56:	f004 fe85 	bl	8005a64 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim14);  //apsauga nuo negaunamu duomenu
 8000d5a:	4843      	ldr	r0, [pc, #268]	; (8000e68 <main+0x160>)
 8000d5c:	f004 fe29 	bl	80059b2 <HAL_TIM_Base_Start_IT>
	Motors_Init(TIM4);
 8000d60:	4842      	ldr	r0, [pc, #264]	; (8000e6c <main+0x164>)
 8000d62:	f7ff fd05 	bl	8000770 <Motors_Init>

	//==== uart init ===============================================================
	HAL_UART_Receive_DMA(&huart4, Motors.packet, 10);
 8000d66:	220a      	movs	r2, #10
 8000d68:	4941      	ldr	r1, [pc, #260]	; (8000e70 <main+0x168>)
 8000d6a:	4842      	ldr	r0, [pc, #264]	; (8000e74 <main+0x16c>)
 8000d6c:	f005 fd54 	bl	8006818 <HAL_UART_Receive_DMA>
	HAL_Delay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 fe6d 	bl	8001a50 <HAL_Delay>
	HAL_UART_DMAStop(&huart4);
 8000d76:	483f      	ldr	r0, [pc, #252]	; (8000e74 <main+0x16c>)
 8000d78:	f005 fdce 	bl	8006918 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(&huart4, Motors.packet, 10);
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	493c      	ldr	r1, [pc, #240]	; (8000e70 <main+0x168>)
 8000d80:	483c      	ldr	r0, [pc, #240]	; (8000e74 <main+0x16c>)
 8000d82:	f005 fd49 	bl	8006818 <HAL_UART_Receive_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {

		//==== ACC/GYRO duomenu nuskaitymas ========================================
		//nuskaityti duomenis is akselerometro ir giroskopo kai duomenys paruosti
		if (mFlags.accDataReadyRead) {
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <main+0x170>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00e      	beq.n	8000db2 <main+0xaa>
			mFlags.accDataReadyRead = 0;
 8000d94:	4a38      	ldr	r2, [pc, #224]	; (8000e78 <main+0x170>)
 8000d96:	7813      	ldrb	r3, [r2, #0]
 8000d98:	f36f 0341 	bfc	r3, #1, #1
 8000d9c:	7013      	strb	r3, [r2, #0]
			HAL_I2C_Mem_Read_DMA(&hi2c3, MPU_ADDR << 1, ACCEL_XOUT_H_REG, 1, mDataRead, MPU_PackSize);
 8000d9e:	230e      	movs	r3, #14
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <main+0x174>)
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2301      	movs	r3, #1
 8000da8:	223b      	movs	r2, #59	; 0x3b
 8000daa:	21d0      	movs	r1, #208	; 0xd0
 8000dac:	482c      	ldr	r0, [pc, #176]	; (8000e60 <main+0x158>)
 8000dae:	f001 ff97 	bl	8002ce0 <HAL_I2C_Mem_Read_DMA>
		}

		//apdoroti nuskaitytus duomenis
		if (mFlags.accDataReady) {
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <main+0x170>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d022      	beq.n	8000e06 <main+0xfe>
			mFlags.accDataReady = 0;
 8000dc0:	4a2d      	ldr	r2, [pc, #180]	; (8000e78 <main+0x170>)
 8000dc2:	7813      	ldrb	r3, [r2, #0]
 8000dc4:	f36f 0382 	bfc	r3, #2, #1
 8000dc8:	7013      	strb	r3, [r2, #0]
			AG_AddNewValues((int16_t) ((mDataRead[0] << 8) | mDataRead[1]), (int16_t) ((mDataRead[2] << 8) | mDataRead[3]),
 8000dca:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <main+0x174>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <main+0x174>)
 8000dd4:	785b      	ldrb	r3, [r3, #1]
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	b218      	sxth	r0, r3
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <main+0x174>)
 8000dde:	789b      	ldrb	r3, [r3, #2]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <main+0x174>)
 8000de6:	78db      	ldrb	r3, [r3, #3]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b219      	sxth	r1, r3
					(int16_t) ((mDataRead[4] << 8) | mDataRead[5]));
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <main+0x174>)
 8000df0:	791b      	ldrb	r3, [r3, #4]
 8000df2:	021b      	lsls	r3, r3, #8
			AG_AddNewValues((int16_t) ((mDataRead[0] << 8) | mDataRead[1]), (int16_t) ((mDataRead[2] << 8) | mDataRead[3]),
 8000df4:	b21a      	sxth	r2, r3
					(int16_t) ((mDataRead[4] << 8) | mDataRead[5]));
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <main+0x174>)
 8000df8:	795b      	ldrb	r3, [r3, #5]
 8000dfa:	b21b      	sxth	r3, r3
			AG_AddNewValues((int16_t) ((mDataRead[0] << 8) | mDataRead[1]), (int16_t) ((mDataRead[2] << 8) | mDataRead[3]),
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	f7ff fbbd 	bl	8000580 <AG_AddNewValues>
		}

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mFlags.dataUart) {
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <main+0x170>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0b8      	beq.n	8000d86 <main+0x7e>
			mFlags.dataUart = 0;
 8000e14:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <main+0x170>)
 8000e16:	7813      	ldrb	r3, [r2, #0]
 8000e18:	f36f 0300 	bfc	r3, #0, #1
 8000e1c:	7013      	strb	r3, [r2, #0]
			if (Motors.packet[9] == getCRC(Motors.packet, 9)) {
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <main+0x178>)
 8000e20:	7b5c      	ldrb	r4, [r3, #13]
 8000e22:	2109      	movs	r1, #9
 8000e24:	4812      	ldr	r0, [pc, #72]	; (8000e70 <main+0x168>)
 8000e26:	f000 fa49 	bl	80012bc <getCRC>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	d10c      	bne.n	8000e4a <main+0x142>
				TIM14->CNT = 0;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <main+0x17c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
				switch (Motors.packet[0]) {
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <main+0x178>)
 8000e38:	791b      	ldrb	r3, [r3, #4]
 8000e3a:	2b33      	cmp	r3, #51	; 0x33
 8000e3c:	d00e      	beq.n	8000e5c <main+0x154>
 8000e3e:	2b48      	cmp	r3, #72	; 0x48
 8000e40:	d10d      	bne.n	8000e5e <main+0x156>
					case '3':
//						Motors_ChangeValueFromPacket();
						break;
					case 'H':	//Hold
						Motors_Hold();
 8000e42:	f7ff fca5 	bl	8000790 <Motors_Hold>
						break;
 8000e46:	bf00      	nop
 8000e48:	e009      	b.n	8000e5e <main+0x156>
				}
			} else {
				//reset uart
				HAL_UART_DMAStop(&huart4);
 8000e4a:	480a      	ldr	r0, [pc, #40]	; (8000e74 <main+0x16c>)
 8000e4c:	f005 fd64 	bl	8006918 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart4, Motors.packet, 10);
 8000e50:	220a      	movs	r2, #10
 8000e52:	4907      	ldr	r1, [pc, #28]	; (8000e70 <main+0x168>)
 8000e54:	4807      	ldr	r0, [pc, #28]	; (8000e74 <main+0x16c>)
 8000e56:	f005 fcdf 	bl	8006818 <HAL_UART_Receive_DMA>
 8000e5a:	e794      	b.n	8000d86 <main+0x7e>
						break;
 8000e5c:	bf00      	nop
		if (mFlags.accDataReadyRead) {
 8000e5e:	e792      	b.n	8000d86 <main+0x7e>
 8000e60:	20000254 	.word	0x20000254
 8000e64:	20000308 	.word	0x20000308
 8000e68:	20000398 	.word	0x20000398
 8000e6c:	40000800 	.word	0x40000800
 8000e70:	20000180 	.word	0x20000180
 8000e74:	20000358 	.word	0x20000358
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000348 	.word	0x20000348
 8000e80:	2000017c 	.word	0x2000017c
 8000e84:	40002000 	.word	0x40002000

08000e88 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	; 0x50
 8000e8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2234      	movs	r2, #52	; 0x34
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f006 fa0e 	bl	80072b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <SystemClock_Config+0xd4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <SystemClock_Config+0xd4>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <SystemClock_Config+0xd4>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <SystemClock_Config+0xd8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ed4:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <SystemClock_Config+0xd8>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <SystemClock_Config+0xd8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000efc:	2308      	movs	r3, #8
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 faa3 	bl	8005460 <HAL_RCC_OscConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x9c>
		Error_Handler();
 8000f20:	f000 fa70 	bl	8001404 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f24:	230f      	movs	r3, #15
 8000f26:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2102      	movs	r1, #2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 f820 	bl	8004f88 <HAL_RCC_ClockConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xca>
		Error_Handler();
 8000f4e:	f000 fa59 	bl	8001404 <Error_Handler>
	}
}
 8000f52:	bf00      	nop
 8000f54:	3750      	adds	r7, #80	; 0x50
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000

08000f64 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000f6a:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <MX_I2C3_Init+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 400000;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_I2C3_Init+0x58>)
 8000f72:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f86:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_I2C3_Init+0x50>)
 8000fa2:	f001 fc67 	bl	8002874 <HAL_I2C_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000fac:	f000 fa2a 	bl	8001404 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000254 	.word	0x20000254
 8000fb8:	40005c00 	.word	0x40005c00
 8000fbc:	00061a80 	.word	0x00061a80

08000fc0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]
 8000fee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000ff0:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <MX_TIM4_Init+0x128>)
 8000ff2:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <MX_TIM4_Init+0x12c>)
 8000ff4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 128 - 1;
 8000ff6:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <MX_TIM4_Init+0x128>)
 8000ff8:	227f      	movs	r2, #127	; 0x7f
 8000ffa:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <MX_TIM4_Init+0x128>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000 - 1;
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <MX_TIM4_Init+0x128>)
 8001004:	f242 720f 	movw	r2, #9999	; 0x270f
 8001008:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <MX_TIM4_Init+0x128>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001010:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_TIM4_Init+0x128>)
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001016:	4834      	ldr	r0, [pc, #208]	; (80010e8 <MX_TIM4_Init+0x128>)
 8001018:	f004 fc7c 	bl	8005914 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM4_Init+0x66>
		Error_Handler();
 8001022:	f000 f9ef 	bl	8001404 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800102c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001030:	4619      	mov	r1, r3
 8001032:	482d      	ldr	r0, [pc, #180]	; (80010e8 <MX_TIM4_Init+0x128>)
 8001034:	f004 ff22 	bl	8005e7c <HAL_TIM_ConfigClockSource>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM4_Init+0x82>
		Error_Handler();
 800103e:	f000 f9e1 	bl	8001404 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001042:	4829      	ldr	r0, [pc, #164]	; (80010e8 <MX_TIM4_Init+0x128>)
 8001044:	f004 fcd9 	bl	80059fa <HAL_TIM_PWM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM4_Init+0x92>
		Error_Handler();
 800104e:	f000 f9d9 	bl	8001404 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	4619      	mov	r1, r3
 8001060:	4821      	ldr	r0, [pc, #132]	; (80010e8 <MX_TIM4_Init+0x128>)
 8001062:	f005 fafb 	bl	800665c <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM4_Init+0xb0>
		Error_Handler();
 800106c:	f000 f9ca 	bl	8001404 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001070:	2360      	movs	r3, #96	; 0x60
 8001072:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500 - 1;
 8001074:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001078:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	4619      	mov	r1, r3
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <MX_TIM4_Init+0x128>)
 800108a:	f004 fe31 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM4_Init+0xd8>
		Error_Handler();
 8001094:	f000 f9b6 	bl	8001404 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2204      	movs	r2, #4
 800109c:	4619      	mov	r1, r3
 800109e:	4812      	ldr	r0, [pc, #72]	; (80010e8 <MX_TIM4_Init+0x128>)
 80010a0:	f004 fe26 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM4_Init+0xee>
		Error_Handler();
 80010aa:	f000 f9ab 	bl	8001404 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2208      	movs	r2, #8
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_TIM4_Init+0x128>)
 80010b6:	f004 fe1b 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM4_Init+0x104>
		Error_Handler();
 80010c0:	f000 f9a0 	bl	8001404 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	220c      	movs	r2, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <MX_TIM4_Init+0x128>)
 80010cc:	f004 fe10 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM4_Init+0x11a>
		Error_Handler();
 80010d6:	f000 f995 	bl	8001404 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <MX_TIM4_Init+0x128>)
 80010dc:	f000 fade 	bl	800169c <HAL_TIM_MspPostInit>

}
 80010e0:	bf00      	nop
 80010e2:	3738      	adds	r7, #56	; 0x38
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000308 	.word	0x20000308
 80010ec:	40000800 	.word	0x40000800

080010f0 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_TIM14_Init+0x40>)
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <MX_TIM14_Init+0x44>)
 80010f8:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 12800;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_TIM14_Init+0x40>)
 80010fc:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8001100:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_TIM14_Init+0x40>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 10 * 100;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_TIM14_Init+0x40>)
 800110a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110e:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_TIM14_Init+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_TIM14_Init+0x40>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_TIM14_Init+0x40>)
 800111e:	f004 fbf9 	bl	8005914 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM14_Init+0x3c>
		Error_Handler();
 8001128:	f000 f96c 	bl	8001404 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000398 	.word	0x20000398
 8001134:	40002000 	.word	0x40002000

08001138 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_UART4_Init+0x48>)
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <MX_UART4_Init+0x4c>)
 8001140:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 2000000;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_UART4_Init+0x48>)
 8001144:	4a10      	ldr	r2, [pc, #64]	; (8001188 <MX_UART4_Init+0x50>)
 8001146:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <MX_UART4_Init+0x48>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_UART4_Init+0x48>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_UART4_Init+0x48>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_UART4_Init+0x48>)
 800115c:	220c      	movs	r2, #12
 800115e:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_UART4_Init+0x48>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_UART4_Init+0x48>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_UART4_Init+0x48>)
 800116e:	f005 fb05 	bl	800677c <HAL_UART_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_UART4_Init+0x44>
		Error_Handler();
 8001178:	f000 f944 	bl	8001404 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000358 	.word	0x20000358
 8001184:	40004c00 	.word	0x40004c00
 8001188:	001e8480 	.word	0x001e8480

0800118c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_DMA_Init+0x5c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <MX_DMA_Init+0x5c>)
 800119c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_DMA_Init+0x5c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	200c      	movs	r0, #12
 80011b4:	f000 fd49 	bl	8001c4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011b8:	200c      	movs	r0, #12
 80011ba:	f000 fd62 	bl	8001c82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	200d      	movs	r0, #13
 80011c4:	f000 fd41 	bl	8001c4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011c8:	200d      	movs	r0, #13
 80011ca:	f000 fd5a 	bl	8001c82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	200f      	movs	r0, #15
 80011d4:	f000 fd39 	bl	8001c4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011d8:	200f      	movs	r0, #15
 80011da:	f000 fd52 	bl	8001c82 <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <MX_GPIO_Init+0xc4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <MX_GPIO_Init+0xc4>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <MX_GPIO_Init+0xc4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <MX_GPIO_Init+0xc4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <MX_GPIO_Init+0xc4>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <MX_GPIO_Init+0xc4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_GPIO_Init+0xc4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <MX_GPIO_Init+0xc4>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_GPIO_Init+0xc4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2120      	movs	r1, #32
 800125a:	4816      	ldr	r0, [pc, #88]	; (80012b4 <MX_GPIO_Init+0xc8>)
 800125c:	f001 fad8 	bl	8002810 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : led_Pin */
	GPIO_InitStruct.Pin = led_Pin;
 8001260:	2320      	movs	r3, #32
 8001262:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <MX_GPIO_Init+0xc8>)
 8001278:	f001 f938 	bl	80024ec <HAL_GPIO_Init>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800127c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001280:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <MX_GPIO_Init+0xcc>)
 8001284:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001286:	2302      	movs	r3, #2
 8001288:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4619      	mov	r1, r3
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <MX_GPIO_Init+0xc8>)
 8001292:	f001 f92b 	bl	80024ec <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2028      	movs	r0, #40	; 0x28
 800129c:	f000 fcd5 	bl	8001c4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012a0:	2028      	movs	r0, #40	; 0x28
 80012a2:	f000 fcee 	bl	8001c82 <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3720      	adds	r7, #32
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	10110000 	.word	0x10110000

080012bc <getCRC>:

/* USER CODE BEGIN 4 */
uint8_t getCRC(uint8_t *message, uint8_t length) {
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < length; i++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	73bb      	strb	r3, [r7, #14]
 80012d0:	e01f      	b.n	8001312 <getCRC+0x56>
		crc ^= *(message + i);
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	4053      	eors	r3, r2
 80012de:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	737b      	strb	r3, [r7, #13]
 80012e4:	e00f      	b.n	8001306 <getCRC+0x4a>
			if (crc & 1) crc ^= 0x91;  //CRC7_POLY = 0x91
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <getCRC+0x3e>
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	f083 036e 	eor.w	r3, r3, #110	; 0x6e
 80012f6:	43db      	mvns	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
			crc >>= 1;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8001300:	7b7b      	ldrb	r3, [r7, #13]
 8001302:	3301      	adds	r3, #1
 8001304:	737b      	strb	r3, [r7, #13]
 8001306:	7b7b      	ldrb	r3, [r7, #13]
 8001308:	2b07      	cmp	r3, #7
 800130a:	d9ec      	bls.n	80012e6 <getCRC+0x2a>
	for (uint8_t i = 0; i < length; i++) {
 800130c:	7bbb      	ldrb	r3, [r7, #14]
 800130e:	3301      	adds	r3, #1
 8001310:	73bb      	strb	r3, [r7, #14]
 8001312:	7bba      	ldrb	r2, [r7, #14]
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	429a      	cmp	r2, r3
 8001318:	d3db      	bcc.n	80012d2 <getCRC+0x16>
		}
	}
	return crc;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d117      	bne.n	800136a <HAL_TIM_PeriodElapsedCallback+0x42>
		HAL_UART_DMAStop(&huart4);
 800133a:	480f      	ldr	r0, [pc, #60]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800133c:	f005 faec 	bl	8006918 <HAL_UART_DMAStop>
		HAL_UART_Receive_DMA(&huart4, Motors.packet, 10);
 8001340:	220a      	movs	r2, #10
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001346:	f005 fa67 	bl	8006818 <HAL_UART_Receive_DMA>

		TIM4->CCR1 = minMotorValue;
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800134c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001350:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = minMotorValue;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001354:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001358:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = minMotorValue;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800135c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001360:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = minMotorValue;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001364:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40002000 	.word	0x40002000
 8001378:	20000358 	.word	0x20000358
 800137c:	20000180 	.word	0x20000180
 8001380:	40000800 	.word	0x40000800

08001384 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	mFlags.dataUart = 1;
 800138c:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <HAL_UART_RxCpltCallback+0x20>)
 800138e:	7813      	ldrb	r3, [r2, #0]
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	7013      	strb	r3, [r2, #0]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000

080013a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b8:	d104      	bne.n	80013c4 <HAL_GPIO_EXTI_Callback+0x1c>
		mFlags.accDataReadyRead = 1;
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x28>)
 80013bc:	7813      	ldrb	r3, [r2, #0]
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	7013      	strb	r3, [r2, #0]
	}
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000000 	.word	0x20000000

080013d4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C3) mFlags.accDataReady = 1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_I2C_MemRxCpltCallback+0x28>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d104      	bne.n	80013f0 <HAL_I2C_MemRxCpltCallback+0x1c>
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_I2C_MemRxCpltCallback+0x2c>)
 80013e8:	7813      	ldrb	r3, [r2, #0]
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	7013      	strb	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40005c00 	.word	0x40005c00
 8001400:	20000000 	.word	0x20000000

08001404 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_MspInit+0x4c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_MspInit+0x4c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a5f      	ldr	r2, [pc, #380]	; (8001600 <HAL_I2C_MspInit+0x19c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	f040 80b7 	bne.w	80015f6 <HAL_I2C_MspInit+0x192>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <HAL_I2C_MspInit+0x1a0>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a5c      	ldr	r2, [pc, #368]	; (8001604 <HAL_I2C_MspInit+0x1a0>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <HAL_I2C_MspInit+0x1a0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <HAL_I2C_MspInit+0x1a0>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <HAL_I2C_MspInit+0x1a0>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	6313      	str	r3, [r2, #48]	; 0x30
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_I2C_MspInit+0x1a0>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014d2:	2304      	movs	r3, #4
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	484a      	ldr	r0, [pc, #296]	; (8001608 <HAL_I2C_MspInit+0x1a4>)
 80014de:	f001 f805 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014e2:	2310      	movs	r3, #16
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e6:	2312      	movs	r3, #18
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014f2:	2304      	movs	r3, #4
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4843      	ldr	r0, [pc, #268]	; (800160c <HAL_I2C_MspInit+0x1a8>)
 80014fe:	f000 fff5 	bl	80024ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_I2C_MspInit+0x1a0>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a3e      	ldr	r2, [pc, #248]	; (8001604 <HAL_I2C_MspInit+0x1a0>)
 800150c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <HAL_I2C_MspInit+0x1a0>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 8001520:	4a3c      	ldr	r2, [pc, #240]	; (8001614 <HAL_I2C_MspInit+0x1b0>)
 8001522:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8001524:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 8001526:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800152a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 800153a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001540:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800155e:	482c      	ldr	r0, [pc, #176]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 8001560:	f000 fbaa 	bl	8001cb8 <HAL_DMA_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_MspInit+0x10a>
    {
      Error_Handler();
 800156a:	f7ff ff4b 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 8001572:	639a      	str	r2, [r3, #56]	; 0x38
 8001574:	4a26      	ldr	r2, [pc, #152]	; (8001610 <HAL_I2C_MspInit+0x1ac>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 800157c:	4a27      	ldr	r2, [pc, #156]	; (800161c <HAL_I2C_MspInit+0x1b8>)
 800157e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 8001582:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001586:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 800158a:	2240      	movs	r2, #64	; 0x40
 800158c:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 8001596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80015ba:	4817      	ldr	r0, [pc, #92]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 80015bc:	f000 fb7c 	bl	8001cb8 <HAL_DMA_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_I2C_MspInit+0x166>
    {
      Error_Handler();
 80015c6:	f7ff ff1d 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_I2C_MspInit+0x1b4>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2048      	movs	r0, #72	; 0x48
 80015dc:	f000 fb35 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80015e0:	2048      	movs	r0, #72	; 0x48
 80015e2:	f000 fb4e 	bl	8001c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2049      	movs	r0, #73	; 0x49
 80015ec:	f000 fb2d 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80015f0:	2049      	movs	r0, #73	; 0x49
 80015f2:	f000 fb46 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40005c00 	.word	0x40005c00
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	200002a8 	.word	0x200002a8
 8001614:	40026028 	.word	0x40026028
 8001618:	20000194 	.word	0x20000194
 800161c:	40026070 	.word	0x40026070

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_TIM_Base_MspInit+0x70>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d10e      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_TIM_Base_MspInit+0x74>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <HAL_TIM_Base_MspInit+0x74>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_TIM_Base_MspInit+0x74>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800164e:	e01a      	b.n	8001686 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_TIM_Base_MspInit+0x78>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d115      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_TIM_Base_MspInit+0x74>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <HAL_TIM_Base_MspInit+0x74>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_TIM_Base_MspInit+0x74>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	202d      	movs	r0, #45	; 0x2d
 800167c:	f000 fae5 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001680:	202d      	movs	r0, #45	; 0x2d
 8001682:	f000 fafe 	bl	8001c82 <HAL_NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40000800 	.word	0x40000800
 8001694:	40023800 	.word	0x40023800
 8001698:	40002000 	.word	0x40002000

0800169c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <HAL_TIM_MspPostInit+0x68>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d11e      	bne.n	80016fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_TIM_MspPostInit+0x6c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <HAL_TIM_MspPostInit+0x6c>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_TIM_MspPostInit+0x6c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80016da:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4619      	mov	r1, r3
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_TIM_MspPostInit+0x70>)
 80016f8:	f000 fef8 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40000800 	.word	0x40000800
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <HAL_UART_MspInit+0xe4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d15c      	bne.n	80017ec <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_UART_MspInit+0xe8>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <HAL_UART_MspInit+0xe8>)
 800173c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_UART_MspInit+0xe8>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_UART_MspInit+0xe8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_UART_MspInit+0xe8>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_UART_MspInit+0xe8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800176a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001774:	2301      	movs	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800177c:	2308      	movs	r3, #8
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	481d      	ldr	r0, [pc, #116]	; (80017fc <HAL_UART_MspInit+0xec>)
 8001788:	f000 feb0 	bl	80024ec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_UART_MspInit+0xf0>)
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_UART_MspInit+0xf4>)
 8001790:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_UART_MspInit+0xf0>)
 8001794:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001798:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_UART_MspInit+0xf0>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ac:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017d2:	f000 fa71 	bl	8001cb8 <HAL_DMA_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80017dc:	f7ff fe12 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
 80017e6:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_UART_MspInit+0xf0>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40004c00 	.word	0x40004c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020800 	.word	0x40020800
 8001800:	200001f4 	.word	0x200001f4
 8001804:	40026040 	.word	0x40026040

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 f8d8 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Stream1_IRQHandler+0x10>)
 800186a:	f000 fbbd 	bl	8001fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200002a8 	.word	0x200002a8

08001878 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA1_Stream2_IRQHandler+0x10>)
 800187e:	f000 fbb3 	bl	8001fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001f4 	.word	0x200001f4

0800188c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA1_Stream4_IRQHandler+0x10>)
 8001892:	f000 fba9 	bl	8001fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000194 	.word	0x20000194

080018a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80018a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018a8:	f000 ffcc 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80018b6:	f004 f913 	bl	8005ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000398 	.word	0x20000398

080018c4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <I2C3_EV_IRQHandler+0x10>)
 80018ca:	f001 fb55 	bl	8002f78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000254 	.word	0x20000254

080018d8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <I2C3_ER_IRQHandler+0x10>)
 80018de:	f001 fcb1 	bl	8003244 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000254 	.word	0x20000254

080018ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <SystemInit+0x28>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <SystemInit+0x28>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SystemInit+0x28>)
 8001902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001906:	609a      	str	r2, [r3, #8]
#endif
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800191c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800191e:	e003      	b.n	8001928 <LoopCopyDataInit>

08001920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001926:	3104      	adds	r1, #4

08001928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800192c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800192e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001930:	d3f6      	bcc.n	8001920 <CopyDataInit>
  ldr  r2, =_sbss
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001934:	e002      	b.n	800193c <LoopFillZerobss>

08001936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001938:	f842 3b04 	str.w	r3, [r2], #4

0800193c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001940:	d3f9      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001942:	f7ff ffd3 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f005 fc93 	bl	8007270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff f9dd 	bl	8000d08 <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001954:	08007310 	.word	0x08007310
  ldr  r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800195c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001960:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001964:	200003dc 	.word	0x200003dc

08001968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_Init+0x40>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_Init+0x40>)
 8001982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x40>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f94d 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fd38 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f965 	bl	8001c9e <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 f92d 	bl	8001c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000004 	.word	0x20000004
 8001a08:	2000000c 	.word	0x2000000c
 8001a0c:	20000008 	.word	0x20000008

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	2000000c 	.word	0x2000000c
 8001a34:	200003d8 	.word	0x200003d8

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200003d8 	.word	0x200003d8

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_Delay+0x40>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2000000c 	.word	0x2000000c

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <__NVIC_EnableIRQ+0x38>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db0a      	blt.n	8001b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <__NVIC_SetPriority+0x4c>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b5c:	e00a      	b.n	8001b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <__NVIC_SetPriority+0x50>)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	440b      	add	r3, r1
 8001b72:	761a      	strb	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	bf28      	it	cs
 8001ba6:	2304      	movcs	r3, #4
 8001ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d902      	bls.n	8001bb8 <NVIC_EncodePriority+0x30>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b03      	subs	r3, #3
 8001bb6:	e000      	b.n	8001bba <NVIC_EncodePriority+0x32>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	4313      	orrs	r3, r2
         );
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f7ff ff8e 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff29 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff3e 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff8e 	bl	8001b88 <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff31 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa2 	bl	8001bf0 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff feb8 	bl	8001a38 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e099      	b.n	8001e08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf4:	e00f      	b.n	8001d16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf6:	f7ff fe9f 	bl	8001a38 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d908      	bls.n	8001d16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2220      	movs	r2, #32
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e078      	b.n	8001e08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1e8      	bne.n	8001cf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <HAL_DMA_Init+0x158>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d107      	bne.n	8001d80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f023 0307 	bic.w	r3, r3, #7
 8001d96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d117      	bne.n	8001dda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00e      	beq.n	8001dda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fb1b 	bl	80023f8 <DMA_CheckFifoParam>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2240      	movs	r2, #64	; 0x40
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e016      	b.n	8001e08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fad2 	bl	800238c <DMA_CalcBaseAndBitshift>
 8001de8:	4603      	mov	r3, r0
 8001dea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	223f      	movs	r2, #63	; 0x3f
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	f010803f 	.word	0xf010803f

08001e14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_DMA_Start_IT+0x26>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e040      	b.n	8001ebc <HAL_DMA_Start_IT+0xa8>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d12f      	bne.n	8001eae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fa64 	bl	8002330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	223f      	movs	r2, #63	; 0x3f
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0216 	orr.w	r2, r2, #22
 8001e82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0208 	orr.w	r2, r2, #8
 8001e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e005      	b.n	8001eba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ed2:	f7ff fdb1 	bl	8001a38 <HAL_GetTick>
 8001ed6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d008      	beq.n	8001ef6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e052      	b.n	8001f9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0216 	bic.w	r2, r2, #22
 8001f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <HAL_DMA_Abort+0x62>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0208 	bic.w	r2, r2, #8
 8001f34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0201 	bic.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f46:	e013      	b.n	8001f70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f48:	f7ff fd76 	bl	8001a38 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d90c      	bls.n	8001f70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e015      	b.n	8001f9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1e4      	bne.n	8001f48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	223f      	movs	r2, #63	; 0x3f
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00c      	b.n	8001fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2205      	movs	r2, #5
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ff4:	4b92      	ldr	r3, [pc, #584]	; (8002240 <HAL_DMA_IRQHandler+0x258>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a92      	ldr	r2, [pc, #584]	; (8002244 <HAL_DMA_IRQHandler+0x25c>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0a9b      	lsrs	r3, r3, #10
 8002000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002012:	2208      	movs	r2, #8
 8002014:	409a      	lsls	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01a      	beq.n	8002054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0204 	bic.w	r2, r2, #4
 800203a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2208      	movs	r2, #8
 8002042:	409a      	lsls	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2201      	movs	r2, #1
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d012      	beq.n	800208a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2201      	movs	r2, #1
 8002078:	409a      	lsls	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0202 	orr.w	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2204      	movs	r2, #4
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00b      	beq.n	80020c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2204      	movs	r2, #4
 80020ae:	409a      	lsls	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2210      	movs	r2, #16
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d043      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d03c      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2210      	movs	r2, #16
 80020e4:	409a      	lsls	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d018      	beq.n	800212a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d108      	bne.n	8002118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d024      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
 8002116:	e01f      	b.n	8002158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
 8002128:	e016      	b.n	8002158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0208 	bic.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2220      	movs	r2, #32
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 808e 	beq.w	8002286 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8086 	beq.w	8002286 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	2220      	movs	r2, #32
 8002180:	409a      	lsls	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b05      	cmp	r3, #5
 8002190:	d136      	bne.n	8002200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0216 	bic.w	r2, r2, #22
 80021a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x1da>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0208 	bic.w	r2, r2, #8
 80021d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	223f      	movs	r2, #63	; 0x3f
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d07d      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
        }
        return;
 80021fe:	e078      	b.n	80022f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01c      	beq.n	8002248 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d108      	bne.n	800222e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	2b00      	cmp	r3, #0
 8002222:	d030      	beq.n	8002286 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e02b      	b.n	8002286 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d027      	beq.n	8002286 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
 800223e:	e022      	b.n	8002286 <HAL_DMA_IRQHandler+0x29e>
 8002240:	20000004 	.word	0x20000004
 8002244:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10f      	bne.n	8002276 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0210 	bic.w	r2, r2, #16
 8002264:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	2b00      	cmp	r3, #0
 800228c:	d032      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d022      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2205      	movs	r2, #5
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3301      	adds	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d307      	bcc.n	80022ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f2      	bne.n	80022b2 <HAL_DMA_IRQHandler+0x2ca>
 80022cc:	e000      	b.n	80022d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
 80022f0:	e000      	b.n	80022f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022f2:	bf00      	nop
    }
  }
}
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop

080022fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230a:	b2db      	uxtb	r3, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800234c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d108      	bne.n	8002370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800236e:	e007      	b.n	8002380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	60da      	str	r2, [r3, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3b10      	subs	r3, #16
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <DMA_CalcBaseAndBitshift+0x64>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a6:	4a13      	ldr	r2, [pc, #76]	; (80023f4 <DMA_CalcBaseAndBitshift+0x68>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d909      	bls.n	80023ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58
 80023cc:	e007      	b.n	80023de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	aaaaaaab 	.word	0xaaaaaaab
 80023f4:	080072f8 	.word	0x080072f8

080023f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11f      	bne.n	8002452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d855      	bhi.n	80024c4 <DMA_CheckFifoParam+0xcc>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <DMA_CheckFifoParam+0x28>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002431 	.word	0x08002431
 8002424:	08002443 	.word	0x08002443
 8002428:	08002431 	.word	0x08002431
 800242c:	080024c5 	.word	0x080024c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d045      	beq.n	80024c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002440:	e042      	b.n	80024c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800244a:	d13f      	bne.n	80024cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002450:	e03c      	b.n	80024cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245a:	d121      	bne.n	80024a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d836      	bhi.n	80024d0 <DMA_CheckFifoParam+0xd8>
 8002462:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <DMA_CheckFifoParam+0x70>)
 8002464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002468:	08002479 	.word	0x08002479
 800246c:	0800247f 	.word	0x0800247f
 8002470:	08002479 	.word	0x08002479
 8002474:	08002491 	.word	0x08002491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e02f      	b.n	80024de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d024      	beq.n	80024d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248e:	e021      	b.n	80024d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002498:	d11e      	bne.n	80024d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800249e:	e01b      	b.n	80024d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d902      	bls.n	80024ac <DMA_CheckFifoParam+0xb4>
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d003      	beq.n	80024b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024aa:	e018      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      break;
 80024b0:	e015      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00e      	beq.n	80024dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      break;
 80024c2:	e00b      	b.n	80024dc <DMA_CheckFifoParam+0xe4>
      break;
 80024c4:	bf00      	nop
 80024c6:	e00a      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      break;
 80024c8:	bf00      	nop
 80024ca:	e008      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      break;
 80024cc:	bf00      	nop
 80024ce:	e006      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      break;
 80024d0:	bf00      	nop
 80024d2:	e004      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      break;
 80024d4:	bf00      	nop
 80024d6:	e002      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      break;   
 80024d8:	bf00      	nop
 80024da:	e000      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      break;
 80024dc:	bf00      	nop
    }
  } 
  
  return status; 
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e165      	b.n	80027d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	f040 8154 	bne.w	80027ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d00b      	beq.n	8002546 <HAL_GPIO_Init+0x5a>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253a:	2b11      	cmp	r3, #17
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b12      	cmp	r3, #18
 8002544:	d130      	bne.n	80025a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 0201 	and.w	r2, r3, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0xfc>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b12      	cmp	r3, #18
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80ae 	beq.w	80027ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b5c      	ldr	r3, [pc, #368]	; (80027e8 <HAL_GPIO_Init+0x2fc>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a5b      	ldr	r2, [pc, #364]	; (80027e8 <HAL_GPIO_Init+0x2fc>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_GPIO_Init+0x2fc>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268e:	4a57      	ldr	r2, [pc, #348]	; (80027ec <HAL_GPIO_Init+0x300>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4e      	ldr	r2, [pc, #312]	; (80027f0 <HAL_GPIO_Init+0x304>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d025      	beq.n	8002706 <HAL_GPIO_Init+0x21a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4d      	ldr	r2, [pc, #308]	; (80027f4 <HAL_GPIO_Init+0x308>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01f      	beq.n	8002702 <HAL_GPIO_Init+0x216>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_GPIO_Init+0x30c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d019      	beq.n	80026fe <HAL_GPIO_Init+0x212>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_GPIO_Init+0x310>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0x20e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_GPIO_Init+0x314>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00d      	beq.n	80026f6 <HAL_GPIO_Init+0x20a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a49      	ldr	r2, [pc, #292]	; (8002804 <HAL_GPIO_Init+0x318>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <HAL_GPIO_Init+0x206>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a48      	ldr	r2, [pc, #288]	; (8002808 <HAL_GPIO_Init+0x31c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_GPIO_Init+0x202>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00c      	b.n	8002708 <HAL_GPIO_Init+0x21c>
 80026ee:	2307      	movs	r3, #7
 80026f0:	e00a      	b.n	8002708 <HAL_GPIO_Init+0x21c>
 80026f2:	2305      	movs	r3, #5
 80026f4:	e008      	b.n	8002708 <HAL_GPIO_Init+0x21c>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e006      	b.n	8002708 <HAL_GPIO_Init+0x21c>
 80026fa:	2303      	movs	r3, #3
 80026fc:	e004      	b.n	8002708 <HAL_GPIO_Init+0x21c>
 80026fe:	2302      	movs	r3, #2
 8002700:	e002      	b.n	8002708 <HAL_GPIO_Init+0x21c>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_GPIO_Init+0x21c>
 8002706:	2300      	movs	r3, #0
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	f002 0203 	and.w	r2, r2, #3
 800270e:	0092      	lsls	r2, r2, #2
 8002710:	4093      	lsls	r3, r2
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002718:	4934      	ldr	r1, [pc, #208]	; (80027ec <HAL_GPIO_Init+0x300>)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_GPIO_Init+0x320>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800274a:	4a30      	ldr	r2, [pc, #192]	; (800280c <HAL_GPIO_Init+0x320>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002750:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_GPIO_Init+0x320>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002774:	4a25      	ldr	r2, [pc, #148]	; (800280c <HAL_GPIO_Init+0x320>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_GPIO_Init+0x320>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279e:	4a1b      	ldr	r2, [pc, #108]	; (800280c <HAL_GPIO_Init+0x320>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_GPIO_Init+0x320>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c8:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_GPIO_Init+0x320>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	f67f ae96 	bls.w	8002508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027dc:	bf00      	nop
 80027de:	3724      	adds	r7, #36	; 0x24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40013c00 	.word	0x40013c00

08002810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002820:	787b      	ldrb	r3, [r7, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800282c:	e003      	b.n	8002836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	041a      	lsls	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	619a      	str	r2, [r3, #24]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fda0 	bl	80013a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e11f      	b.n	8002ac6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fde2 	bl	8001464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d8:	f002 fc48 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 80028dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a7b      	ldr	r2, [pc, #492]	; (8002ad0 <HAL_I2C_Init+0x25c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d807      	bhi.n	80028f8 <HAL_I2C_Init+0x84>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a7a      	ldr	r2, [pc, #488]	; (8002ad4 <HAL_I2C_Init+0x260>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	bf94      	ite	ls
 80028f0:	2301      	movls	r3, #1
 80028f2:	2300      	movhi	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	e006      	b.n	8002906 <HAL_I2C_Init+0x92>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a77      	ldr	r2, [pc, #476]	; (8002ad8 <HAL_I2C_Init+0x264>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	bf94      	ite	ls
 8002900:	2301      	movls	r3, #1
 8002902:	2300      	movhi	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0db      	b.n	8002ac6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a72      	ldr	r2, [pc, #456]	; (8002adc <HAL_I2C_Init+0x268>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9b      	lsrs	r3, r3, #18
 8002918:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a64      	ldr	r2, [pc, #400]	; (8002ad0 <HAL_I2C_Init+0x25c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d802      	bhi.n	8002948 <HAL_I2C_Init+0xd4>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3301      	adds	r3, #1
 8002946:	e009      	b.n	800295c <HAL_I2C_Init+0xe8>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	4a63      	ldr	r2, [pc, #396]	; (8002ae0 <HAL_I2C_Init+0x26c>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	3301      	adds	r3, #1
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	430b      	orrs	r3, r1
 8002962:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800296e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4956      	ldr	r1, [pc, #344]	; (8002ad0 <HAL_I2C_Init+0x25c>)
 8002978:	428b      	cmp	r3, r1
 800297a:	d80d      	bhi.n	8002998 <HAL_I2C_Init+0x124>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e59      	subs	r1, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fbb1 f3f3 	udiv	r3, r1, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b04      	cmp	r3, #4
 8002992:	bf38      	it	cc
 8002994:	2304      	movcc	r3, #4
 8002996:	e04f      	b.n	8002a38 <HAL_I2C_Init+0x1c4>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d111      	bne.n	80029c4 <HAL_I2C_Init+0x150>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e58      	subs	r0, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e012      	b.n	80029ea <HAL_I2C_Init+0x176>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e58      	subs	r0, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	0099      	lsls	r1, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Init+0x17e>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e022      	b.n	8002a38 <HAL_I2C_Init+0x1c4>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10e      	bne.n	8002a18 <HAL_I2C_Init+0x1a4>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1e58      	subs	r0, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	440b      	add	r3, r1
 8002a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a16:	e00f      	b.n	8002a38 <HAL_I2C_Init+0x1c4>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	0099      	lsls	r1, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	6809      	ldr	r1, [r1, #0]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6911      	ldr	r1, [r2, #16]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68d2      	ldr	r2, [r2, #12]
 8002a72:	4311      	orrs	r1, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	000186a0 	.word	0x000186a0
 8002ad4:	001e847f 	.word	0x001e847f
 8002ad8:	003d08ff 	.word	0x003d08ff
 8002adc:	431bde83 	.word	0x431bde83
 8002ae0:	10624dd3 	.word	0x10624dd3

08002ae4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	460b      	mov	r3, r1
 8002af2:	817b      	strh	r3, [r7, #10]
 8002af4:	4613      	mov	r3, r2
 8002af6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7fe ff9e 	bl	8001a38 <HAL_GetTick>
 8002afc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	f040 80e0 	bne.w	8002ccc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2319      	movs	r3, #25
 8002b12:	2201      	movs	r2, #1
 8002b14:	4970      	ldr	r1, [pc, #448]	; (8002cd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f002 f893 	bl	8004c42 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
 8002b24:	e0d3      	b.n	8002cce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_I2C_Master_Transmit+0x50>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e0cc      	b.n	8002cce <HAL_I2C_Master_Transmit+0x1ea>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d007      	beq.n	8002b5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2221      	movs	r2, #33	; 0x21
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2210      	movs	r2, #16
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	893a      	ldrh	r2, [r7, #8]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a50      	ldr	r2, [pc, #320]	; (8002cdc <HAL_I2C_Master_Transmit+0x1f8>)
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b9c:	8979      	ldrh	r1, [r7, #10]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f001 fd54 	bl	8004650 <I2C_MasterRequestWrite>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e08d      	b.n	8002cce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bc8:	e066      	b.n	8002c98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	6a39      	ldr	r1, [r7, #32]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f002 f90d 	bl	8004dee <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d107      	bne.n	8002bf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e06b      	b.n	8002cce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d11b      	bne.n	8002c6c <HAL_I2C_Master_Transmit+0x188>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d017      	beq.n	8002c6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	6a39      	ldr	r1, [r7, #32]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f002 f8fd 	bl	8004e70 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d107      	bne.n	8002c94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e01a      	b.n	8002cce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d194      	bne.n	8002bca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e000      	b.n	8002cce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ccc:	2302      	movs	r3, #2
  }
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	00100002 	.word	0x00100002
 8002cdc:	ffff0000 	.word	0xffff0000

08002ce0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	817b      	strh	r3, [r7, #10]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	813b      	strh	r3, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cfa:	f7fe fe9d 	bl	8001a38 <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	f040 8123 	bne.w	8002f58 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d12:	4b94      	ldr	r3, [pc, #592]	; (8002f64 <HAL_I2C_Mem_Read_DMA+0x284>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	08db      	lsrs	r3, r3, #3
 8002d18:	4a93      	ldr	r2, [pc, #588]	; (8002f68 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0a1a      	lsrs	r2, r3, #8
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009a      	lsls	r2, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d116      	bne.n	8002d66 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0220 	orr.w	r2, r3, #32
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0f9      	b.n	8002f5a <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d0db      	beq.n	8002d2c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2C_Mem_Read_DMA+0xa2>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e0eb      	b.n	8002f5a <HAL_I2C_Mem_Read_DMA+0x27a>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d007      	beq.n	8002da8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2222      	movs	r2, #34	; 0x22
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a61      	ldr	r2, [pc, #388]	; (8002f6c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8085 	beq.w	8002efe <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	4a5d      	ldr	r2, [pc, #372]	; (8002f70 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	4a5c      	ldr	r2, [pc, #368]	; (8002f74 <HAL_I2C_Mem_Read_DMA+0x294>)
 8002e02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	2200      	movs	r2, #0
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	2200      	movs	r2, #0
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	2200      	movs	r2, #0
 8002e1a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	2200      	movs	r2, #0
 8002e22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	4619      	mov	r1, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	461a      	mov	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	f7fe ffeb 	bl	8001e14 <HAL_DMA_Start_IT>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8002e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d144      	bne.n	8002ed6 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002e4c:	88f8      	ldrh	r0, [r7, #6]
 8002e4e:	893a      	ldrh	r2, [r7, #8]
 8002e50:	8979      	ldrh	r1, [r7, #10]
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2323      	movs	r3, #35	; 0x23
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f001 fc79 	bl	8004754 <I2C_RequestMemoryRead>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e076      	b.n	8002f5a <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d108      	bne.n	8002e86 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e007      	b.n	8002e96 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	e03e      	b.n	8002f54 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0210 	orr.w	r2, r3, #16
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e02d      	b.n	8002f5a <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002efe:	88f8      	ldrh	r0, [r7, #6]
 8002f00:	893a      	ldrh	r2, [r7, #8]
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2323      	movs	r3, #35	; 0x23
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f001 fc20 	bl	8004754 <I2C_RequestMemoryRead>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e01d      	b.n	8002f5a <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f42:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e000      	b.n	8002f5a <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3728      	adds	r7, #40	; 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000004 	.word	0x20000004
 8002f68:	14f8b589 	.word	0x14f8b589
 8002f6c:	ffff0000 	.word	0xffff0000
 8002f70:	08004921 	.word	0x08004921
 8002f74:	08004acb 	.word	0x08004acb

08002f78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d003      	beq.n	8002fb0 <HAL_I2C_EV_IRQHandler+0x38>
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	f040 80b6 	bne.w	800311c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002fd0:	d003      	beq.n	8002fda <HAL_I2C_EV_IRQHandler+0x62>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_EV_IRQHandler+0x66>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_I2C_EV_IRQHandler+0x68>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f000 8127 	beq.w	8003234 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00c      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x92>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	0a5b      	lsrs	r3, r3, #9
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f001 ffa7 	bl	8004f50 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fd12 	bl	8003a2c <I2C_Master_SB>
 8003008:	e087      	b.n	800311a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_I2C_EV_IRQHandler+0xb2>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	0a5b      	lsrs	r3, r3, #9
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fd88 	bl	8003b38 <I2C_Master_ADD10>
 8003028:	e077      	b.n	800311a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_I2C_EV_IRQHandler+0xd2>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	0a5b      	lsrs	r3, r3, #9
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fda2 	bl	8003b8c <I2C_Master_ADDR>
 8003048:	e067      	b.n	800311a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d030      	beq.n	80030b8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003064:	f000 80e8 	beq.w	8003238 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	09db      	lsrs	r3, r3, #7
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00f      	beq.n	8003094 <HAL_I2C_EV_IRQHandler+0x11c>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HAL_I2C_EV_IRQHandler+0x11c>
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f9de 	bl	800344e <I2C_MasterTransmit_TXE>
 8003092:	e042      	b.n	800311a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80cb 	beq.w	8003238 <HAL_I2C_EV_IRQHandler+0x2c0>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	0a5b      	lsrs	r3, r3, #9
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80c4 	beq.w	8003238 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fa68 	bl	8003586 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b6:	e0bf      	b.n	8003238 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c6:	f000 80b7 	beq.w	8003238 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00f      	beq.n	80030f6 <HAL_I2C_EV_IRQHandler+0x17e>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	0a9b      	lsrs	r3, r3, #10
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_I2C_EV_IRQHandler+0x17e>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fb30 	bl	8003754 <I2C_MasterReceive_RXNE>
 80030f4:	e011      	b.n	800311a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 809a 	beq.w	8003238 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	0a5b      	lsrs	r3, r3, #9
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8093 	beq.w	8003238 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fba0 	bl	8003858 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003118:	e08e      	b.n	8003238 <HAL_I2C_EV_IRQHandler+0x2c0>
 800311a:	e08d      	b.n	8003238 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	e007      	b.n	800313e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <HAL_I2C_EV_IRQHandler+0x1f8>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	0a5b      	lsrs	r3, r3, #9
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00c      	beq.n	8003170 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003166:	69b9      	ldr	r1, [r7, #24]
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 ff5e 	bl	800402a <I2C_Slave_ADDR>
 800316e:	e066      	b.n	800323e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_I2C_EV_IRQHandler+0x218>
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	0a5b      	lsrs	r3, r3, #9
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 ff93 	bl	80040b4 <I2C_Slave_STOPF>
 800318e:	e056      	b.n	800323e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003190:	7bbb      	ldrb	r3, [r7, #14]
 8003192:	2b21      	cmp	r3, #33	; 0x21
 8003194:	d002      	beq.n	800319c <HAL_I2C_EV_IRQHandler+0x224>
 8003196:	7bbb      	ldrb	r3, [r7, #14]
 8003198:	2b29      	cmp	r3, #41	; 0x29
 800319a:	d125      	bne.n	80031e8 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	09db      	lsrs	r3, r3, #7
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00f      	beq.n	80031c8 <HAL_I2C_EV_IRQHandler+0x250>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	0a9b      	lsrs	r3, r3, #10
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <HAL_I2C_EV_IRQHandler+0x250>
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d103      	bne.n	80031c8 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fe74 	bl	8003eae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031c6:	e039      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d033      	beq.n	800323c <HAL_I2C_EV_IRQHandler+0x2c4>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	0a5b      	lsrs	r3, r3, #9
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d02d      	beq.n	800323c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fea1 	bl	8003f28 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031e6:	e029      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00f      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x29c>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	0a9b      	lsrs	r3, r3, #10
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x29c>
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 feac 	bl	8003f6a <I2C_SlaveReceive_RXNE>
 8003212:	e014      	b.n	800323e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00e      	beq.n	800323e <HAL_I2C_EV_IRQHandler+0x2c6>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	0a5b      	lsrs	r3, r3, #9
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 feda 	bl	8003fe6 <I2C_SlaveReceive_BTF>
 8003232:	e004      	b.n	800323e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003234:	bf00      	nop
 8003236:	e002      	b.n	800323e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800323c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800325c:	2300      	movs	r3, #0
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003266:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00e      	beq.n	8003292 <HAL_I2C_ER_IRQHandler+0x4e>
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003290:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	0a5b      	lsrs	r3, r3, #9
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <HAL_I2C_ER_IRQHandler+0x78>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80032ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d03f      	beq.n	8003348 <HAL_I2C_ER_IRQHandler+0x104>
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d039      	beq.n	8003348 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80032d4:	7efb      	ldrb	r3, [r7, #27]
 80032d6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80032ee:	7ebb      	ldrb	r3, [r7, #26]
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d112      	bne.n	800331a <HAL_I2C_ER_IRQHandler+0xd6>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_I2C_ER_IRQHandler+0xd6>
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b21      	cmp	r3, #33	; 0x21
 80032fe:	d008      	beq.n	8003312 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b29      	cmp	r3, #41	; 0x29
 8003304:	d005      	beq.n	8003312 <HAL_I2C_ER_IRQHandler+0xce>
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	2b28      	cmp	r3, #40	; 0x28
 800330a:	d106      	bne.n	800331a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b21      	cmp	r3, #33	; 0x21
 8003310:	d103      	bne.n	800331a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fffe 	bl	8004314 <I2C_Slave_AF>
 8003318:	e016      	b.n	8003348 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003322:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800332c:	7efb      	ldrb	r3, [r7, #27]
 800332e:	2b10      	cmp	r3, #16
 8003330:	d002      	beq.n	8003338 <HAL_I2C_ER_IRQHandler+0xf4>
 8003332:	7efb      	ldrb	r3, [r7, #27]
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d107      	bne.n	8003348 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003346:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	0adb      	lsrs	r3, r3, #11
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00e      	beq.n	8003372 <HAL_I2C_ER_IRQHandler+0x12e>
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	f043 0308 	orr.w	r3, r3, #8
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003370:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f001 f835 	bl	80043f4 <I2C_ITError>
  }
}
 800338a:	bf00      	nop
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	460b      	mov	r3, r1
 80033ec:	70fb      	strb	r3, [r7, #3]
 80033ee:	4613      	mov	r3, r2
 80033f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003464:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d150      	bne.n	8003516 <I2C_MasterTransmit_TXE+0xc8>
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b21      	cmp	r3, #33	; 0x21
 8003478:	d14d      	bne.n	8003516 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d01d      	beq.n	80034bc <I2C_MasterTransmit_TXE+0x6e>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b20      	cmp	r3, #32
 8003484:	d01a      	beq.n	80034bc <I2C_MasterTransmit_TXE+0x6e>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800348c:	d016      	beq.n	80034bc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800349c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2211      	movs	r2, #17
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff6c 	bl	8003392 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034ba:	e060      	b.n	800357e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034ca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034da:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d107      	bne.n	8003506 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff87 	bl	8003412 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003504:	e03b      	b.n	800357e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ff3f 	bl	8003392 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003514:	e033      	b.n	800357e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b21      	cmp	r3, #33	; 0x21
 800351a:	d005      	beq.n	8003528 <I2C_MasterTransmit_TXE+0xda>
 800351c:	7bbb      	ldrb	r3, [r7, #14]
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d12d      	bne.n	800357e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b22      	cmp	r3, #34	; 0x22
 8003526:	d12a      	bne.n	800357e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003540:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003542:	e01c      	b.n	800357e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d103      	bne.n	8003558 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f898 	bl	8003686 <I2C_MemoryTransmit_TXE_BTF>
}
 8003556:	e012      	b.n	800357e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800357c:	e7ff      	b.n	800357e <I2C_MasterTransmit_TXE+0x130>
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b21      	cmp	r3, #33	; 0x21
 800359e:	d165      	bne.n	800366c <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d012      	beq.n	80035d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	781a      	ldrb	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80035ce:	e056      	b.n	800367e <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d01d      	beq.n	8003612 <I2C_MasterTransmit_BTF+0x8c>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d01a      	beq.n	8003612 <I2C_MasterTransmit_BTF+0x8c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e2:	d016      	beq.n	8003612 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2211      	movs	r2, #17
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fec1 	bl	8003392 <HAL_I2C_MasterTxCpltCallback>
}
 8003610:	e035      	b.n	800367e <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003620:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d107      	bne.n	800365c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fedc 	bl	8003412 <HAL_I2C_MemTxCpltCallback>
}
 800365a:	e010      	b.n	800367e <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff fe94 	bl	8003392 <HAL_I2C_MasterTxCpltCallback>
}
 800366a:	e008      	b.n	800367e <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d102      	bne.n	800367e <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f804 	bl	8003686 <I2C_MemoryTransmit_TXE_BTF>
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11d      	bne.n	80036d2 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10b      	bne.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ae:	1c9a      	adds	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80036b4:	e048      	b.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	121b      	asrs	r3, r3, #8
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036d0:	e03a      	b.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10b      	bne.n	80036f2 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036f0:	e02a      	b.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d126      	bne.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b22      	cmp	r3, #34	; 0x22
 8003704:	d108      	bne.n	8003718 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	e017      	b.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b21      	cmp	r3, #33	; 0x21
 8003722:	d111      	bne.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b22      	cmp	r3, #34	; 0x22
 8003766:	d173      	bne.n	8003850 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d920      	bls.n	80037b8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d154      	bne.n	8003850 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80037b6:	e04b      	b.n	8003850 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d047      	beq.n	8003850 <I2C_MasterReceive_RXNE+0xfc>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d002      	beq.n	80037cc <I2C_MasterReceive_RXNE+0x78>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d141      	bne.n	8003850 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037da:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ea:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d10a      	bne.n	800383c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7fd fdcd 	bl	80013d4 <HAL_I2C_MemRxCpltCallback>
}
 800383a:	e009      	b.n	8003850 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2212      	movs	r2, #18
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fdab 	bl	80033a6 <HAL_I2C_MasterRxCpltCallback>
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b04      	cmp	r3, #4
 800386e:	d11b      	bne.n	80038a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038a6:	e0bd      	b.n	8003a24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d129      	bne.n	8003906 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d00a      	beq.n	80038de <I2C_MasterReceive_BTF+0x86>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d007      	beq.n	80038de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003904:	e08e      	b.n	8003a24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d176      	bne.n	80039fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d002      	beq.n	800391c <I2C_MasterReceive_BTF+0xc4>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b10      	cmp	r3, #16
 800391a:	d108      	bne.n	800392e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e019      	b.n	8003962 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d002      	beq.n	800393a <I2C_MasterReceive_BTF+0xe2>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d108      	bne.n	800394c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e00a      	b.n	8003962 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b10      	cmp	r3, #16
 8003950:	d007      	beq.n	8003962 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003960:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d10a      	bne.n	80039e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fd fcf7 	bl	80013d4 <HAL_I2C_MemRxCpltCallback>
}
 80039e6:	e01d      	b.n	8003a24 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2212      	movs	r2, #18
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fcd5 	bl	80033a6 <HAL_I2C_MasterRxCpltCallback>
}
 80039fc:	e012      	b.n	8003a24 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d117      	bne.n	8003a70 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a58:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a5a:	e067      	b.n	8003b2c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	611a      	str	r2, [r3, #16]
}
 8003a6e:	e05d      	b.n	8003b2c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a78:	d133      	bne.n	8003ae2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b21      	cmp	r3, #33	; 0x21
 8003a84:	d109      	bne.n	8003a9a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a96:	611a      	str	r2, [r3, #16]
 8003a98:	e008      	b.n	8003aac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <I2C_Master_SB+0x92>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d032      	beq.n	8003b2c <I2C_Master_SB+0x100>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02d      	beq.n	8003b2c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ade:	605a      	str	r2, [r3, #4]
}
 8003ae0:	e024      	b.n	8003b2c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10e      	bne.n	8003b08 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	11db      	asrs	r3, r3, #7
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 0306 	and.w	r3, r3, #6
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f063 030f 	orn	r3, r3, #15
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	611a      	str	r2, [r3, #16]
}
 8003b06:	e011      	b.n	8003b2c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10d      	bne.n	8003b2c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	11db      	asrs	r3, r3, #7
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 0306 	and.w	r3, r3, #6
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f063 030e 	orn	r3, r3, #14
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <I2C_Master_ADD10+0x24>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d011      	beq.n	8003b80 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <I2C_Master_ADD10+0x38>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b091      	sub	sp, #68	; 0x44
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b22      	cmp	r3, #34	; 0x22
 8003bb4:	f040 8169 	bne.w	8003e8a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10f      	bne.n	8003be0 <I2C_Master_ADDR+0x54>
 8003bc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d10b      	bne.n	8003be0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc8:	2300      	movs	r3, #0
 8003bca:	633b      	str	r3, [r7, #48]	; 0x30
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	633b      	str	r3, [r7, #48]	; 0x30
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	633b      	str	r3, [r7, #48]	; 0x30
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	e160      	b.n	8003ea2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11d      	bne.n	8003c24 <I2C_Master_ADDR+0x98>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bf0:	d118      	bne.n	8003c24 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c16:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50
 8003c22:	e13e      	b.n	8003ea2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d113      	bne.n	8003c56 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e115      	b.n	8003e82 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	f040 808a 	bne.w	8003d76 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c68:	d137      	bne.n	8003cda <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c78:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c88:	d113      	bne.n	8003cb2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c98:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	e0e7      	b.n	8003e82 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e0d3      	b.n	8003e82 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d02e      	beq.n	8003d3e <I2C_Master_ADDR+0x1b2>
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d02b      	beq.n	8003d3e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce8:	2b12      	cmp	r3, #18
 8003cea:	d102      	bne.n	8003cf2 <I2C_Master_ADDR+0x166>
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d125      	bne.n	8003d3e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d00e      	beq.n	8003d16 <I2C_Master_ADDR+0x18a>
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d00b      	beq.n	8003d16 <I2C_Master_ADDR+0x18a>
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d008      	beq.n	8003d16 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e007      	b.n	8003d26 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	e0a1      	b.n	8003e82 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	e085      	b.n	8003e82 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d14d      	bne.n	8003e1c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d016      	beq.n	8003db4 <I2C_Master_ADDR+0x228>
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d013      	beq.n	8003db4 <I2C_Master_ADDR+0x228>
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d010      	beq.n	8003db4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e007      	b.n	8003dc4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd2:	d117      	bne.n	8003e04 <I2C_Master_ADDR+0x278>
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dda:	d00b      	beq.n	8003df4 <I2C_Master_ADDR+0x268>
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d008      	beq.n	8003df4 <I2C_Master_ADDR+0x268>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d005      	beq.n	8003df4 <I2C_Master_ADDR+0x268>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d002      	beq.n	8003df4 <I2C_Master_ADDR+0x268>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d107      	bne.n	8003e04 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e02:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	e032      	b.n	8003e82 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e2a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3a:	d117      	bne.n	8003e6c <I2C_Master_ADDR+0x2e0>
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e42:	d00b      	beq.n	8003e5c <I2C_Master_ADDR+0x2d0>
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d008      	beq.n	8003e5c <I2C_Master_ADDR+0x2d0>
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d005      	beq.n	8003e5c <I2C_Master_ADDR+0x2d0>
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d002      	beq.n	8003e5c <I2C_Master_ADDR+0x2d0>
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d107      	bne.n	8003e6c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e6a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e88:	e00b      	b.n	8003ea2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	e7ff      	b.n	8003ea2 <I2C_Master_ADDR+0x316>
 8003ea2:	bf00      	nop
 8003ea4:	3744      	adds	r7, #68	; 0x44
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d02b      	beq.n	8003f20 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	781a      	ldrb	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d114      	bne.n	8003f20 <I2C_SlaveTransmit_TXE+0x72>
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b29      	cmp	r3, #41	; 0x29
 8003efa:	d111      	bne.n	8003f20 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2221      	movs	r2, #33	; 0x21
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2228      	movs	r2, #40	; 0x28
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fa4d 	bl	80033ba <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d011      	beq.n	8003f5e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02c      	beq.n	8003fde <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d114      	bne.n	8003fde <I2C_SlaveReceive_RXNE+0x74>
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb8:	d111      	bne.n	8003fde <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2222      	movs	r2, #34	; 0x22
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2228      	movs	r2, #40	; 0x28
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff f9f8 	bl	80033ce <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004044:	2b28      	cmp	r3, #40	; 0x28
 8004046:	d127      	bne.n	8004098 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004056:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	09db      	lsrs	r3, r3, #7
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d103      	bne.n	800407c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	81bb      	strh	r3, [r7, #12]
 800407a:	e002      	b.n	8004082 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800408a:	89ba      	ldrh	r2, [r7, #12]
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff f9a6 	bl	80033e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004096:	e008      	b.n	80040aa <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0202 	mvn.w	r2, #2
 80040a0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004100:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800410c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004110:	d172      	bne.n	80041f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b22      	cmp	r3, #34	; 0x22
 8004116:	d002      	beq.n	800411e <I2C_Slave_STOPF+0x6a>
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b2a      	cmp	r3, #42	; 0x2a
 800411c:	d135      	bne.n	800418a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0204 	orr.w	r2, r3, #4
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004150:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f8d0 	bl	80022fc <HAL_DMA_GetState>
 800415c:	4603      	mov	r3, r0
 800415e:	2b01      	cmp	r3, #1
 8004160:	d049      	beq.n	80041f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	4a69      	ldr	r2, [pc, #420]	; (800430c <I2C_Slave_STOPF+0x258>)
 8004168:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd ff18 	bl	8001fa4 <HAL_DMA_Abort_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d03d      	beq.n	80041f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004184:	4610      	mov	r0, r2
 8004186:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004188:	e035      	b.n	80041f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f043 0204 	orr.w	r2, r3, #4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe f89a 	bl	80022fc <HAL_DMA_GetState>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d014      	beq.n	80041f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	4a4e      	ldr	r2, [pc, #312]	; (800430c <I2C_Slave_STOPF+0x258>)
 80041d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fd fee2 	bl	8001fa4 <HAL_DMA_Abort_IT>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f0:	4610      	mov	r0, r2
 80041f2:	4798      	blx	r3
 80041f4:	e000      	b.n	80041f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d03e      	beq.n	8004280 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b04      	cmp	r3, #4
 800420e:	d112      	bne.n	8004236 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d112      	bne.n	800426a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f043 0204 	orr.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8b3 	bl	80043f4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800428e:	e039      	b.n	8004304 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b2a      	cmp	r3, #42	; 0x2a
 8004294:	d109      	bne.n	80042aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2228      	movs	r2, #40	; 0x28
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff f892 	bl	80033ce <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b28      	cmp	r3, #40	; 0x28
 80042b4:	d111      	bne.n	80042da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a15      	ldr	r2, [pc, #84]	; (8004310 <I2C_Slave_STOPF+0x25c>)
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff f893 	bl	80033fe <HAL_I2C_ListenCpltCallback>
}
 80042d8:	e014      	b.n	8004304 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	2b22      	cmp	r3, #34	; 0x22
 80042e0:	d002      	beq.n	80042e8 <I2C_Slave_STOPF+0x234>
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	2b22      	cmp	r3, #34	; 0x22
 80042e6:	d10d      	bne.n	8004304 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff f865 	bl	80033ce <HAL_I2C_SlaveRxCpltCallback>
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	08004b45 	.word	0x08004b45
 8004310:	ffff0000 	.word	0xffff0000

08004314 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004322:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d002      	beq.n	8004336 <I2C_Slave_AF+0x22>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b20      	cmp	r3, #32
 8004334:	d129      	bne.n	800438a <I2C_Slave_AF+0x76>
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	2b28      	cmp	r3, #40	; 0x28
 800433a:	d126      	bne.n	800438a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a2c      	ldr	r2, [pc, #176]	; (80043f0 <I2C_Slave_AF+0xdc>)
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004350:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800435a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff f83b 	bl	80033fe <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004388:	e02e      	b.n	80043e8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	2b21      	cmp	r3, #33	; 0x21
 800438e:	d126      	bne.n	80043de <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <I2C_Slave_AF+0xdc>)
 8004394:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2221      	movs	r2, #33	; 0x21
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fe ffef 	bl	80033ba <HAL_I2C_SlaveTxCpltCallback>
}
 80043dc:	e004      	b.n	80043e8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e6:	615a      	str	r2, [r3, #20]
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	ffff0000 	.word	0xffff0000

080043f4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004402:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b10      	cmp	r3, #16
 800440e:	d10a      	bne.n	8004426 <I2C_ITError+0x32>
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b22      	cmp	r3, #34	; 0x22
 8004414:	d107      	bne.n	8004426 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004424:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800442c:	2b28      	cmp	r3, #40	; 0x28
 800442e:	d107      	bne.n	8004440 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2228      	movs	r2, #40	; 0x28
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800443e:	e015      	b.n	800446c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444e:	d006      	beq.n	800445e <I2C_ITError+0x6a>
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b60      	cmp	r3, #96	; 0x60
 8004454:	d003      	beq.n	800445e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447a:	d162      	bne.n	8004542 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800448a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d020      	beq.n	80044dc <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	4a6a      	ldr	r2, [pc, #424]	; (8004648 <I2C_ITError+0x254>)
 80044a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd fd7c 	bl	8001fa4 <HAL_DMA_Abort_IT>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8089 	beq.w	80045c6 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044d6:	4610      	mov	r0, r2
 80044d8:	4798      	blx	r3
 80044da:	e074      	b.n	80045c6 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	4a59      	ldr	r2, [pc, #356]	; (8004648 <I2C_ITError+0x254>)
 80044e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fd5b 	bl	8001fa4 <HAL_DMA_Abort_IT>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d068      	beq.n	80045c6 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d10b      	bne.n	800451a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800453c:	4610      	mov	r0, r2
 800453e:	4798      	blx	r3
 8004540:	e041      	b.n	80045c6 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b60      	cmp	r3, #96	; 0x60
 800454c:	d125      	bne.n	800459a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d10b      	bne.n	8004582 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fe ff51 	bl	800343a <HAL_I2C_AbortCpltCallback>
 8004598:	e015      	b.n	80045c6 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d10b      	bne.n	80045c0 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7fe ff30 	bl	8003426 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10e      	bne.n	80045f4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d104      	bne.n	80045f4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b04      	cmp	r3, #4
 8004616:	d113      	bne.n	8004640 <I2C_ITError+0x24c>
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b28      	cmp	r3, #40	; 0x28
 800461c:	d110      	bne.n	8004640 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a0a      	ldr	r2, [pc, #40]	; (800464c <I2C_ITError+0x258>)
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fe fedf 	bl	80033fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	08004b45 	.word	0x08004b45
 800464c:	ffff0000 	.word	0xffff0000

08004650 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	460b      	mov	r3, r1
 800465e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d006      	beq.n	800467a <I2C_MasterRequestWrite+0x2a>
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d003      	beq.n	800467a <I2C_MasterRequestWrite+0x2a>
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004678:	d108      	bne.n	800468c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e00b      	b.n	80046a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	2b12      	cmp	r3, #18
 8004692:	d107      	bne.n	80046a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fac6 	bl	8004c42 <I2C_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00c      	beq.n	80046d6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e035      	b.n	8004742 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046de:	d108      	bne.n	80046f2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e0:	897b      	ldrh	r3, [r7, #10]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046ee:	611a      	str	r2, [r3, #16]
 80046f0:	e01b      	b.n	800472a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046f2:	897b      	ldrh	r3, [r7, #10]
 80046f4:	11db      	asrs	r3, r3, #7
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0306 	and.w	r3, r3, #6
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f063 030f 	orn	r3, r3, #15
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	490f      	ldr	r1, [pc, #60]	; (800474c <I2C_MasterRequestWrite+0xfc>)
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 faed 	bl	8004cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e010      	b.n	8004742 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004720:	897b      	ldrh	r3, [r7, #10]
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4908      	ldr	r1, [pc, #32]	; (8004750 <I2C_MasterRequestWrite+0x100>)
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fadd 	bl	8004cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	00010008 	.word	0x00010008
 8004750:	00010002 	.word	0x00010002

08004754 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	461a      	mov	r2, r3
 8004762:	4603      	mov	r3, r0
 8004764:	817b      	strh	r3, [r7, #10]
 8004766:	460b      	mov	r3, r1
 8004768:	813b      	strh	r3, [r7, #8]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800477c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	2200      	movs	r2, #0
 8004796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fa51 	bl	8004c42 <I2C_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e0a9      	b.n	8004914 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047c0:	897b      	ldrh	r3, [r7, #10]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	6a3a      	ldr	r2, [r7, #32]
 80047d4:	4951      	ldr	r1, [pc, #324]	; (800491c <I2C_RequestMemoryRead+0x1c8>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fa8a 	bl	8004cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e096      	b.n	8004914 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fe:	6a39      	ldr	r1, [r7, #32]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 faf4 	bl	8004dee <I2C_WaitOnTXEFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00d      	beq.n	8004828 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2b04      	cmp	r3, #4
 8004812:	d107      	bne.n	8004824 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004822:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e075      	b.n	8004914 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d105      	bne.n	800483a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800482e:	893b      	ldrh	r3, [r7, #8]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]
 8004838:	e021      	b.n	800487e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800483a:	893b      	ldrh	r3, [r7, #8]
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	b29b      	uxth	r3, r3
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	6a39      	ldr	r1, [r7, #32]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 face 	bl	8004dee <I2C_WaitOnTXEFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	2b04      	cmp	r3, #4
 800485e:	d107      	bne.n	8004870 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e04f      	b.n	8004914 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004874:	893b      	ldrh	r3, [r7, #8]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800487e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004880:	6a39      	ldr	r1, [r7, #32]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 fab3 	bl	8004dee <I2C_WaitOnTXEFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00d      	beq.n	80048aa <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2b04      	cmp	r3, #4
 8004894:	d107      	bne.n	80048a6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e034      	b.n	8004914 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f9bb 	bl	8004c42 <I2C_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00c      	beq.n	80048ec <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e013      	b.n	8004914 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048ec:	897b      	ldrh	r3, [r7, #10]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	6a3a      	ldr	r2, [r7, #32]
 8004900:	4906      	ldr	r1, [pc, #24]	; (800491c <I2C_RequestMemoryRead+0x1c8>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f9f4 	bl	8004cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	00010002 	.word	0x00010002

08004920 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004952:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	2200      	movs	r2, #0
 8004962:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	2200      	movs	r2, #0
 8004972:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800497a:	2b21      	cmp	r3, #33	; 0x21
 800497c:	d007      	beq.n	800498e <I2C_DMAXferCplt+0x6e>
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004984:	2b22      	cmp	r3, #34	; 0x22
 8004986:	d131      	bne.n	80049ec <I2C_DMAXferCplt+0xcc>
 8004988:	7cbb      	ldrb	r3, [r7, #18]
 800498a:	2b20      	cmp	r3, #32
 800498c:	d12e      	bne.n	80049ec <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2200      	movs	r2, #0
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049a4:	7cfb      	ldrb	r3, [r7, #19]
 80049a6:	2b29      	cmp	r3, #41	; 0x29
 80049a8:	d10a      	bne.n	80049c0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2221      	movs	r2, #33	; 0x21
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2228      	movs	r2, #40	; 0x28
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049b8:	6978      	ldr	r0, [r7, #20]
 80049ba:	f7fe fcfe 	bl	80033ba <HAL_I2C_SlaveTxCpltCallback>
 80049be:	e00c      	b.n	80049da <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	2b2a      	cmp	r3, #42	; 0x2a
 80049c4:	d109      	bne.n	80049da <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2222      	movs	r2, #34	; 0x22
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2228      	movs	r2, #40	; 0x28
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049d4:	6978      	ldr	r0, [r7, #20]
 80049d6:	f7fe fcfa 	bl	80033ce <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80049e8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049ea:	e06a      	b.n	8004ac2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d064      	beq.n	8004ac2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a10:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a20:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a28:	d009      	beq.n	8004a3e <I2C_DMAXferCplt+0x11e>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d006      	beq.n	8004a3e <I2C_DMAXferCplt+0x11e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a36:	d002      	beq.n	8004a3e <I2C_DMAXferCplt+0x11e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d107      	bne.n	8004a4e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a5c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2200      	movs	r2, #0
 8004a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004a7c:	6978      	ldr	r0, [r7, #20]
 8004a7e:	f7fe fcd2 	bl	8003426 <HAL_I2C_ErrorCallback>
}
 8004a82:	e01e      	b.n	8004ac2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d10a      	bne.n	8004aae <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7fc fc94 	bl	80013d4 <HAL_I2C_MemRxCpltCallback>
}
 8004aac:	e009      	b.n	8004ac2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2212      	movs	r2, #18
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004abc:	6978      	ldr	r0, [r7, #20]
 8004abe:	f7fe fc72 	bl	80033a6 <HAL_I2C_MasterRxCpltCallback>
}
 8004ac2:	bf00      	nop
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	2200      	movs	r2, #0
 8004af6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fd fc0d 	bl	8002318 <HAL_DMA_GetError>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d01b      	beq.n	8004b3c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b12:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7fe fc75 	bl	8003426 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b58:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	2200      	movs	r2, #0
 8004b68:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	2200      	movs	r2, #0
 8004b78:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	2200      	movs	r2, #0
 8004bae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b60      	cmp	r3, #96	; 0x60
 8004bca:	d10e      	bne.n	8004bea <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7fe fc29 	bl	800343a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004be8:	e027      	b.n	8004c3a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bea:	7afb      	ldrb	r3, [r7, #11]
 8004bec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bf0:	2b28      	cmp	r3, #40	; 0x28
 8004bf2:	d117      	bne.n	8004c24 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2228      	movs	r2, #40	; 0x28
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c22:	e007      	b.n	8004c34 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7fe fbf6 	bl	8003426 <HAL_I2C_ErrorCallback>
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c52:	e025      	b.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d021      	beq.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5c:	f7fc feec 	bl	8001a38 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d302      	bcc.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d116      	bne.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e023      	b.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d10d      	bne.n	8004cc6 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	43da      	mvns	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	e00c      	b.n	8004ce0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	43da      	mvns	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d0b6      	beq.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cfe:	e051      	b.n	8004da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0e:	d123      	bne.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	f043 0204 	orr.w	r2, r3, #4
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e046      	b.n	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d021      	beq.n	8004da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d60:	f7fc fe6a 	bl	8001a38 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d302      	bcc.n	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d116      	bne.n	8004da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e020      	b.n	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	0c1b      	lsrs	r3, r3, #16
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d10c      	bne.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	43da      	mvns	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e00b      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d18d      	bne.n	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dfa:	e02d      	b.n	8004e58 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f878 	bl	8004ef2 <I2C_IsAcknowledgeFailed>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e02d      	b.n	8004e68 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d021      	beq.n	8004e58 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e14:	f7fc fe10 	bl	8001a38 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d302      	bcc.n	8004e2a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d116      	bne.n	8004e58 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e007      	b.n	8004e68 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d1ca      	bne.n	8004dfc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e7c:	e02d      	b.n	8004eda <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f837 	bl	8004ef2 <I2C_IsAcknowledgeFailed>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e02d      	b.n	8004eea <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d021      	beq.n	8004eda <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e96:	f7fc fdcf 	bl	8001a38 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d116      	bne.n	8004eda <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e007      	b.n	8004eea <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d1ca      	bne.n	8004e7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f08:	d11b      	bne.n	8004f42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f043 0204 	orr.w	r2, r3, #4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f60:	d103      	bne.n	8004f6a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f68:	e007      	b.n	8004f7a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f72:	d102      	bne.n	8004f7a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2208      	movs	r2, #8
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0cc      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b68      	ldr	r3, [pc, #416]	; (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d90c      	bls.n	8004fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b65      	ldr	r3, [pc, #404]	; (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	4b63      	ldr	r3, [pc, #396]	; (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0b8      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fdc:	4b59      	ldr	r3, [pc, #356]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4a58      	ldr	r2, [pc, #352]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff4:	4b53      	ldr	r3, [pc, #332]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4a52      	ldr	r2, [pc, #328]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005000:	4b50      	ldr	r3, [pc, #320]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	494d      	ldr	r1, [pc, #308]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d044      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	4b47      	ldr	r3, [pc, #284]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d119      	bne.n	8005066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e07f      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d003      	beq.n	8005046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005042:	2b03      	cmp	r3, #3
 8005044:	d107      	bne.n	8005056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005046:	4b3f      	ldr	r3, [pc, #252]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e06f      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005056:	4b3b      	ldr	r3, [pc, #236]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e067      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005066:	4b37      	ldr	r3, [pc, #220]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f023 0203 	bic.w	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4934      	ldr	r1, [pc, #208]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005078:	f7fc fcde 	bl	8001a38 <HAL_GetTick>
 800507c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507e:	e00a      	b.n	8005096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005080:	f7fc fcda 	bl	8001a38 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	; 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e04f      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	4b2b      	ldr	r3, [pc, #172]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 020c 	and.w	r2, r3, #12
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d1eb      	bne.n	8005080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050a8:	4b25      	ldr	r3, [pc, #148]	; (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d20c      	bcs.n	80050d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b6:	4b22      	ldr	r3, [pc, #136]	; (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e032      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4916      	ldr	r1, [pc, #88]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	490e      	ldr	r1, [pc, #56]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800510e:	f000 f855 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 8005112:	4601      	mov	r1, r0
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <HAL_RCC_ClockConfig+0x1c0>)
 8005120:	5cd3      	ldrb	r3, [r2, r3]
 8005122:	fa21 f303 	lsr.w	r3, r1, r3
 8005126:	4a09      	ldr	r2, [pc, #36]	; (800514c <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800512a:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7fc fc3e 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40023c00 	.word	0x40023c00
 8005144:	40023800 	.word	0x40023800
 8005148:	080072e0 	.word	0x080072e0
 800514c:	20000004 	.word	0x20000004
 8005150:	20000008 	.word	0x20000008

08005154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005158:	4b03      	ldr	r3, [pc, #12]	; (8005168 <HAL_RCC_GetHCLKFreq+0x14>)
 800515a:	681b      	ldr	r3, [r3, #0]
}
 800515c:	4618      	mov	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20000004 	.word	0x20000004

0800516c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005170:	f7ff fff0 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 8005174:	4601      	mov	r1, r0
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0a9b      	lsrs	r3, r3, #10
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005182:	5cd3      	ldrb	r3, [r2, r3]
 8005184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40023800 	.word	0x40023800
 8005190:	080072f0 	.word	0x080072f0

08005194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005198:	f7ff ffdc 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 800519c:	4601      	mov	r1, r0
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	0b5b      	lsrs	r3, r3, #13
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	4a03      	ldr	r2, [pc, #12]	; (80051b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051aa:	5cd3      	ldrb	r3, [r2, r3]
 80051ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40023800 	.word	0x40023800
 80051b8:	080072f0 	.word	0x080072f0

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d6:	4b9f      	ldr	r3, [pc, #636]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
 80051de:	2b0c      	cmp	r3, #12
 80051e0:	f200 8130 	bhi.w	8005444 <HAL_RCC_GetSysClockFreq+0x288>
 80051e4:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <HAL_RCC_GetSysClockFreq+0x30>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005221 	.word	0x08005221
 80051f0:	08005445 	.word	0x08005445
 80051f4:	08005445 	.word	0x08005445
 80051f8:	08005445 	.word	0x08005445
 80051fc:	08005227 	.word	0x08005227
 8005200:	08005445 	.word	0x08005445
 8005204:	08005445 	.word	0x08005445
 8005208:	08005445 	.word	0x08005445
 800520c:	0800522d 	.word	0x0800522d
 8005210:	08005445 	.word	0x08005445
 8005214:	08005445 	.word	0x08005445
 8005218:	08005445 	.word	0x08005445
 800521c:	0800533b 	.word	0x0800533b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005220:	4b8d      	ldr	r3, [pc, #564]	; (8005458 <HAL_RCC_GetSysClockFreq+0x29c>)
 8005222:	613b      	str	r3, [r7, #16]
       break;
 8005224:	e111      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005226:	4b8d      	ldr	r3, [pc, #564]	; (800545c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005228:	613b      	str	r3, [r7, #16]
      break;
 800522a:	e10e      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800522c:	4b89      	ldr	r3, [pc, #548]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005234:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005236:	4b87      	ldr	r3, [pc, #540]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d023      	beq.n	800528a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005242:	4b84      	ldr	r3, [pc, #528]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	099b      	lsrs	r3, r3, #6
 8005248:	f04f 0400 	mov.w	r4, #0
 800524c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	ea03 0501 	and.w	r5, r3, r1
 8005258:	ea04 0602 	and.w	r6, r4, r2
 800525c:	4a7f      	ldr	r2, [pc, #508]	; (800545c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800525e:	fb02 f106 	mul.w	r1, r2, r6
 8005262:	2200      	movs	r2, #0
 8005264:	fb02 f205 	mul.w	r2, r2, r5
 8005268:	440a      	add	r2, r1
 800526a:	497c      	ldr	r1, [pc, #496]	; (800545c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800526c:	fba5 0101 	umull	r0, r1, r5, r1
 8005270:	1853      	adds	r3, r2, r1
 8005272:	4619      	mov	r1, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f04f 0400 	mov.w	r4, #0
 800527a:	461a      	mov	r2, r3
 800527c:	4623      	mov	r3, r4
 800527e:	f7fa ffc1 	bl	8000204 <__aeabi_uldivmod>
 8005282:	4603      	mov	r3, r0
 8005284:	460c      	mov	r4, r1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e049      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528a:	4b72      	ldr	r3, [pc, #456]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	099b      	lsrs	r3, r3, #6
 8005290:	f04f 0400 	mov.w	r4, #0
 8005294:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	ea03 0501 	and.w	r5, r3, r1
 80052a0:	ea04 0602 	and.w	r6, r4, r2
 80052a4:	4629      	mov	r1, r5
 80052a6:	4632      	mov	r2, r6
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	f04f 0400 	mov.w	r4, #0
 80052b0:	0154      	lsls	r4, r2, #5
 80052b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052b6:	014b      	lsls	r3, r1, #5
 80052b8:	4619      	mov	r1, r3
 80052ba:	4622      	mov	r2, r4
 80052bc:	1b49      	subs	r1, r1, r5
 80052be:	eb62 0206 	sbc.w	r2, r2, r6
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	f04f 0400 	mov.w	r4, #0
 80052ca:	0194      	lsls	r4, r2, #6
 80052cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052d0:	018b      	lsls	r3, r1, #6
 80052d2:	1a5b      	subs	r3, r3, r1
 80052d4:	eb64 0402 	sbc.w	r4, r4, r2
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	00e2      	lsls	r2, r4, #3
 80052e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052e6:	00d9      	lsls	r1, r3, #3
 80052e8:	460b      	mov	r3, r1
 80052ea:	4614      	mov	r4, r2
 80052ec:	195b      	adds	r3, r3, r5
 80052ee:	eb44 0406 	adc.w	r4, r4, r6
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	02a2      	lsls	r2, r4, #10
 80052fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005300:	0299      	lsls	r1, r3, #10
 8005302:	460b      	mov	r3, r1
 8005304:	4614      	mov	r4, r2
 8005306:	4618      	mov	r0, r3
 8005308:	4621      	mov	r1, r4
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f04f 0400 	mov.w	r4, #0
 8005310:	461a      	mov	r2, r3
 8005312:	4623      	mov	r3, r4
 8005314:	f7fa ff76 	bl	8000204 <__aeabi_uldivmod>
 8005318:	4603      	mov	r3, r0
 800531a:	460c      	mov	r4, r1
 800531c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800531e:	4b4d      	ldr	r3, [pc, #308]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	3301      	adds	r3, #1
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	fbb2 f3f3 	udiv	r3, r2, r3
 8005336:	613b      	str	r3, [r7, #16]
      break;
 8005338:	e087      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800533a:	4b46      	ldr	r3, [pc, #280]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005342:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005344:	4b43      	ldr	r3, [pc, #268]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d023      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005350:	4b40      	ldr	r3, [pc, #256]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	f04f 0400 	mov.w	r4, #0
 800535a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	ea03 0501 	and.w	r5, r3, r1
 8005366:	ea04 0602 	and.w	r6, r4, r2
 800536a:	4a3c      	ldr	r2, [pc, #240]	; (800545c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800536c:	fb02 f106 	mul.w	r1, r2, r6
 8005370:	2200      	movs	r2, #0
 8005372:	fb02 f205 	mul.w	r2, r2, r5
 8005376:	440a      	add	r2, r1
 8005378:	4938      	ldr	r1, [pc, #224]	; (800545c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800537a:	fba5 0101 	umull	r0, r1, r5, r1
 800537e:	1853      	adds	r3, r2, r1
 8005380:	4619      	mov	r1, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f04f 0400 	mov.w	r4, #0
 8005388:	461a      	mov	r2, r3
 800538a:	4623      	mov	r3, r4
 800538c:	f7fa ff3a 	bl	8000204 <__aeabi_uldivmod>
 8005390:	4603      	mov	r3, r0
 8005392:	460c      	mov	r4, r1
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e049      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005398:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	099b      	lsrs	r3, r3, #6
 800539e:	f04f 0400 	mov.w	r4, #0
 80053a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	ea03 0501 	and.w	r5, r3, r1
 80053ae:	ea04 0602 	and.w	r6, r4, r2
 80053b2:	4629      	mov	r1, r5
 80053b4:	4632      	mov	r2, r6
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	f04f 0400 	mov.w	r4, #0
 80053be:	0154      	lsls	r4, r2, #5
 80053c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053c4:	014b      	lsls	r3, r1, #5
 80053c6:	4619      	mov	r1, r3
 80053c8:	4622      	mov	r2, r4
 80053ca:	1b49      	subs	r1, r1, r5
 80053cc:	eb62 0206 	sbc.w	r2, r2, r6
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	0194      	lsls	r4, r2, #6
 80053da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053de:	018b      	lsls	r3, r1, #6
 80053e0:	1a5b      	subs	r3, r3, r1
 80053e2:	eb64 0402 	sbc.w	r4, r4, r2
 80053e6:	f04f 0100 	mov.w	r1, #0
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	00e2      	lsls	r2, r4, #3
 80053f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053f4:	00d9      	lsls	r1, r3, #3
 80053f6:	460b      	mov	r3, r1
 80053f8:	4614      	mov	r4, r2
 80053fa:	195b      	adds	r3, r3, r5
 80053fc:	eb44 0406 	adc.w	r4, r4, r6
 8005400:	f04f 0100 	mov.w	r1, #0
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	02a2      	lsls	r2, r4, #10
 800540a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800540e:	0299      	lsls	r1, r3, #10
 8005410:	460b      	mov	r3, r1
 8005412:	4614      	mov	r4, r2
 8005414:	4618      	mov	r0, r3
 8005416:	4621      	mov	r1, r4
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	461a      	mov	r2, r3
 8005420:	4623      	mov	r3, r4
 8005422:	f7fa feef 	bl	8000204 <__aeabi_uldivmod>
 8005426:	4603      	mov	r3, r0
 8005428:	460c      	mov	r4, r1
 800542a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_RCC_GetSysClockFreq+0x298>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	0f1b      	lsrs	r3, r3, #28
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	613b      	str	r3, [r7, #16]
      break;
 8005442:	e002      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <HAL_RCC_GetSysClockFreq+0x29c>)
 8005446:	613b      	str	r3, [r7, #16]
      break;
 8005448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800544a:	693b      	ldr	r3, [r7, #16]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005454:	40023800 	.word	0x40023800
 8005458:	00f42400 	.word	0x00f42400
 800545c:	017d7840 	.word	0x017d7840

08005460 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8083 	beq.w	8005580 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800547a:	4b95      	ldr	r3, [pc, #596]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b04      	cmp	r3, #4
 8005484:	d019      	beq.n	80054ba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005486:	4b92      	ldr	r3, [pc, #584]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800548e:	2b08      	cmp	r3, #8
 8005490:	d106      	bne.n	80054a0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005492:	4b8f      	ldr	r3, [pc, #572]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549e:	d00c      	beq.n	80054ba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a0:	4b8b      	ldr	r3, [pc, #556]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d112      	bne.n	80054d2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ac:	4b88      	ldr	r3, [pc, #544]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b8:	d10b      	bne.n	80054d2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ba:	4b85      	ldr	r3, [pc, #532]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d05b      	beq.n	800557e <HAL_RCC_OscConfig+0x11e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d157      	bne.n	800557e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e216      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054da:	d106      	bne.n	80054ea <HAL_RCC_OscConfig+0x8a>
 80054dc:	4b7c      	ldr	r3, [pc, #496]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a7b      	ldr	r2, [pc, #492]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80054e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	e01d      	b.n	8005526 <HAL_RCC_OscConfig+0xc6>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f2:	d10c      	bne.n	800550e <HAL_RCC_OscConfig+0xae>
 80054f4:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a75      	ldr	r2, [pc, #468]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80054fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b73      	ldr	r3, [pc, #460]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a72      	ldr	r2, [pc, #456]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	e00b      	b.n	8005526 <HAL_RCC_OscConfig+0xc6>
 800550e:	4b70      	ldr	r3, [pc, #448]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a6f      	ldr	r2, [pc, #444]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	4b6d      	ldr	r3, [pc, #436]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6c      	ldr	r2, [pc, #432]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005524:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d013      	beq.n	8005556 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552e:	f7fc fa83 	bl	8001a38 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005536:	f7fc fa7f 	bl	8001a38 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b64      	cmp	r3, #100	; 0x64
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e1db      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005548:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0xd6>
 8005554:	e014      	b.n	8005580 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fc fa6f 	bl	8001a38 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800555e:	f7fc fa6b 	bl	8001a38 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b64      	cmp	r3, #100	; 0x64
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e1c7      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005570:	4b57      	ldr	r3, [pc, #348]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f0      	bne.n	800555e <HAL_RCC_OscConfig+0xfe>
 800557c:	e000      	b.n	8005580 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d06f      	beq.n	800566c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800558c:	4b50      	ldr	r3, [pc, #320]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 030c 	and.w	r3, r3, #12
 8005594:	2b00      	cmp	r3, #0
 8005596:	d017      	beq.n	80055c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005598:	4b4d      	ldr	r3, [pc, #308]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d105      	bne.n	80055b0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055a4:	4b4a      	ldr	r3, [pc, #296]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00b      	beq.n	80055c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055b0:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055b8:	2b0c      	cmp	r3, #12
 80055ba:	d11c      	bne.n	80055f6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055bc:	4b44      	ldr	r3, [pc, #272]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d116      	bne.n	80055f6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c8:	4b41      	ldr	r3, [pc, #260]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_OscConfig+0x180>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d001      	beq.n	80055e0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e18f      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e0:	4b3b      	ldr	r3, [pc, #236]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4938      	ldr	r1, [pc, #224]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f4:	e03a      	b.n	800566c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d020      	beq.n	8005640 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fe:	4b35      	ldr	r3, [pc, #212]	; (80056d4 <HAL_RCC_OscConfig+0x274>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fc fa18 	bl	8001a38 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560c:	f7fc fa14 	bl	8001a38 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e170      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561e:	4b2c      	ldr	r3, [pc, #176]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562a:	4b29      	ldr	r3, [pc, #164]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4925      	ldr	r1, [pc, #148]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 800563a:	4313      	orrs	r3, r2
 800563c:	600b      	str	r3, [r1, #0]
 800563e:	e015      	b.n	800566c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005640:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <HAL_RCC_OscConfig+0x274>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fc f9f7 	bl	8001a38 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564e:	f7fc f9f3 	bl	8001a38 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e14f      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f0      	bne.n	800564e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d037      	beq.n	80056e8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d016      	beq.n	80056ae <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005680:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <HAL_RCC_OscConfig+0x278>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005686:	f7fc f9d7 	bl	8001a38 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568e:	f7fc f9d3 	bl	8001a38 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e12f      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80056a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x22e>
 80056ac:	e01c      	b.n	80056e8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <HAL_RCC_OscConfig+0x278>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fc f9c0 	bl	8001a38 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ba:	e00f      	b.n	80056dc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056bc:	f7fc f9bc 	bl	8001a38 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d908      	bls.n	80056dc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e118      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	42470000 	.word	0x42470000
 80056d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056dc:	4b8a      	ldr	r3, [pc, #552]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 80056de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e9      	bne.n	80056bc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8097 	beq.w	8005824 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056fa:	4b83      	ldr	r3, [pc, #524]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10f      	bne.n	8005726 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	4b7f      	ldr	r3, [pc, #508]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	4a7e      	ldr	r2, [pc, #504]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	6413      	str	r3, [r2, #64]	; 0x40
 8005716:	4b7c      	ldr	r3, [pc, #496]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005726:	4b79      	ldr	r3, [pc, #484]	; (800590c <HAL_RCC_OscConfig+0x4ac>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d118      	bne.n	8005764 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005732:	4b76      	ldr	r3, [pc, #472]	; (800590c <HAL_RCC_OscConfig+0x4ac>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a75      	ldr	r2, [pc, #468]	; (800590c <HAL_RCC_OscConfig+0x4ac>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573e:	f7fc f97b 	bl	8001a38 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005746:	f7fc f977 	bl	8001a38 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e0d3      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005758:	4b6c      	ldr	r3, [pc, #432]	; (800590c <HAL_RCC_OscConfig+0x4ac>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d106      	bne.n	800577a <HAL_RCC_OscConfig+0x31a>
 800576c:	4b66      	ldr	r3, [pc, #408]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	4a65      	ldr	r2, [pc, #404]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6713      	str	r3, [r2, #112]	; 0x70
 8005778:	e01c      	b.n	80057b4 <HAL_RCC_OscConfig+0x354>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b05      	cmp	r3, #5
 8005780:	d10c      	bne.n	800579c <HAL_RCC_OscConfig+0x33c>
 8005782:	4b61      	ldr	r3, [pc, #388]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	4a60      	ldr	r2, [pc, #384]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	6713      	str	r3, [r2, #112]	; 0x70
 800578e:	4b5e      	ldr	r3, [pc, #376]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	4a5d      	ldr	r2, [pc, #372]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	6713      	str	r3, [r2, #112]	; 0x70
 800579a:	e00b      	b.n	80057b4 <HAL_RCC_OscConfig+0x354>
 800579c:	4b5a      	ldr	r3, [pc, #360]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	4a59      	ldr	r2, [pc, #356]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	6713      	str	r3, [r2, #112]	; 0x70
 80057a8:	4b57      	ldr	r3, [pc, #348]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ac:	4a56      	ldr	r2, [pc, #344]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d015      	beq.n	80057e8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fc f93c 	bl	8001a38 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c2:	e00a      	b.n	80057da <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c4:	f7fc f938 	bl	8001a38 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e092      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057da:	4b4b      	ldr	r3, [pc, #300]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0ee      	beq.n	80057c4 <HAL_RCC_OscConfig+0x364>
 80057e6:	e014      	b.n	8005812 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fc f926 	bl	8001a38 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ee:	e00a      	b.n	8005806 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057f0:	f7fc f922 	bl	8001a38 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e07c      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005806:	4b40      	ldr	r3, [pc, #256]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1ee      	bne.n	80057f0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d105      	bne.n	8005824 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005818:	4b3b      	ldr	r3, [pc, #236]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	4a3a      	ldr	r2, [pc, #232]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d068      	beq.n	80058fe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582c:	4b36      	ldr	r3, [pc, #216]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 030c 	and.w	r3, r3, #12
 8005834:	2b08      	cmp	r3, #8
 8005836:	d060      	beq.n	80058fa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d145      	bne.n	80058cc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005840:	4b33      	ldr	r3, [pc, #204]	; (8005910 <HAL_RCC_OscConfig+0x4b0>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fc f8f7 	bl	8001a38 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584e:	f7fc f8f3 	bl	8001a38 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e04f      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005860:	4b29      	ldr	r3, [pc, #164]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	019b      	lsls	r3, r3, #6
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	3b01      	subs	r3, #1
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	061b      	lsls	r3, r3, #24
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	071b      	lsls	r3, r3, #28
 8005898:	491b      	ldr	r1, [pc, #108]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800589e:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <HAL_RCC_OscConfig+0x4b0>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fc f8c8 	bl	8001a38 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fc f8c4 	bl	8001a38 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e020      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0x44c>
 80058ca:	e018      	b.n	80058fe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <HAL_RCC_OscConfig+0x4b0>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d2:	f7fc f8b1 	bl	8001a38 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058da:	f7fc f8ad 	bl	8001a38 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e009      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <HAL_RCC_OscConfig+0x4a8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1f0      	bne.n	80058da <HAL_RCC_OscConfig+0x47a>
 80058f8:	e001      	b.n	80058fe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	40007000 	.word	0x40007000
 8005910:	42470060 	.word	0x42470060

08005914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e01d      	b.n	8005962 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fb fe70 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f000 fb72 	bl	800603c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b06      	cmp	r3, #6
 800598a:	d007      	beq.n	800599c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d007      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e01d      	b.n	8005a48 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f815 	bl	8005a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f000 faff 	bl	800603c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2201      	movs	r2, #1
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fdca 	bl	8006610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <HAL_TIM_PWM_Start+0x74>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x2c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a14      	ldr	r2, [pc, #80]	; (8005adc <HAL_TIM_PWM_Start+0x78>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x30>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <HAL_TIM_PWM_Start+0x32>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d007      	beq.n	8005acc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40010400 	.word	0x40010400

08005ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d122      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d11b      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0202 	mvn.w	r2, #2
 8005b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa6b 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005b28:	e005      	b.n	8005b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa5d 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fa6e 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d122      	bne.n	8005b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d11b      	bne.n	8005b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0204 	mvn.w	r2, #4
 8005b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fa41 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005b7c:	e005      	b.n	8005b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa33 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fa44 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d122      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d11b      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0208 	mvn.w	r2, #8
 8005bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa17 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005bd0:	e005      	b.n	8005bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fa09 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fa1a 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d122      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d11b      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0210 	mvn.w	r2, #16
 8005c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9ed 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005c24:	e005      	b.n	8005c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9df 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9f0 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d10e      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d107      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0201 	mvn.w	r2, #1
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fb fb62 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d10e      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d107      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fd6c 	bl	8006768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d10e      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d107      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f9b5 	bl	8006026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d107      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0220 	mvn.w	r2, #32
 8005ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fd36 	bl	8006754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e0b4      	b.n	8005e74 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	f200 809f 	bhi.w	8005e60 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005d22:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d5d 	.word	0x08005d5d
 8005d2c:	08005e61 	.word	0x08005e61
 8005d30:	08005e61 	.word	0x08005e61
 8005d34:	08005e61 	.word	0x08005e61
 8005d38:	08005d9d 	.word	0x08005d9d
 8005d3c:	08005e61 	.word	0x08005e61
 8005d40:	08005e61 	.word	0x08005e61
 8005d44:	08005e61 	.word	0x08005e61
 8005d48:	08005ddf 	.word	0x08005ddf
 8005d4c:	08005e61 	.word	0x08005e61
 8005d50:	08005e61 	.word	0x08005e61
 8005d54:	08005e61 	.word	0x08005e61
 8005d58:	08005e1f 	.word	0x08005e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fa0a 	bl	800617c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0208 	orr.w	r2, r2, #8
 8005d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0204 	bic.w	r2, r2, #4
 8005d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6999      	ldr	r1, [r3, #24]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	619a      	str	r2, [r3, #24]
      break;
 8005d9a:	e062      	b.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fa5a 	bl	800625c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6999      	ldr	r1, [r3, #24]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	021a      	lsls	r2, r3, #8
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	619a      	str	r2, [r3, #24]
      break;
 8005ddc:	e041      	b.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 faaf 	bl	8006348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0208 	orr.w	r2, r2, #8
 8005df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0204 	bic.w	r2, r2, #4
 8005e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69d9      	ldr	r1, [r3, #28]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	61da      	str	r2, [r3, #28]
      break;
 8005e1c:	e021      	b.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fb03 	bl	8006430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69d9      	ldr	r1, [r3, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	021a      	lsls	r2, r3, #8
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	61da      	str	r2, [r3, #28]
      break;
 8005e5e:	e000      	b.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005e60:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIM_ConfigClockSource+0x18>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e0a6      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x166>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d067      	beq.n	8005f9c <HAL_TIM_ConfigClockSource+0x120>
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d80b      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x6c>
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d073      	beq.n	8005fbc <HAL_TIM_ConfigClockSource+0x140>
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d802      	bhi.n	8005ede <HAL_TIM_ConfigClockSource+0x62>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d06f      	beq.n	8005fbc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005edc:	e078      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d06c      	beq.n	8005fbc <HAL_TIM_ConfigClockSource+0x140>
 8005ee2:	2b30      	cmp	r3, #48	; 0x30
 8005ee4:	d06a      	beq.n	8005fbc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005ee6:	e073      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ee8:	2b70      	cmp	r3, #112	; 0x70
 8005eea:	d00d      	beq.n	8005f08 <HAL_TIM_ConfigClockSource+0x8c>
 8005eec:	2b70      	cmp	r3, #112	; 0x70
 8005eee:	d804      	bhi.n	8005efa <HAL_TIM_ConfigClockSource+0x7e>
 8005ef0:	2b50      	cmp	r3, #80	; 0x50
 8005ef2:	d033      	beq.n	8005f5c <HAL_TIM_ConfigClockSource+0xe0>
 8005ef4:	2b60      	cmp	r3, #96	; 0x60
 8005ef6:	d041      	beq.n	8005f7c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005ef8:	e06a      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efe:	d066      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0x152>
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f04:	d017      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f06:	e063      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6899      	ldr	r1, [r3, #8]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f000 fb5a 	bl	80065d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f2a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	609a      	str	r2, [r3, #8]
      break;
 8005f34:	e04c      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6899      	ldr	r1, [r3, #8]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f000 fb43 	bl	80065d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f58:	609a      	str	r2, [r3, #8]
      break;
 8005f5a:	e039      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	6859      	ldr	r1, [r3, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f000 fab7 	bl	80064dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2150      	movs	r1, #80	; 0x50
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fb10 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 8005f7a:	e029      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	6859      	ldr	r1, [r3, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f000 fad6 	bl	800653a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2160      	movs	r1, #96	; 0x60
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fb00 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 8005f9a:	e019      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f000 fa97 	bl	80064dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2140      	movs	r1, #64	; 0x40
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 faf0 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 8005fba:	e009      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f000 fae7 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 8005fcc:	e000      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a40      	ldr	r2, [pc, #256]	; (8006150 <TIM_Base_SetConfig+0x114>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605a:	d00f      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a3d      	ldr	r2, [pc, #244]	; (8006154 <TIM_Base_SetConfig+0x118>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a3c      	ldr	r2, [pc, #240]	; (8006158 <TIM_Base_SetConfig+0x11c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a3b      	ldr	r2, [pc, #236]	; (800615c <TIM_Base_SetConfig+0x120>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a3a      	ldr	r2, [pc, #232]	; (8006160 <TIM_Base_SetConfig+0x124>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d108      	bne.n	800608e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2f      	ldr	r2, [pc, #188]	; (8006150 <TIM_Base_SetConfig+0x114>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d02b      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609c:	d027      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2c      	ldr	r2, [pc, #176]	; (8006154 <TIM_Base_SetConfig+0x118>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d023      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a2b      	ldr	r2, [pc, #172]	; (8006158 <TIM_Base_SetConfig+0x11c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01f      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2a      	ldr	r2, [pc, #168]	; (800615c <TIM_Base_SetConfig+0x120>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01b      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a29      	ldr	r2, [pc, #164]	; (8006160 <TIM_Base_SetConfig+0x124>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d017      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a28      	ldr	r2, [pc, #160]	; (8006164 <TIM_Base_SetConfig+0x128>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a27      	ldr	r2, [pc, #156]	; (8006168 <TIM_Base_SetConfig+0x12c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00f      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a26      	ldr	r2, [pc, #152]	; (800616c <TIM_Base_SetConfig+0x130>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a25      	ldr	r2, [pc, #148]	; (8006170 <TIM_Base_SetConfig+0x134>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a24      	ldr	r2, [pc, #144]	; (8006174 <TIM_Base_SetConfig+0x138>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a23      	ldr	r2, [pc, #140]	; (8006178 <TIM_Base_SetConfig+0x13c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d108      	bne.n	8006100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <TIM_Base_SetConfig+0x114>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_Base_SetConfig+0xf8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <TIM_Base_SetConfig+0x124>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d103      	bne.n	800613c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	615a      	str	r2, [r3, #20]
}
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40010400 	.word	0x40010400
 8006164:	40014000 	.word	0x40014000
 8006168:	40014400 	.word	0x40014400
 800616c:	40014800 	.word	0x40014800
 8006170:	40001800 	.word	0x40001800
 8006174:	40001c00 	.word	0x40001c00
 8006178:	40002000 	.word	0x40002000

0800617c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f023 0201 	bic.w	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f023 0302 	bic.w	r3, r3, #2
 80061c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a20      	ldr	r2, [pc, #128]	; (8006254 <TIM_OC1_SetConfig+0xd8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_OC1_SetConfig+0x64>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a1f      	ldr	r2, [pc, #124]	; (8006258 <TIM_OC1_SetConfig+0xdc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10c      	bne.n	80061fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0308 	bic.w	r3, r3, #8
 80061e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a15      	ldr	r2, [pc, #84]	; (8006254 <TIM_OC1_SetConfig+0xd8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_OC1_SetConfig+0x8e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a14      	ldr	r2, [pc, #80]	; (8006258 <TIM_OC1_SetConfig+0xdc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d111      	bne.n	800622e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	621a      	str	r2, [r3, #32]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40010000 	.word	0x40010000
 8006258:	40010400 	.word	0x40010400

0800625c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f023 0210 	bic.w	r2, r3, #16
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f023 0320 	bic.w	r3, r3, #32
 80062a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a22      	ldr	r2, [pc, #136]	; (8006340 <TIM_OC2_SetConfig+0xe4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_OC2_SetConfig+0x68>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a21      	ldr	r2, [pc, #132]	; (8006344 <TIM_OC2_SetConfig+0xe8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d10d      	bne.n	80062e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a17      	ldr	r2, [pc, #92]	; (8006340 <TIM_OC2_SetConfig+0xe4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_OC2_SetConfig+0x94>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a16      	ldr	r2, [pc, #88]	; (8006344 <TIM_OC2_SetConfig+0xe8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d113      	bne.n	8006318 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40010400 	.word	0x40010400

08006348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0303 	bic.w	r3, r3, #3
 800637e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a21      	ldr	r2, [pc, #132]	; (8006428 <TIM_OC3_SetConfig+0xe0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d003      	beq.n	80063ae <TIM_OC3_SetConfig+0x66>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a20      	ldr	r2, [pc, #128]	; (800642c <TIM_OC3_SetConfig+0xe4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d10d      	bne.n	80063ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a16      	ldr	r2, [pc, #88]	; (8006428 <TIM_OC3_SetConfig+0xe0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_OC3_SetConfig+0x92>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a15      	ldr	r2, [pc, #84]	; (800642c <TIM_OC3_SetConfig+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d113      	bne.n	8006402 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	621a      	str	r2, [r3, #32]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40010000 	.word	0x40010000
 800642c:	40010400 	.word	0x40010400

08006430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800647a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	031b      	lsls	r3, r3, #12
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a12      	ldr	r2, [pc, #72]	; (80064d4 <TIM_OC4_SetConfig+0xa4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_OC4_SetConfig+0x68>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a11      	ldr	r2, [pc, #68]	; (80064d8 <TIM_OC4_SetConfig+0xa8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d109      	bne.n	80064ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800649e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	019b      	lsls	r3, r3, #6
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	621a      	str	r2, [r3, #32]
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40010400 	.word	0x40010400

080064dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 030a 	bic.w	r3, r3, #10
 8006518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800653a:	b480      	push	{r7}
 800653c:	b087      	sub	sp, #28
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	f023 0210 	bic.w	r2, r3, #16
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	031b      	lsls	r3, r3, #12
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006576:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f043 0307 	orr.w	r3, r3, #7
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	609a      	str	r2, [r3, #8]
}
 80065c4:	bf00      	nop
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	609a      	str	r2, [r3, #8]
}
 8006604:	bf00      	nop
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	2201      	movs	r2, #1
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a1a      	ldr	r2, [r3, #32]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	43db      	mvns	r3, r3
 8006632:	401a      	ands	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1a      	ldr	r2, [r3, #32]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 031f 	and.w	r3, r3, #31
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	fa01 f303 	lsl.w	r3, r1, r3
 8006648:	431a      	orrs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006670:	2302      	movs	r3, #2
 8006672:	e05a      	b.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a21      	ldr	r2, [pc, #132]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d022      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c0:	d01d      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a1d      	ldr	r2, [pc, #116]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d018      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00e      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a18      	ldr	r2, [pc, #96]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d009      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a17      	ldr	r2, [pc, #92]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d004      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a15      	ldr	r2, [pc, #84]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d10c      	bne.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	4313      	orrs	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40010000 	.word	0x40010000
 800673c:	40000400 	.word	0x40000400
 8006740:	40000800 	.word	0x40000800
 8006744:	40000c00 	.word	0x40000c00
 8006748:	40010400 	.word	0x40010400
 800674c:	40014000 	.word	0x40014000
 8006750:	40001800 	.word	0x40001800

08006754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e03f      	b.n	800680e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fa ffb4 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2224      	movs	r2, #36	; 0x24
 80067ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f9d9 	bl	8006b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b20      	cmp	r3, #32
 8006830:	d166      	bne.n	8006900 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_UART_Receive_DMA+0x26>
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e05f      	b.n	8006902 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_UART_Receive_DMA+0x38>
 800684c:	2302      	movs	r3, #2
 800684e:	e058      	b.n	8006902 <HAL_UART_Receive_DMA+0xea>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	88fa      	ldrh	r2, [r7, #6]
 8006862:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2222      	movs	r2, #34	; 0x22
 800686e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006876:	4a25      	ldr	r2, [pc, #148]	; (800690c <HAL_UART_Receive_DMA+0xf4>)
 8006878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687e:	4a24      	ldr	r2, [pc, #144]	; (8006910 <HAL_UART_Receive_DMA+0xf8>)
 8006880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006886:	4a23      	ldr	r2, [pc, #140]	; (8006914 <HAL_UART_Receive_DMA+0xfc>)
 8006888:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688e:	2200      	movs	r2, #0
 8006890:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	f7fb fab3 	bl	8001e14 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695a      	ldr	r2, [r3, #20]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068fa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	e000      	b.n	8006902 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006900:	2302      	movs	r3, #2
  }
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	080069f7 	.word	0x080069f7
 8006910:	08006a5f 	.word	0x08006a5f
 8006914:	08006a7b 	.word	0x08006a7b

08006918 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692e:	2b80      	cmp	r3, #128	; 0x80
 8006930:	bf0c      	ite	eq
 8006932:	2301      	moveq	r3, #1
 8006934:	2300      	movne	r3, #0
 8006936:	b2db      	uxtb	r3, r3
 8006938:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b21      	cmp	r3, #33	; 0x21
 8006944:	d116      	bne.n	8006974 <HAL_UART_DMAStop+0x5c>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d013      	beq.n	8006974 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800695a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	2b00      	cmp	r3, #0
 8006962:	d004      	beq.n	800696e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	4618      	mov	r0, r3
 800696a:	f7fb faab 	bl	8001ec4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f8cd 	bl	8006b0e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	bf0c      	ite	eq
 8006982:	2301      	moveq	r3, #1
 8006984:	2300      	movne	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b22      	cmp	r3, #34	; 0x22
 8006994:	d116      	bne.n	80069c4 <HAL_UART_DMAStop+0xac>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d013      	beq.n	80069c4 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069aa:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fb fa83 	bl	8001ec4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8bb 	bl	8006b3a <UART_EndRxTransfer>
  }

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a02:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d11e      	bne.n	8006a50 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a26:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a46:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7fa fc97 	bl	8001384 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff ffae 	bl	80069ce <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	bf0c      	ite	eq
 8006a9a:	2301      	moveq	r3, #1
 8006a9c:	2300      	movne	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b21      	cmp	r3, #33	; 0x21
 8006aac:	d108      	bne.n	8006ac0 <UART_DMAError+0x46>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006aba:	68b8      	ldr	r0, [r7, #8]
 8006abc:	f000 f827 	bl	8006b0e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	bf0c      	ite	eq
 8006ace:	2301      	moveq	r3, #1
 8006ad0:	2300      	movne	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b22      	cmp	r3, #34	; 0x22
 8006ae0:	d108      	bne.n	8006af4 <UART_DMAError+0x7a>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2200      	movs	r2, #0
 8006aec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006aee:	68b8      	ldr	r0, [r7, #8]
 8006af0:	f000 f823 	bl	8006b3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	f043 0210 	orr.w	r2, r3, #16
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b00:	68b8      	ldr	r0, [r7, #8]
 8006b02:	f7ff ff6e 	bl	80069e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b06:	bf00      	nop
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b24:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b50:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bba:	f023 030c 	bic.w	r3, r3, #12
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be6:	f040 818b 	bne.w	8006f00 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4ac1      	ldr	r2, [pc, #772]	; (8006ef4 <UART_SetConfig+0x37c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d005      	beq.n	8006c00 <UART_SetConfig+0x88>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4abf      	ldr	r2, [pc, #764]	; (8006ef8 <UART_SetConfig+0x380>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	f040 80bd 	bne.w	8006d7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c00:	f7fe fac8 	bl	8005194 <HAL_RCC_GetPCLK2Freq>
 8006c04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	461d      	mov	r5, r3
 8006c0a:	f04f 0600 	mov.w	r6, #0
 8006c0e:	46a8      	mov	r8, r5
 8006c10:	46b1      	mov	r9, r6
 8006c12:	eb18 0308 	adds.w	r3, r8, r8
 8006c16:	eb49 0409 	adc.w	r4, r9, r9
 8006c1a:	4698      	mov	r8, r3
 8006c1c:	46a1      	mov	r9, r4
 8006c1e:	eb18 0805 	adds.w	r8, r8, r5
 8006c22:	eb49 0906 	adc.w	r9, r9, r6
 8006c26:	f04f 0100 	mov.w	r1, #0
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c3a:	4688      	mov	r8, r1
 8006c3c:	4691      	mov	r9, r2
 8006c3e:	eb18 0005 	adds.w	r0, r8, r5
 8006c42:	eb49 0106 	adc.w	r1, r9, r6
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	f04f 0600 	mov.w	r6, #0
 8006c50:	196b      	adds	r3, r5, r5
 8006c52:	eb46 0406 	adc.w	r4, r6, r6
 8006c56:	461a      	mov	r2, r3
 8006c58:	4623      	mov	r3, r4
 8006c5a:	f7f9 fad3 	bl	8000204 <__aeabi_uldivmod>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	460c      	mov	r4, r1
 8006c62:	461a      	mov	r2, r3
 8006c64:	4ba5      	ldr	r3, [pc, #660]	; (8006efc <UART_SetConfig+0x384>)
 8006c66:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	461d      	mov	r5, r3
 8006c74:	f04f 0600 	mov.w	r6, #0
 8006c78:	46a9      	mov	r9, r5
 8006c7a:	46b2      	mov	sl, r6
 8006c7c:	eb19 0309 	adds.w	r3, r9, r9
 8006c80:	eb4a 040a 	adc.w	r4, sl, sl
 8006c84:	4699      	mov	r9, r3
 8006c86:	46a2      	mov	sl, r4
 8006c88:	eb19 0905 	adds.w	r9, r9, r5
 8006c8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c90:	f04f 0100 	mov.w	r1, #0
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ca0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ca4:	4689      	mov	r9, r1
 8006ca6:	4692      	mov	sl, r2
 8006ca8:	eb19 0005 	adds.w	r0, r9, r5
 8006cac:	eb4a 0106 	adc.w	r1, sl, r6
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	461d      	mov	r5, r3
 8006cb6:	f04f 0600 	mov.w	r6, #0
 8006cba:	196b      	adds	r3, r5, r5
 8006cbc:	eb46 0406 	adc.w	r4, r6, r6
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	f7f9 fa9e 	bl	8000204 <__aeabi_uldivmod>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4b8b      	ldr	r3, [pc, #556]	; (8006efc <UART_SetConfig+0x384>)
 8006cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	2164      	movs	r1, #100	; 0x64
 8006cd8:	fb01 f303 	mul.w	r3, r1, r3
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	3332      	adds	r3, #50	; 0x32
 8006ce2:	4a86      	ldr	r2, [pc, #536]	; (8006efc <UART_SetConfig+0x384>)
 8006ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cf0:	4498      	add	r8, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	461d      	mov	r5, r3
 8006cf6:	f04f 0600 	mov.w	r6, #0
 8006cfa:	46a9      	mov	r9, r5
 8006cfc:	46b2      	mov	sl, r6
 8006cfe:	eb19 0309 	adds.w	r3, r9, r9
 8006d02:	eb4a 040a 	adc.w	r4, sl, sl
 8006d06:	4699      	mov	r9, r3
 8006d08:	46a2      	mov	sl, r4
 8006d0a:	eb19 0905 	adds.w	r9, r9, r5
 8006d0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d12:	f04f 0100 	mov.w	r1, #0
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d26:	4689      	mov	r9, r1
 8006d28:	4692      	mov	sl, r2
 8006d2a:	eb19 0005 	adds.w	r0, r9, r5
 8006d2e:	eb4a 0106 	adc.w	r1, sl, r6
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	461d      	mov	r5, r3
 8006d38:	f04f 0600 	mov.w	r6, #0
 8006d3c:	196b      	adds	r3, r5, r5
 8006d3e:	eb46 0406 	adc.w	r4, r6, r6
 8006d42:	461a      	mov	r2, r3
 8006d44:	4623      	mov	r3, r4
 8006d46:	f7f9 fa5d 	bl	8000204 <__aeabi_uldivmod>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	461a      	mov	r2, r3
 8006d50:	4b6a      	ldr	r3, [pc, #424]	; (8006efc <UART_SetConfig+0x384>)
 8006d52:	fba3 1302 	umull	r1, r3, r3, r2
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	2164      	movs	r1, #100	; 0x64
 8006d5a:	fb01 f303 	mul.w	r3, r1, r3
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	3332      	adds	r3, #50	; 0x32
 8006d64:	4a65      	ldr	r2, [pc, #404]	; (8006efc <UART_SetConfig+0x384>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	f003 0207 	and.w	r2, r3, #7
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4442      	add	r2, r8
 8006d76:	609a      	str	r2, [r3, #8]
 8006d78:	e26f      	b.n	800725a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d7a:	f7fe f9f7 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 8006d7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	461d      	mov	r5, r3
 8006d84:	f04f 0600 	mov.w	r6, #0
 8006d88:	46a8      	mov	r8, r5
 8006d8a:	46b1      	mov	r9, r6
 8006d8c:	eb18 0308 	adds.w	r3, r8, r8
 8006d90:	eb49 0409 	adc.w	r4, r9, r9
 8006d94:	4698      	mov	r8, r3
 8006d96:	46a1      	mov	r9, r4
 8006d98:	eb18 0805 	adds.w	r8, r8, r5
 8006d9c:	eb49 0906 	adc.w	r9, r9, r6
 8006da0:	f04f 0100 	mov.w	r1, #0
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006dac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006db0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006db4:	4688      	mov	r8, r1
 8006db6:	4691      	mov	r9, r2
 8006db8:	eb18 0005 	adds.w	r0, r8, r5
 8006dbc:	eb49 0106 	adc.w	r1, r9, r6
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	461d      	mov	r5, r3
 8006dc6:	f04f 0600 	mov.w	r6, #0
 8006dca:	196b      	adds	r3, r5, r5
 8006dcc:	eb46 0406 	adc.w	r4, r6, r6
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	f7f9 fa16 	bl	8000204 <__aeabi_uldivmod>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4b47      	ldr	r3, [pc, #284]	; (8006efc <UART_SetConfig+0x384>)
 8006de0:	fba3 2302 	umull	r2, r3, r3, r2
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	461d      	mov	r5, r3
 8006dee:	f04f 0600 	mov.w	r6, #0
 8006df2:	46a9      	mov	r9, r5
 8006df4:	46b2      	mov	sl, r6
 8006df6:	eb19 0309 	adds.w	r3, r9, r9
 8006dfa:	eb4a 040a 	adc.w	r4, sl, sl
 8006dfe:	4699      	mov	r9, r3
 8006e00:	46a2      	mov	sl, r4
 8006e02:	eb19 0905 	adds.w	r9, r9, r5
 8006e06:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e0a:	f04f 0100 	mov.w	r1, #0
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e1e:	4689      	mov	r9, r1
 8006e20:	4692      	mov	sl, r2
 8006e22:	eb19 0005 	adds.w	r0, r9, r5
 8006e26:	eb4a 0106 	adc.w	r1, sl, r6
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	461d      	mov	r5, r3
 8006e30:	f04f 0600 	mov.w	r6, #0
 8006e34:	196b      	adds	r3, r5, r5
 8006e36:	eb46 0406 	adc.w	r4, r6, r6
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	f7f9 f9e1 	bl	8000204 <__aeabi_uldivmod>
 8006e42:	4603      	mov	r3, r0
 8006e44:	460c      	mov	r4, r1
 8006e46:	461a      	mov	r2, r3
 8006e48:	4b2c      	ldr	r3, [pc, #176]	; (8006efc <UART_SetConfig+0x384>)
 8006e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	2164      	movs	r1, #100	; 0x64
 8006e52:	fb01 f303 	mul.w	r3, r1, r3
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	3332      	adds	r3, #50	; 0x32
 8006e5c:	4a27      	ldr	r2, [pc, #156]	; (8006efc <UART_SetConfig+0x384>)
 8006e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e6a:	4498      	add	r8, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	461d      	mov	r5, r3
 8006e70:	f04f 0600 	mov.w	r6, #0
 8006e74:	46a9      	mov	r9, r5
 8006e76:	46b2      	mov	sl, r6
 8006e78:	eb19 0309 	adds.w	r3, r9, r9
 8006e7c:	eb4a 040a 	adc.w	r4, sl, sl
 8006e80:	4699      	mov	r9, r3
 8006e82:	46a2      	mov	sl, r4
 8006e84:	eb19 0905 	adds.w	r9, r9, r5
 8006e88:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e8c:	f04f 0100 	mov.w	r1, #0
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ea0:	4689      	mov	r9, r1
 8006ea2:	4692      	mov	sl, r2
 8006ea4:	eb19 0005 	adds.w	r0, r9, r5
 8006ea8:	eb4a 0106 	adc.w	r1, sl, r6
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	461d      	mov	r5, r3
 8006eb2:	f04f 0600 	mov.w	r6, #0
 8006eb6:	196b      	adds	r3, r5, r5
 8006eb8:	eb46 0406 	adc.w	r4, r6, r6
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	f7f9 f9a0 	bl	8000204 <__aeabi_uldivmod>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <UART_SetConfig+0x384>)
 8006ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	2164      	movs	r1, #100	; 0x64
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	3332      	adds	r3, #50	; 0x32
 8006ede:	4a07      	ldr	r2, [pc, #28]	; (8006efc <UART_SetConfig+0x384>)
 8006ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	f003 0207 	and.w	r2, r3, #7
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4442      	add	r2, r8
 8006ef0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006ef2:	e1b2      	b.n	800725a <UART_SetConfig+0x6e2>
 8006ef4:	40011000 	.word	0x40011000
 8006ef8:	40011400 	.word	0x40011400
 8006efc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4ad7      	ldr	r2, [pc, #860]	; (8007264 <UART_SetConfig+0x6ec>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d005      	beq.n	8006f16 <UART_SetConfig+0x39e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4ad6      	ldr	r2, [pc, #856]	; (8007268 <UART_SetConfig+0x6f0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	f040 80d1 	bne.w	80070b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f16:	f7fe f93d 	bl	8005194 <HAL_RCC_GetPCLK2Freq>
 8006f1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	469a      	mov	sl, r3
 8006f20:	f04f 0b00 	mov.w	fp, #0
 8006f24:	46d0      	mov	r8, sl
 8006f26:	46d9      	mov	r9, fp
 8006f28:	eb18 0308 	adds.w	r3, r8, r8
 8006f2c:	eb49 0409 	adc.w	r4, r9, r9
 8006f30:	4698      	mov	r8, r3
 8006f32:	46a1      	mov	r9, r4
 8006f34:	eb18 080a 	adds.w	r8, r8, sl
 8006f38:	eb49 090b 	adc.w	r9, r9, fp
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f50:	4688      	mov	r8, r1
 8006f52:	4691      	mov	r9, r2
 8006f54:	eb1a 0508 	adds.w	r5, sl, r8
 8006f58:	eb4b 0609 	adc.w	r6, fp, r9
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4619      	mov	r1, r3
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	f04f 0400 	mov.w	r4, #0
 8006f6e:	0094      	lsls	r4, r2, #2
 8006f70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f74:	008b      	lsls	r3, r1, #2
 8006f76:	461a      	mov	r2, r3
 8006f78:	4623      	mov	r3, r4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	f7f9 f941 	bl	8000204 <__aeabi_uldivmod>
 8006f82:	4603      	mov	r3, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	461a      	mov	r2, r3
 8006f88:	4bb8      	ldr	r3, [pc, #736]	; (800726c <UART_SetConfig+0x6f4>)
 8006f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f8e:	095b      	lsrs	r3, r3, #5
 8006f90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	469b      	mov	fp, r3
 8006f98:	f04f 0c00 	mov.w	ip, #0
 8006f9c:	46d9      	mov	r9, fp
 8006f9e:	46e2      	mov	sl, ip
 8006fa0:	eb19 0309 	adds.w	r3, r9, r9
 8006fa4:	eb4a 040a 	adc.w	r4, sl, sl
 8006fa8:	4699      	mov	r9, r3
 8006faa:	46a2      	mov	sl, r4
 8006fac:	eb19 090b 	adds.w	r9, r9, fp
 8006fb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fc8:	4689      	mov	r9, r1
 8006fca:	4692      	mov	sl, r2
 8006fcc:	eb1b 0509 	adds.w	r5, fp, r9
 8006fd0:	eb4c 060a 	adc.w	r6, ip, sl
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	f04f 0400 	mov.w	r4, #0
 8006fe6:	0094      	lsls	r4, r2, #2
 8006fe8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fec:	008b      	lsls	r3, r1, #2
 8006fee:	461a      	mov	r2, r3
 8006ff0:	4623      	mov	r3, r4
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	f7f9 f905 	bl	8000204 <__aeabi_uldivmod>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	461a      	mov	r2, r3
 8007000:	4b9a      	ldr	r3, [pc, #616]	; (800726c <UART_SetConfig+0x6f4>)
 8007002:	fba3 1302 	umull	r1, r3, r3, r2
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	2164      	movs	r1, #100	; 0x64
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	3332      	adds	r3, #50	; 0x32
 8007014:	4a95      	ldr	r2, [pc, #596]	; (800726c <UART_SetConfig+0x6f4>)
 8007016:	fba2 2303 	umull	r2, r3, r2, r3
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007020:	4498      	add	r8, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	469b      	mov	fp, r3
 8007026:	f04f 0c00 	mov.w	ip, #0
 800702a:	46d9      	mov	r9, fp
 800702c:	46e2      	mov	sl, ip
 800702e:	eb19 0309 	adds.w	r3, r9, r9
 8007032:	eb4a 040a 	adc.w	r4, sl, sl
 8007036:	4699      	mov	r9, r3
 8007038:	46a2      	mov	sl, r4
 800703a:	eb19 090b 	adds.w	r9, r9, fp
 800703e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007042:	f04f 0100 	mov.w	r1, #0
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800704e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007056:	4689      	mov	r9, r1
 8007058:	4692      	mov	sl, r2
 800705a:	eb1b 0509 	adds.w	r5, fp, r9
 800705e:	eb4c 060a 	adc.w	r6, ip, sl
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	4619      	mov	r1, r3
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	f04f 0400 	mov.w	r4, #0
 8007074:	0094      	lsls	r4, r2, #2
 8007076:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800707a:	008b      	lsls	r3, r1, #2
 800707c:	461a      	mov	r2, r3
 800707e:	4623      	mov	r3, r4
 8007080:	4628      	mov	r0, r5
 8007082:	4631      	mov	r1, r6
 8007084:	f7f9 f8be 	bl	8000204 <__aeabi_uldivmod>
 8007088:	4603      	mov	r3, r0
 800708a:	460c      	mov	r4, r1
 800708c:	461a      	mov	r2, r3
 800708e:	4b77      	ldr	r3, [pc, #476]	; (800726c <UART_SetConfig+0x6f4>)
 8007090:	fba3 1302 	umull	r1, r3, r3, r2
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	2164      	movs	r1, #100	; 0x64
 8007098:	fb01 f303 	mul.w	r3, r1, r3
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	3332      	adds	r3, #50	; 0x32
 80070a2:	4a72      	ldr	r2, [pc, #456]	; (800726c <UART_SetConfig+0x6f4>)
 80070a4:	fba2 2303 	umull	r2, r3, r2, r3
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	f003 020f 	and.w	r2, r3, #15
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4442      	add	r2, r8
 80070b4:	609a      	str	r2, [r3, #8]
 80070b6:	e0d0      	b.n	800725a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80070b8:	f7fe f858 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 80070bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	469a      	mov	sl, r3
 80070c2:	f04f 0b00 	mov.w	fp, #0
 80070c6:	46d0      	mov	r8, sl
 80070c8:	46d9      	mov	r9, fp
 80070ca:	eb18 0308 	adds.w	r3, r8, r8
 80070ce:	eb49 0409 	adc.w	r4, r9, r9
 80070d2:	4698      	mov	r8, r3
 80070d4:	46a1      	mov	r9, r4
 80070d6:	eb18 080a 	adds.w	r8, r8, sl
 80070da:	eb49 090b 	adc.w	r9, r9, fp
 80070de:	f04f 0100 	mov.w	r1, #0
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070f2:	4688      	mov	r8, r1
 80070f4:	4691      	mov	r9, r2
 80070f6:	eb1a 0508 	adds.w	r5, sl, r8
 80070fa:	eb4b 0609 	adc.w	r6, fp, r9
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4619      	mov	r1, r3
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f04f 0400 	mov.w	r4, #0
 8007110:	0094      	lsls	r4, r2, #2
 8007112:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007116:	008b      	lsls	r3, r1, #2
 8007118:	461a      	mov	r2, r3
 800711a:	4623      	mov	r3, r4
 800711c:	4628      	mov	r0, r5
 800711e:	4631      	mov	r1, r6
 8007120:	f7f9 f870 	bl	8000204 <__aeabi_uldivmod>
 8007124:	4603      	mov	r3, r0
 8007126:	460c      	mov	r4, r1
 8007128:	461a      	mov	r2, r3
 800712a:	4b50      	ldr	r3, [pc, #320]	; (800726c <UART_SetConfig+0x6f4>)
 800712c:	fba3 2302 	umull	r2, r3, r3, r2
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	469b      	mov	fp, r3
 800713a:	f04f 0c00 	mov.w	ip, #0
 800713e:	46d9      	mov	r9, fp
 8007140:	46e2      	mov	sl, ip
 8007142:	eb19 0309 	adds.w	r3, r9, r9
 8007146:	eb4a 040a 	adc.w	r4, sl, sl
 800714a:	4699      	mov	r9, r3
 800714c:	46a2      	mov	sl, r4
 800714e:	eb19 090b 	adds.w	r9, r9, fp
 8007152:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007156:	f04f 0100 	mov.w	r1, #0
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007162:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007166:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800716a:	4689      	mov	r9, r1
 800716c:	4692      	mov	sl, r2
 800716e:	eb1b 0509 	adds.w	r5, fp, r9
 8007172:	eb4c 060a 	adc.w	r6, ip, sl
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4619      	mov	r1, r3
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	f04f 0400 	mov.w	r4, #0
 8007188:	0094      	lsls	r4, r2, #2
 800718a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800718e:	008b      	lsls	r3, r1, #2
 8007190:	461a      	mov	r2, r3
 8007192:	4623      	mov	r3, r4
 8007194:	4628      	mov	r0, r5
 8007196:	4631      	mov	r1, r6
 8007198:	f7f9 f834 	bl	8000204 <__aeabi_uldivmod>
 800719c:	4603      	mov	r3, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	461a      	mov	r2, r3
 80071a2:	4b32      	ldr	r3, [pc, #200]	; (800726c <UART_SetConfig+0x6f4>)
 80071a4:	fba3 1302 	umull	r1, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	2164      	movs	r1, #100	; 0x64
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	3332      	adds	r3, #50	; 0x32
 80071b6:	4a2d      	ldr	r2, [pc, #180]	; (800726c <UART_SetConfig+0x6f4>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071c2:	4498      	add	r8, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	469b      	mov	fp, r3
 80071c8:	f04f 0c00 	mov.w	ip, #0
 80071cc:	46d9      	mov	r9, fp
 80071ce:	46e2      	mov	sl, ip
 80071d0:	eb19 0309 	adds.w	r3, r9, r9
 80071d4:	eb4a 040a 	adc.w	r4, sl, sl
 80071d8:	4699      	mov	r9, r3
 80071da:	46a2      	mov	sl, r4
 80071dc:	eb19 090b 	adds.w	r9, r9, fp
 80071e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071e4:	f04f 0100 	mov.w	r1, #0
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071f8:	4689      	mov	r9, r1
 80071fa:	4692      	mov	sl, r2
 80071fc:	eb1b 0509 	adds.w	r5, fp, r9
 8007200:	eb4c 060a 	adc.w	r6, ip, sl
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4619      	mov	r1, r3
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	f04f 0400 	mov.w	r4, #0
 8007216:	0094      	lsls	r4, r2, #2
 8007218:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800721c:	008b      	lsls	r3, r1, #2
 800721e:	461a      	mov	r2, r3
 8007220:	4623      	mov	r3, r4
 8007222:	4628      	mov	r0, r5
 8007224:	4631      	mov	r1, r6
 8007226:	f7f8 ffed 	bl	8000204 <__aeabi_uldivmod>
 800722a:	4603      	mov	r3, r0
 800722c:	460c      	mov	r4, r1
 800722e:	461a      	mov	r2, r3
 8007230:	4b0e      	ldr	r3, [pc, #56]	; (800726c <UART_SetConfig+0x6f4>)
 8007232:	fba3 1302 	umull	r1, r3, r3, r2
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	2164      	movs	r1, #100	; 0x64
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	3332      	adds	r3, #50	; 0x32
 8007244:	4a09      	ldr	r2, [pc, #36]	; (800726c <UART_SetConfig+0x6f4>)
 8007246:	fba2 2303 	umull	r2, r3, r2, r3
 800724a:	095b      	lsrs	r3, r3, #5
 800724c:	f003 020f 	and.w	r2, r3, #15
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4442      	add	r2, r8
 8007256:	609a      	str	r2, [r3, #8]
}
 8007258:	e7ff      	b.n	800725a <UART_SetConfig+0x6e2>
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007264:	40011000 	.word	0x40011000
 8007268:	40011400 	.word	0x40011400
 800726c:	51eb851f 	.word	0x51eb851f

08007270 <__libc_init_array>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	4e0d      	ldr	r6, [pc, #52]	; (80072a8 <__libc_init_array+0x38>)
 8007274:	4c0d      	ldr	r4, [pc, #52]	; (80072ac <__libc_init_array+0x3c>)
 8007276:	1ba4      	subs	r4, r4, r6
 8007278:	10a4      	asrs	r4, r4, #2
 800727a:	2500      	movs	r5, #0
 800727c:	42a5      	cmp	r5, r4
 800727e:	d109      	bne.n	8007294 <__libc_init_array+0x24>
 8007280:	4e0b      	ldr	r6, [pc, #44]	; (80072b0 <__libc_init_array+0x40>)
 8007282:	4c0c      	ldr	r4, [pc, #48]	; (80072b4 <__libc_init_array+0x44>)
 8007284:	f000 f820 	bl	80072c8 <_init>
 8007288:	1ba4      	subs	r4, r4, r6
 800728a:	10a4      	asrs	r4, r4, #2
 800728c:	2500      	movs	r5, #0
 800728e:	42a5      	cmp	r5, r4
 8007290:	d105      	bne.n	800729e <__libc_init_array+0x2e>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007298:	4798      	blx	r3
 800729a:	3501      	adds	r5, #1
 800729c:	e7ee      	b.n	800727c <__libc_init_array+0xc>
 800729e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072a2:	4798      	blx	r3
 80072a4:	3501      	adds	r5, #1
 80072a6:	e7f2      	b.n	800728e <__libc_init_array+0x1e>
 80072a8:	08007308 	.word	0x08007308
 80072ac:	08007308 	.word	0x08007308
 80072b0:	08007308 	.word	0x08007308
 80072b4:	0800730c 	.word	0x0800730c

080072b8 <memset>:
 80072b8:	4402      	add	r2, r0
 80072ba:	4603      	mov	r3, r0
 80072bc:	4293      	cmp	r3, r2
 80072be:	d100      	bne.n	80072c2 <memset+0xa>
 80072c0:	4770      	bx	lr
 80072c2:	f803 1b01 	strb.w	r1, [r3], #1
 80072c6:	e7f9      	b.n	80072bc <memset+0x4>

080072c8 <_init>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	bf00      	nop
 80072cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ce:	bc08      	pop	{r3}
 80072d0:	469e      	mov	lr, r3
 80072d2:	4770      	bx	lr

080072d4 <_fini>:
 80072d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d6:	bf00      	nop
 80072d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072da:	bc08      	pop	{r3}
 80072dc:	469e      	mov	lr, r3
 80072de:	4770      	bx	lr
